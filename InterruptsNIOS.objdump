
InterruptsNIOS.elf:     file format elf32-littlenios2
InterruptsNIOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00004518 memsz 0x00004518 flags r-x
    LOAD off    0x00005538 vaddr 0x00004538 paddr 0x00005ecc align 2**12
         filesz 0x00001994 memsz 0x00001994 flags rw-
    LOAD off    0x00007860 vaddr 0x00007860 paddr 0x00007860 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000040e4  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000020c  0000432c  0000432c  0000532c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001994  00004538  00005ecc  00005538  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00007860  00007860  00007860  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00007988  00007988  00006ecc  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00006ecc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00006ecc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000006f8  00000000  00000000  00006ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00009a4f  00000000  00000000  000075e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003351  00000000  00000000  00011037  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003788  00000000  00000000  00014388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000013e0  00000000  00000000  00017b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000257e  00000000  00000000  00018ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000770  00000000  00000000  0001b46e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0001bbe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000178  00000000  00000000  0001bc00  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001e57e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0001e581  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001e586  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001e587  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001e588  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001e58c  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001e590  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0001e594  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0001e59d  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0001e5a6  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0001e5af  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000059  00000000  00000000  0001e5ba  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0001e613  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001adce0  00000000  00000000  000291d8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0000432c l    d  .rodata	00000000 .rodata
00004538 l    d  .rwdata	00000000 .rwdata
00007860 l    d  .bss	00000000 .bss
00007988 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/psmith04/Documents/FPGA/InterruptsNIOS_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 HexDisplay.c
00000000 l    df *ABS*	00000000 InterruptDemo.c
00007860 l     O .bss	00000004 count.1835
00000000 l    df *ABS*	00000000 buttonISR.c
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 seven_seg_bcd.c
00000000 l    df *ABS*	00000000 seven_seg_hex.c
00000000 l    df *ABS*	00000000 timerISR.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000dcc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000f34 l     F .text	00000038 alt_dev_reg
00004538 l     O .rwdata	00001060 JTAG_UART
00005598 l     O .rwdata	00000030 AV_Config
000055c8 l     O .rwdata	00000030 Audio_Subsystem_Audio
000055f8 l     O .rwdata	0000002c Char_LCD_16x2
00005624 l     O .rwdata	0000002c IrDA
00005650 l     O .rwdata	0000002c Expansion_JP5
0000567c l     O .rwdata	0000002c Green_LEDs
000056a8 l     O .rwdata	0000002c HEX3_HEX0
000056d4 l     O .rwdata	0000002c HEX7_HEX4
00005700 l     O .rwdata	0000002c Pushbuttons
0000572c l     O .rwdata	0000002c Red_LEDs
00005758 l     O .rwdata	0000002c Slider_Switches
00005784 l     O .rwdata	00000038 PS2_Port
000057bc l     O .rwdata	00000038 PS2_Port_Dual
000057f4 l     O .rwdata	0000002c Serial_Port
00005820 l     O .rwdata	00000034 USB
00005854 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
000058a8 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000014e8 l     F .text	00000210 altera_avalon_jtag_uart_irq
000016f8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001d38 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00003248 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00003388 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000033b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000362c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000376c l     F .text	00000050 alt_get_errno
000037bc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00005a7c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00007880 g     O .bss	00000004 alt_instruction_exception_handler
00000eb8 g     F .text	0000007c alt_main
0000290c g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00007888 g     O .bss	00000100 alt_irq
000002c8 g     F .text	00000090 HexDisplay
00005ecc g       *ABS*	00000000 __flash_rwdata_start
00001eac g     F .text	00000040 alt_up_character_lcd_send_cmd
00002724 g     F .text	00000034 read_CE_bit
00002aac g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00002fa4 g     F .text	00000090 alt_up_rs232_read_fd
00000544 g     F .text	0000006c LCD_cursor
00003be8 g     F .text	00000024 altera_nios2_gen2_irq_init
00001e38 g     F .text	00000074 get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007884 g     O .bss	00000004 errno
00007870 g     O .bss	00000004 alt_argv
0000dea0 g       *ABS*	00000000 _gp
000058fc g     O .rwdata	00000180 alt_fd_list
00003568 g     F .text	00000090 alt_find_dev
00000ad4 g     F .text	00000148 memcpy
00002058 g     F .text	00000050 alt_up_character_lcd_write_fd
000036f0 g     F .text	0000007c alt_io_redirect
0000432c g       *ABS*	00000000 __DTOR_END__
000025f0 g     F .text	00000090 alt_up_irda_write_fd
00002f30 g     F .text	00000074 alt_up_rs232_read_data
00003e64 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000023ec g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000018f8 g     F .text	0000021c altera_avalon_jtag_uart_read
000005b0 g     F .text	0000006c LCD_text
0000238c g     F .text	00000060 alt_up_irda_disable_read_interrupt
00003dd4 g     F .text	00000090 alt_icache_flush
00005eb4 g     O .rwdata	00000004 alt_max_fd
00002eac g     F .text	00000044 alt_up_rs232_check_parity
00002758 g     F .text	00000030 read_num_bytes_available
00000c1c g     F .text	000001b0 alt_irq_register
000026c0 g     F .text	00000034 read_RI_bit
00005ec4 g     O .rwdata	00000004 _global_impure_ptr
00007988 g       *ABS*	00000000 __bss_end
00003ae0 g     F .text	00000108 alt_tick
000027bc g     F .text	0000002c read_data_byte
00003a44 g     F .text	0000009c alt_alarm_stop
000026f4 g     F .text	00000030 read_RE_bit
00007868 g     O .bss	00000004 alt_irq_active
0000242c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
000058d4 g     O .rwdata	00000028 alt_dev_null
000022f8 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0000296c g     F .text	00000074 alt_up_ps2_write_data_byte
00003368 g     F .text	00000020 alt_dcache_flush_all
00005ecc g       *ABS*	00000000 __ram_rwdata_end
00005eac g     O .rwdata	00000008 alt_dev_list
00004538 g       *ABS*	00000000 __ram_rodata_end
00003034 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00007988 g       *ABS*	00000000 end
00002c9c g     F .text	00000098 alt_up_ps2_write_fd
00002468 g     F .text	00000044 alt_up_irda_check_parity
0000142c g     F .text	000000bc altera_avalon_jtag_uart_init
00000284 g     F .text	00000044 toggleBCDHEX
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000432c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00001db4 g     F .text	00000084 alt_avalon_timer_sc_init
00001b14 g     F .text	00000224 altera_avalon_jtag_uart_write
00001f64 g     F .text	0000007c alt_up_character_lcd_write
00004178 g     F .text	00000180 __call_exitprocs
00000248 g     F .text	0000003c _start
00007878 g     O .bss	00000004 _alt_tick_rate
0000787c g     O .bss	00000004 _alt_nticks
00000fa4 g     F .text	00000324 alt_sys_init
000021a8 g     F .text	0000008c alt_up_character_lcd_shift_display
00000654 g     F .text	000002bc seven_seg_bcd
00004060 g     F .text	00000118 __register_exitproc
00002bb8 g     F .text	00000058 alt_up_ps2_clear_fifo
00002e70 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00002234 g     F .text	0000008c alt_up_character_lcd_erase_pos
000017a0 g     F .text	00000068 altera_avalon_jtag_uart_close
00004538 g       *ABS*	00000000 __ram_rwdata_start
0000432c g       *ABS*	00000000 __ram_rodata_start
000012c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00003d20 g     F .text	000000b4 alt_get_fd
00003f4c g     F .text	0000007c memcmp
00001388 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00007988 g       *ABS*	00000000 __alt_stack_base
000013d8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002330 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00002dd0 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00003c0c g     F .text	00000114 alt_find_file
00003404 g     F .text	000000a4 alt_dev_llist_insert
00007860 g       *ABS*	00000000 __bss_start
00000358 g     F .text	00000094 main
00007874 g     O .bss	00000004 alt_envp
00001328 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000061c g     F .text	00000038 LCD_cursor_off
0000211c g     F .text	0000008c alt_up_character_lcd_shift_cursor
00002b48 g     F .text	00000070 alt_up_ps2_read_data_byte
00005eb8 g     O .rwdata	00000004 alt_errno
000024ac g     F .text	00000040 alt_up_irda_write_data
00002d34 g     F .text	00000040 alt_up_ps2_open_dev
00001f24 g     F .text	00000040 alt_up_character_lcd_open_dev
000028b0 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0000432c g       *ABS*	00000000 __CTOR_END__
00001eec g     F .text	00000038 alt_up_character_lcd_init
0000432c g       *ABS*	00000000 __flash_rodata_start
0000432c g       *ABS*	00000000 __DTOR_LIST__
000030c8 g     F .text	00000040 alt_up_rs232_open_dev
00000f6c g     F .text	00000038 alt_irq_init
000039e0 g     F .text	00000064 alt_release_fd
00002788 g     F .text	00000034 read_data_valid
000022c0 g     F .text	00000038 alt_up_character_lcd_cursor_off
00002a48 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00003f00 g     F .text	00000014 atexit
00005ec8 g     O .rwdata	00000004 _impure_ptr
0000786c g     O .bss	00000004 alt_argc
00003508 g     F .text	00000060 _do_dtors
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000020 g       .exceptions	00000000 alt_irq_entry
00005ea4 g     O .rwdata	00000008 alt_fs_list
00002d74 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00002ef0 g     F .text	00000040 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
000003ec g     F .text	00000158 buttonISR
00000a5c g     F .text	00000078 timerISR
00005ecc g       *ABS*	00000000 _edata
00007988 g       *ABS*	00000000 _end
00000248 g       *ABS*	00000000 __ram_exceptions_end
00001808 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00003f14 g     F .text	00000038 exit
000024ec g     F .text	00000074 alt_up_irda_read_data
000027e8 g     F .text	000000c8 alt_up_ps2_init
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001fe0 g     F .text	00000078 alt_up_character_lcd_string
00002680 g     F .text	00000040 alt_up_irda_open_dev
000042f8 g     F .text	00000034 _exit
00003108 g     F .text	00000140 alt_alarm_start
000029e0 g     F .text	00000068 alt_up_ps2_wait_for_ack
00000910 g     F .text	0000014c seven_seg_hex
00003fc8 g     F .text	00000098 strlen
00003888 g     F .text	00000158 open
000035f8 g     F .text	00000034 alt_icache_flush_all
000020a8 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00005ea0 g     O .rwdata	00000004 alt_priority_mask
00002c10 g     F .text	0000008c alt_up_ps2_read_fd
00002560 g     F .text	00000090 alt_up_irda_read_fd
00005ebc g     O .rwdata	00000008 alt_alarm_list
000034a8 g     F .text	00000060 _do_ctors
00002e30 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00003298 g     F .text	000000d0 close
00007864 g     O .bss	00000001 display_as_bcd
00000e34 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800034 	movhi	r2,0
 140:	109e2204 	addi	r2,r2,30856
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800034 	movhi	r2,0
 158:	109e2204 	addi	r2,r2,30856
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a67817 	ldw	r2,-26144(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a67817 	ldw	r2,-26144(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     254:	d6b7a814 	ori	gp,gp,56992
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     25c:	109e1814 	ori	r2,r2,30816

    movhi r3, %hi(__bss_end)
     260:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     264:	18de6214 	ori	r3,r3,31112

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	0000e340 	call	e34 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	0000eb80 	call	eb8 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <toggleBCDHEX>:
#include "io.h"
#include "system.h"

extern volatile alt_u8 display_as_bcd;

void toggleBCDHEX(){
     284:	deffff04 	addi	sp,sp,-4
     288:	df000015 	stw	fp,0(sp)
     28c:	d839883a 	mov	fp,sp
	display_as_bcd = !display_as_bcd;
     290:	00800034 	movhi	r2,0
     294:	109e1904 	addi	r2,r2,30820
     298:	10800003 	ldbu	r2,0(r2)
     29c:	10803fcc 	andi	r2,r2,255
     2a0:	1005003a 	cmpeq	r2,r2,zero
     2a4:	1007883a 	mov	r3,r2
     2a8:	00800034 	movhi	r2,0
     2ac:	109e1904 	addi	r2,r2,30820
     2b0:	10c00005 	stb	r3,0(r2)
}
     2b4:	0001883a 	nop
     2b8:	e037883a 	mov	sp,fp
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00104 	addi	sp,sp,4
     2c4:	f800283a 	ret

000002c8 <HexDisplay>:

void HexDisplay(alt_u32 * base, alt_u16 num){
     2c8:	defffb04 	addi	sp,sp,-20
     2cc:	dfc00415 	stw	ra,16(sp)
     2d0:	df000315 	stw	fp,12(sp)
     2d4:	df000304 	addi	fp,sp,12
     2d8:	e13ffe15 	stw	r4,-8(fp)
     2dc:	2805883a 	mov	r2,r5
     2e0:	e0bfff0d 	sth	r2,-4(fp)

	alt_u8 leading_zeros = 0x01&IORD(SLIDER_SWITCHES_BASE, 0);
     2e4:	00840034 	movhi	r2,4096
     2e8:	10801004 	addi	r2,r2,64
     2ec:	10800037 	ldwio	r2,0(r2)
     2f0:	1080004c 	andi	r2,r2,1
     2f4:	e0bffd05 	stb	r2,-12(fp)
	if (display_as_bcd){
     2f8:	00800034 	movhi	r2,0
     2fc:	109e1904 	addi	r2,r2,30820
     300:	10800003 	ldbu	r2,0(r2)
     304:	10803fcc 	andi	r2,r2,255
     308:	10000726 	beq	r2,zero,328 <HexDisplay+0x60>
		seven_seg_bcd(base, num, leading_zeros);
     30c:	e0bfff0b 	ldhu	r2,-4(fp)
     310:	e0fffd03 	ldbu	r3,-12(fp)
     314:	180d883a 	mov	r6,r3
     318:	100b883a 	mov	r5,r2
     31c:	e13ffe17 	ldw	r4,-8(fp)
     320:	00006540 	call	654 <seven_seg_bcd>
	}
	else
	{
		seven_seg_hex(base, num, leading_zeros); // leading_zeros);
	}
}
     324:	00000606 	br	340 <HexDisplay+0x78>
	if (display_as_bcd){
		seven_seg_bcd(base, num, leading_zeros);
	}
	else
	{
		seven_seg_hex(base, num, leading_zeros); // leading_zeros);
     328:	e0bfff0b 	ldhu	r2,-4(fp)
     32c:	e0fffd03 	ldbu	r3,-12(fp)
     330:	180d883a 	mov	r6,r3
     334:	100b883a 	mov	r5,r2
     338:	e13ffe17 	ldw	r4,-8(fp)
     33c:	00009100 	call	910 <seven_seg_hex>
	}
}
     340:	0001883a 	nop
     344:	e037883a 	mov	sp,fp
     348:	dfc00117 	ldw	ra,4(sp)
     34c:	df000017 	ldw	fp,0(sp)
     350:	dec00204 	addi	sp,sp,8
     354:	f800283a 	ret

00000358 <main>:
 ******************************************************************************/

volatile alt_u8 display_as_bcd;

int main(void)
{ 
     358:	defffd04 	addi	sp,sp,-12
     35c:	dfc00215 	stw	ra,8(sp)
     360:	df000115 	stw	fp,4(sp)
     364:	df000104 	addi	fp,sp,4
    alt_u32* pCount;
    static alt_u32 count = 0;
    pCount = &count;
     368:	d0a67004 	addi	r2,gp,-26176
     36c:	e0bfff15 	stw	r2,-4(fp)
    /* Initialize Variables */
    display_as_bcd = 1;
     370:	00800034 	movhi	r2,0
     374:	109e1904 	addi	r2,r2,30820
     378:	00c00044 	movi	r3,1
     37c:	10c00005 	stb	r3,0(r2)
    /* Register ISRs */
    alt_irq_register(INTERVAL_TIMER_IRQ, (void*)pCount, timerISR);
     380:	01800034 	movhi	r6,0
     384:	31829704 	addi	r6,r6,2652
     388:	e17fff17 	ldw	r5,-4(fp)
     38c:	0009883a 	mov	r4,zero
     390:	0000c1c0 	call	c1c <alt_irq_register>
    alt_irq_register(PUSHBUTTONS_IRQ, (void*)pCount, buttonISR);
     394:	01800034 	movhi	r6,0
     398:	3180fb04 	addi	r6,r6,1004
     39c:	e17fff17 	ldw	r5,-4(fp)
     3a0:	01000044 	movi	r4,1
     3a4:	0000c1c0 	call	c1c <alt_irq_register>

    /* Initialize Timer */
    IOWR(INTERVAL_TIMER_BASE, 2, 0x0000FFFF&INTERVAL_TIMER_FREQ);
     3a8:	00fc2014 	movui	r3,61568
     3ac:	00840034 	movhi	r2,4096
     3b0:	10880204 	addi	r2,r2,8200
     3b4:	10c00035 	stwio	r3,0(r2)
    IOWR(INTERVAL_TIMER_BASE, 3, 0xFFFF&(INTERVAL_TIMER_FREQ >> 16));
     3b8:	00c0be84 	movi	r3,762
     3bc:	00840034 	movhi	r2,4096
     3c0:	10880304 	addi	r2,r2,8204
     3c4:	10c00035 	stwio	r3,0(r2)
    IOWR(INTERVAL_TIMER_BASE, 1, 0x7); // STOP=0, START=1, CONT=1, ITO=1 => 01111 = 0x7
     3c8:	00c001c4 	movi	r3,7
     3cc:	00840034 	movhi	r2,4096
     3d0:	10880104 	addi	r2,r2,8196
     3d4:	10c00035 	stwio	r3,0(r2)

    /* Initialize Buttons */
    IOWR(PUSHBUTTONS_BASE, 2, 0xE); // Set interrupt mask
     3d8:	00c00384 	movi	r3,14
     3dc:	00840034 	movhi	r2,4096
     3e0:	10801604 	addi	r2,r2,88
     3e4:	10c00035 	stwio	r3,0(r2)

    /* Loop while processing interrupts */
    while( 1 ) 
    {

    }
     3e8:	003fff06 	br	3e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70003e8>

000003ec <buttonISR>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void buttonISR(void* context)
#else
void buttonISR(void* context, alt_u32 id)
#endif
{
     3ec:	defff904 	addi	sp,sp,-28
     3f0:	dfc00615 	stw	ra,24(sp)
     3f4:	df000515 	stw	fp,20(sp)
     3f8:	df000504 	addi	fp,sp,20
     3fc:	e13ffe15 	stw	r4,-8(fp)
     400:	e17fff15 	stw	r5,-4(fp)
    /* Cast context It is important that this be declared 
     * volatile to avoid unwanted compiler optimization.*/
	alt_u32 *pCount = (alt_u32*)context;
     404:	e0bffe17 	ldw	r2,-8(fp)
     408:	e0bffc15 	stw	r2,-16(fp)

	//volatile alt_u32 *keyPrs = (alt_u32*)context;
	alt_u8 timersetting;

	/* Store the value in the PUSHBUTTONS's edge capture register in *context. */
	alt_u8 buttonPress = IORD(PUSHBUTTONS_BASE, 3);
     40c:	00840034 	movhi	r2,4096
     410:	10801704 	addi	r2,r2,92
     414:	10800037 	ldwio	r2,0(r2)
     418:	e0bffd05 	stb	r2,-12(fp)

	/* Reset the PUSHBUTTONS's edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PUSHBUTTONS_BASE, 0);
     41c:	0007883a 	mov	r3,zero
     420:	00840034 	movhi	r2,4096
     424:	10801704 	addi	r2,r2,92
     428:	10c00035 	stwio	r3,0(r2)

    /* Act upon the interrupt */
	switch (buttonPress){
     42c:	e0bffd03 	ldbu	r2,-12(fp)
     430:	10c00120 	cmpeqi	r3,r2,4
     434:	1800221e 	bne	r3,zero,4c0 <buttonISR+0xd4>
     438:	10c00220 	cmpeqi	r3,r2,8
     43c:	1800301e 	bne	r3,zero,500 <buttonISR+0x114>
     440:	108000a0 	cmpeqi	r2,r2,2
     444:	1000011e 	bne	r2,zero,44c <buttonISR+0x60>
		toggleBCDHEX(); //toggles hex or BCD display
		LCD_cursor(0,1);								//Placing cursor on bottom left block of LCD
		LCD_text("Key 3 Pressed ...                ");
		break;
	default:  //included a default statement to prevent any errors
		break;
     448:	00003506 	br	520 <buttonISR+0x134>

    /* Act upon the interrupt */
	switch (buttonPress){

	case KEY1:     //0x2
		timersetting = IORD(INTERVAL_TIMER_BASE, 1);  //assigns current timer state to timersetting
     44c:	00840034 	movhi	r2,4096
     450:	10880104 	addi	r2,r2,8196
     454:	10800037 	ldwio	r2,0(r2)
     458:	e0bffb05 	stb	r2,-20(fp)
		if (timersetting&0x8) // if timer is off
     45c:	e0bffb03 	ldbu	r2,-20(fp)
     460:	1080020c 	andi	r2,r2,8
     464:	10000926 	beq	r2,zero,48c <buttonISR+0xa0>
		{
		timersetting = timerOn; // turn on
     468:	008001c4 	movi	r2,7
     46c:	e0bffb05 	stb	r2,-20(fp)
		LCD_cursor(0,0);
     470:	000b883a 	mov	r5,zero
     474:	0009883a 	mov	r4,zero
     478:	00005440 	call	544 <LCD_cursor>
		LCD_text("Timer Running ...           ");
     47c:	01000034 	movhi	r4,0
     480:	2110cb04 	addi	r4,r4,17196
     484:	00005b00 	call	5b0 <LCD_text>
     488:	00000806 	br	4ac <buttonISR+0xc0>
		}
		else
		{
		timersetting = timerOff; // if timer is on, turn off
     48c:	008002c4 	movi	r2,11
     490:	e0bffb05 	stb	r2,-20(fp)
		LCD_cursor(0,0);
     494:	000b883a 	mov	r5,zero
     498:	0009883a 	mov	r4,zero
     49c:	00005440 	call	544 <LCD_cursor>
		LCD_text("Timer Stopped ...            ");
     4a0:	01000034 	movhi	r4,0
     4a4:	2110d304 	addi	r4,r4,17228
     4a8:	00005b00 	call	5b0 <LCD_text>
		}
		IOWR(INTERVAL_TIMER_BASE, 1 ,timersetting);     // based on the if statement, will write 0x7 or 0xB and activate/deactivate
     4ac:	e0fffb03 	ldbu	r3,-20(fp)
     4b0:	00840034 	movhi	r2,4096
     4b4:	10880104 	addi	r2,r2,8196
     4b8:	10c00035 	stwio	r3,0(r2)
		break;
     4bc:	00001806 	br	520 <buttonISR+0x134>

	case KEY2:    //0x4
		*pCount = 0;        //resets counter to 0
     4c0:	e0bffc17 	ldw	r2,-16(fp)
     4c4:	10000015 	stw	zero,0(r2)
		HexDisplay((alt_u32*)HEX3_HEX0_BASE, *pCount); //displays count
     4c8:	e0bffc17 	ldw	r2,-16(fp)
     4cc:	10800017 	ldw	r2,0(r2)
     4d0:	10bfffcc 	andi	r2,r2,65535
     4d4:	100b883a 	mov	r5,r2
     4d8:	01040034 	movhi	r4,4096
     4dc:	21000804 	addi	r4,r4,32
     4e0:	00002c80 	call	2c8 <HexDisplay>
		LCD_cursor(0,1);
     4e4:	01400044 	movi	r5,1
     4e8:	0009883a 	mov	r4,zero
     4ec:	00005440 	call	544 <LCD_cursor>
		LCD_text("Key 2 Pressed ...                ");
     4f0:	01000034 	movhi	r4,0
     4f4:	2110db04 	addi	r4,r4,17260
     4f8:	00005b00 	call	5b0 <LCD_text>
		break;
     4fc:	00000806 	br	520 <buttonISR+0x134>

	case KEY3:    //0x8
		toggleBCDHEX(); //toggles hex or BCD display
     500:	00002840 	call	284 <toggleBCDHEX>
		LCD_cursor(0,1);								//Placing cursor on bottom left block of LCD
     504:	01400044 	movi	r5,1
     508:	0009883a 	mov	r4,zero
     50c:	00005440 	call	544 <LCD_cursor>
		LCD_text("Key 3 Pressed ...                ");
     510:	01000034 	movhi	r4,0
     514:	2110e404 	addi	r4,r4,17296
     518:	00005b00 	call	5b0 <LCD_text>
		break;
     51c:	0001883a 	nop
    /*
     * Read the PIO to delay ISR exit. This is done to prevent a spurious
     * interrupt in systems with high processor -> pio latency and fast
     * interrupts.
     */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(PUSHBUTTONS_BASE);
     520:	00840034 	movhi	r2,4096
     524:	10801704 	addi	r2,r2,92
     528:	10800037 	ldwio	r2,0(r2)
}
     52c:	0001883a 	nop
     530:	e037883a 	mov	sp,fp
     534:	dfc00117 	ldw	ra,4(sp)
     538:	df000017 	ldw	fp,0(sp)
     53c:	dec00204 	addi	sp,sp,8
     540:	f800283a 	ret

00000544 <LCD_cursor>:
#include "lcd.h"
/****************************************************************************************
 * Subroutine to move the LCD cursor
****************************************************************************************/
void LCD_cursor(int x, int y)
{
     544:	defffb04 	addi	sp,sp,-20
     548:	df000415 	stw	fp,16(sp)
     54c:	df000404 	addi	fp,sp,16
     550:	e13ffe15 	stw	r4,-8(fp)
     554:	e17fff15 	stw	r5,-4(fp)
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_16X2_BASE;	// 16x2 character display
     558:	00840034 	movhi	r2,4096
     55c:	108c1404 	addi	r2,r2,12368
     560:	e0bffd15 	stw	r2,-12(fp)
	char instruction;

	instruction = x;
     564:	e0bffe17 	ldw	r2,-8(fp)
     568:	e0bffc05 	stb	r2,-16(fp)
	if (y != 0) instruction |= 0x40;				// set bit 6 for bottom row
     56c:	e0bfff17 	ldw	r2,-4(fp)
     570:	10000326 	beq	r2,zero,580 <LCD_cursor+0x3c>
     574:	e0bffc03 	ldbu	r2,-16(fp)
     578:	10801014 	ori	r2,r2,64
     57c:	e0bffc05 	stb	r2,-16(fp)
	instruction |= 0x80;								// need to set bit 7 to set the cursor location
     580:	e0fffc03 	ldbu	r3,-16(fp)
     584:	00bfe004 	movi	r2,-128
     588:	1884b03a 	or	r2,r3,r2
     58c:	e0bffc05 	stb	r2,-16(fp)
	*(LCD_display_ptr) = instruction;			// write to the LCD instruction register
     590:	e0bffd17 	ldw	r2,-12(fp)
     594:	e0fffc03 	ldbu	r3,-16(fp)
     598:	10c00005 	stb	r3,0(r2)
}
     59c:	0001883a 	nop
     5a0:	e037883a 	mov	sp,fp
     5a4:	df000017 	ldw	fp,0(sp)
     5a8:	dec00104 	addi	sp,sp,4
     5ac:	f800283a 	ret

000005b0 <LCD_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the LCD
****************************************************************************************/
void LCD_text(char * text_ptr)
{
     5b0:	defffd04 	addi	sp,sp,-12
     5b4:	df000215 	stw	fp,8(sp)
     5b8:	df000204 	addi	fp,sp,8
     5bc:	e13fff15 	stw	r4,-4(fp)
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_16X2_BASE;	// 16x2 character display
     5c0:	00840034 	movhi	r2,4096
     5c4:	108c1404 	addi	r2,r2,12368
     5c8:	e0bffe15 	stw	r2,-8(fp)

	while ( *(text_ptr) )
     5cc:	00000806 	br	5f0 <LCD_text+0x40>
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
     5d0:	e0bffe17 	ldw	r2,-8(fp)
     5d4:	10800044 	addi	r2,r2,1
     5d8:	e0ffff17 	ldw	r3,-4(fp)
     5dc:	18c00003 	ldbu	r3,0(r3)
     5e0:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     5e4:	e0bfff17 	ldw	r2,-4(fp)
     5e8:	10800044 	addi	r2,r2,1
     5ec:	e0bfff15 	stw	r2,-4(fp)
****************************************************************************************/
void LCD_text(char * text_ptr)
{
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_16X2_BASE;	// 16x2 character display

	while ( *(text_ptr) )
     5f0:	e0bfff17 	ldw	r2,-4(fp)
     5f4:	10800003 	ldbu	r2,0(r2)
     5f8:	10803fcc 	andi	r2,r2,255
     5fc:	1080201c 	xori	r2,r2,128
     600:	10bfe004 	addi	r2,r2,-128
     604:	103ff21e 	bne	r2,zero,5d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70005d0>
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
		++text_ptr;
	}
}
     608:	0001883a 	nop
     60c:	e037883a 	mov	sp,fp
     610:	df000017 	ldw	fp,0(sp)
     614:	dec00104 	addi	sp,sp,4
     618:	f800283a 	ret

0000061c <LCD_cursor_off>:

/****************************************************************************************
 * Subroutine to turn off the LCD cursor
****************************************************************************************/
void LCD_cursor_off(void)
{
     61c:	defffe04 	addi	sp,sp,-8
     620:	df000115 	stw	fp,4(sp)
     624:	df000104 	addi	fp,sp,4
  	volatile char * LCD_display_ptr = (char *) CHAR_LCD_16X2_BASE;	// 16x2 character display
     628:	00840034 	movhi	r2,4096
     62c:	108c1404 	addi	r2,r2,12368
     630:	e0bfff15 	stw	r2,-4(fp)
	*(LCD_display_ptr) = 0x0C;											// turn off the LCD cursor
     634:	e0bfff17 	ldw	r2,-4(fp)
     638:	00c00304 	movi	r3,12
     63c:	10c00005 	stb	r3,0(r2)
}
     640:	0001883a 	nop
     644:	e037883a 	mov	sp,fp
     648:	df000017 	ldw	fp,0(sp)
     64c:	dec00104 	addi	sp,sp,4
     650:	f800283a 	ret

00000654 <seven_seg_bcd>:
 */
//#include "system.h"
//#include "io.h"
#include "alt_types.h"

void seven_seg_bcd(alt_u32* base, alt_u16 num, alt_u8 leading_zeros) {
     654:	defff304 	addi	sp,sp,-52
     658:	df000c15 	stw	fp,48(sp)
     65c:	df000c04 	addi	fp,sp,48
     660:	e13ffd15 	stw	r4,-12(fp)
     664:	2807883a 	mov	r3,r5
     668:	3005883a 	mov	r2,r6
     66c:	e0fffe0d 	sth	r3,-8(fp)
     670:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 bcd[4];// = {0, 0, 0, 0};
	int i, j;

	alt_u8 BCD_CODES[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67};
     674:	00800fc4 	movi	r2,63
     678:	e0bffa05 	stb	r2,-24(fp)
     67c:	00800184 	movi	r2,6
     680:	e0bffa45 	stb	r2,-23(fp)
     684:	008016c4 	movi	r2,91
     688:	e0bffa85 	stb	r2,-22(fp)
     68c:	008013c4 	movi	r2,79
     690:	e0bffac5 	stb	r2,-21(fp)
     694:	00801984 	movi	r2,102
     698:	e0bffb05 	stb	r2,-20(fp)
     69c:	00801b44 	movi	r2,109
     6a0:	e0bffb45 	stb	r2,-19(fp)
     6a4:	00801f44 	movi	r2,125
     6a8:	e0bffb85 	stb	r2,-18(fp)
     6ac:	008001c4 	movi	r2,7
     6b0:	e0bffbc5 	stb	r2,-17(fp)
     6b4:	00801fc4 	movi	r2,127
     6b8:	e0bffc05 	stb	r2,-16(fp)
     6bc:	008019c4 	movi	r2,103
     6c0:	e0bffc45 	stb	r2,-15(fp)

	bcd[3] = 0;
     6c4:	e03ff9c5 	stb	zero,-25(fp)
	bcd[2] = 0;
     6c8:	e03ff985 	stb	zero,-26(fp)
	bcd[1] = 0;
     6cc:	e03ff945 	stb	zero,-27(fp)
	bcd[0] = 0;
     6d0:	e03ff905 	stb	zero,-28(fp)

	for (i=0; i<8; i++) {
     6d4:	e03ff415 	stw	zero,-48(fp)
     6d8:	00005906 	br	840 <seven_seg_bcd+0x1ec>
		// check all columns for >= 5
		bcd[3] += (bcd[3] >= 5)?3:0;
     6dc:	e0fff9c3 	ldbu	r3,-25(fp)
     6e0:	e0bff9c3 	ldbu	r2,-25(fp)
     6e4:	10803fcc 	andi	r2,r2,255
     6e8:	10800170 	cmpltui	r2,r2,5
     6ec:	1000021e 	bne	r2,zero,6f8 <seven_seg_bcd+0xa4>
     6f0:	008000c4 	movi	r2,3
     6f4:	00000106 	br	6fc <seven_seg_bcd+0xa8>
     6f8:	0005883a 	mov	r2,zero
     6fc:	1885883a 	add	r2,r3,r2
     700:	e0bff9c5 	stb	r2,-25(fp)
		bcd[2] += (bcd[2] >= 5)?3:0;
     704:	e0fff983 	ldbu	r3,-26(fp)
     708:	e0bff983 	ldbu	r2,-26(fp)
     70c:	10803fcc 	andi	r2,r2,255
     710:	10800170 	cmpltui	r2,r2,5
     714:	1000021e 	bne	r2,zero,720 <seven_seg_bcd+0xcc>
     718:	008000c4 	movi	r2,3
     71c:	00000106 	br	724 <seven_seg_bcd+0xd0>
     720:	0005883a 	mov	r2,zero
     724:	1885883a 	add	r2,r3,r2
     728:	e0bff985 	stb	r2,-26(fp)
		bcd[1] += (bcd[1] >= 5)?3:0;
     72c:	e0fff943 	ldbu	r3,-27(fp)
     730:	e0bff943 	ldbu	r2,-27(fp)
     734:	10803fcc 	andi	r2,r2,255
     738:	10800170 	cmpltui	r2,r2,5
     73c:	1000021e 	bne	r2,zero,748 <seven_seg_bcd+0xf4>
     740:	008000c4 	movi	r2,3
     744:	00000106 	br	74c <seven_seg_bcd+0xf8>
     748:	0005883a 	mov	r2,zero
     74c:	1885883a 	add	r2,r3,r2
     750:	e0bff945 	stb	r2,-27(fp)
		bcd[0] += (bcd[0] >= 5)?3:0;
     754:	e0fff903 	ldbu	r3,-28(fp)
     758:	e0bff903 	ldbu	r2,-28(fp)
     75c:	10803fcc 	andi	r2,r2,255
     760:	10800170 	cmpltui	r2,r2,5
     764:	1000021e 	bne	r2,zero,770 <seven_seg_bcd+0x11c>
     768:	008000c4 	movi	r2,3
     76c:	00000106 	br	774 <seven_seg_bcd+0x120>
     770:	0005883a 	mov	r2,zero
     774:	1885883a 	add	r2,r3,r2
     778:	e0bff905 	stb	r2,-28(fp)
		bcd[3] = ((bcd[3] << 1) & 0xE) + ((bcd[2] & 0x8) >> 3);
     77c:	e0bff9c3 	ldbu	r2,-25(fp)
     780:	10803fcc 	andi	r2,r2,255
     784:	1085883a 	add	r2,r2,r2
     788:	1080038c 	andi	r2,r2,14
     78c:	1007883a 	mov	r3,r2
     790:	e0bff983 	ldbu	r2,-26(fp)
     794:	10803fcc 	andi	r2,r2,255
     798:	1080020c 	andi	r2,r2,8
     79c:	1005d0fa 	srai	r2,r2,3
     7a0:	1885883a 	add	r2,r3,r2
     7a4:	e0bff9c5 	stb	r2,-25(fp)
		bcd[2] = ((bcd[2] << 1) & 0xE) + ((bcd[1] & 0x8) >> 3);
     7a8:	e0bff983 	ldbu	r2,-26(fp)
     7ac:	10803fcc 	andi	r2,r2,255
     7b0:	1085883a 	add	r2,r2,r2
     7b4:	1080038c 	andi	r2,r2,14
     7b8:	1007883a 	mov	r3,r2
     7bc:	e0bff943 	ldbu	r2,-27(fp)
     7c0:	10803fcc 	andi	r2,r2,255
     7c4:	1080020c 	andi	r2,r2,8
     7c8:	1005d0fa 	srai	r2,r2,3
     7cc:	1885883a 	add	r2,r3,r2
     7d0:	e0bff985 	stb	r2,-26(fp)
		bcd[1] = ((bcd[1] << 1) & 0xE) + ((bcd[0] & 0x8) >> 3);
     7d4:	e0bff943 	ldbu	r2,-27(fp)
     7d8:	10803fcc 	andi	r2,r2,255
     7dc:	1085883a 	add	r2,r2,r2
     7e0:	1080038c 	andi	r2,r2,14
     7e4:	1007883a 	mov	r3,r2
     7e8:	e0bff903 	ldbu	r2,-28(fp)
     7ec:	10803fcc 	andi	r2,r2,255
     7f0:	1080020c 	andi	r2,r2,8
     7f4:	1005d0fa 	srai	r2,r2,3
     7f8:	1885883a 	add	r2,r3,r2
     7fc:	e0bff945 	stb	r2,-27(fp)
		bcd[0] = ((bcd[0] << 1) & 0xE) + ((num & 0x80) >> 7);
     800:	e0bff903 	ldbu	r2,-28(fp)
     804:	10803fcc 	andi	r2,r2,255
     808:	1085883a 	add	r2,r2,r2
     80c:	1080038c 	andi	r2,r2,14
     810:	1007883a 	mov	r3,r2
     814:	e0bffe0b 	ldhu	r2,-8(fp)
     818:	1080200c 	andi	r2,r2,128
     81c:	1005d1fa 	srai	r2,r2,7
     820:	1885883a 	add	r2,r3,r2
     824:	e0bff905 	stb	r2,-28(fp)
		num <<= 1;
     828:	e0bffe0b 	ldhu	r2,-8(fp)
     82c:	1085883a 	add	r2,r2,r2
     830:	e0bffe0d 	sth	r2,-8(fp)
	bcd[3] = 0;
	bcd[2] = 0;
	bcd[1] = 0;
	bcd[0] = 0;

	for (i=0; i<8; i++) {
     834:	e0bff417 	ldw	r2,-48(fp)
     838:	10800044 	addi	r2,r2,1
     83c:	e0bff415 	stw	r2,-48(fp)
     840:	e0bff417 	ldw	r2,-48(fp)
     844:	10800210 	cmplti	r2,r2,8
     848:	103fa41e 	bne	r2,zero,6dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70006dc>
		bcd[2] = ((bcd[2] << 1) & 0xE) + ((bcd[1] & 0x8) >> 3);
		bcd[1] = ((bcd[1] << 1) & 0xE) + ((bcd[0] & 0x8) >> 3);
		bcd[0] = ((bcd[0] << 1) & 0xE) + ((num & 0x80) >> 7);
		num <<= 1;
	}
	alt_u8 trailing_zeros = 0;
     84c:	e03ff605 	stb	zero,-40(fp)
	int bcd_total = 0;
     850:	e03ff715 	stw	zero,-36(fp)
	int k = 24;
     854:	00800604 	movi	r2,24
     858:	e0bff815 	stw	r2,-32(fp)
	for (j=3; j>=0; j--) {
     85c:	008000c4 	movi	r2,3
     860:	e0bff515 	stw	r2,-44(fp)
     864:	00002006 	br	8e8 <seven_seg_bcd+0x294>
		if (leading_zeros || bcd[j] > 0 || trailing_zeros)
     868:	e0bfff03 	ldbu	r2,-4(fp)
     86c:	1000081e 	bne	r2,zero,890 <seven_seg_bcd+0x23c>
     870:	e0fff904 	addi	r3,fp,-28
     874:	e0bff517 	ldw	r2,-44(fp)
     878:	1885883a 	add	r2,r3,r2
     87c:	10800003 	ldbu	r2,0(r2)
     880:	10803fcc 	andi	r2,r2,255
     884:	1000021e 	bne	r2,zero,890 <seven_seg_bcd+0x23c>
     888:	e0bff603 	ldbu	r2,-40(fp)
     88c:	10001026 	beq	r2,zero,8d0 <seven_seg_bcd+0x27c>
		{
			bcd_total += BCD_CODES[bcd[j]] << k;
     890:	e0fff904 	addi	r3,fp,-28
     894:	e0bff517 	ldw	r2,-44(fp)
     898:	1885883a 	add	r2,r3,r2
     89c:	10800003 	ldbu	r2,0(r2)
     8a0:	10803fcc 	andi	r2,r2,255
     8a4:	e0fffa04 	addi	r3,fp,-24
     8a8:	1885883a 	add	r2,r3,r2
     8ac:	10800003 	ldbu	r2,0(r2)
     8b0:	10c03fcc 	andi	r3,r2,255
     8b4:	e0bff817 	ldw	r2,-32(fp)
     8b8:	1884983a 	sll	r2,r3,r2
     8bc:	e0fff717 	ldw	r3,-36(fp)
     8c0:	1885883a 	add	r2,r3,r2
     8c4:	e0bff715 	stw	r2,-36(fp)
			trailing_zeros = 1;
     8c8:	00800044 	movi	r2,1
     8cc:	e0bff605 	stb	r2,-40(fp)
		}
		k -= 8;
     8d0:	e0bff817 	ldw	r2,-32(fp)
     8d4:	10bffe04 	addi	r2,r2,-8
     8d8:	e0bff815 	stw	r2,-32(fp)
		num <<= 1;
	}
	alt_u8 trailing_zeros = 0;
	int bcd_total = 0;
	int k = 24;
	for (j=3; j>=0; j--) {
     8dc:	e0bff517 	ldw	r2,-44(fp)
     8e0:	10bfffc4 	addi	r2,r2,-1
     8e4:	e0bff515 	stw	r2,-44(fp)
     8e8:	e0bff517 	ldw	r2,-44(fp)
     8ec:	103fde0e 	bge	r2,zero,868 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000868>
			trailing_zeros = 1;
		}
		k -= 8;
	}
	// Output the value by dereferencing the base address pointer
	*(base) = bcd_total;
     8f0:	e0fff717 	ldw	r3,-36(fp)
     8f4:	e0bffd17 	ldw	r2,-12(fp)
     8f8:	10c00015 	stw	r3,0(r2)
}
     8fc:	0001883a 	nop
     900:	e037883a 	mov	sp,fp
     904:	df000017 	ldw	fp,0(sp)
     908:	dec00104 	addi	sp,sp,4
     90c:	f800283a 	ret

00000910 <seven_seg_hex>:
 * Parameters:
 *     base          - base address of the display
 *     num           - number to display
 *     leading_zeros - if non-zero display leading zeros
 */
void seven_seg_hex(alt_u32 * base, alt_u16 num, alt_u8 leading_zeros) {
     910:	defff204 	addi	sp,sp,-56
     914:	dfc00d15 	stw	ra,52(sp)
     918:	df000c15 	stw	fp,48(sp)
     91c:	df000c04 	addi	fp,sp,48
     920:	e13ffd15 	stw	r4,-12(fp)
     924:	2807883a 	mov	r3,r5
     928:	3005883a 	mov	r2,r6
     92c:	e0fffe0d 	sth	r3,-8(fp)
     930:	e0bfff05 	stb	r2,-4(fp)
	// an array that holds the values for each nibble
	alt_u8 hex[4];
	// encodings for each digit for the 7 LEDs making up the display
	alt_u8 HEX_CODES[16] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
     934:	00800034 	movhi	r2,0
     938:	1090ec84 	addi	r2,r2,17330
     93c:	e0fff904 	addi	r3,fp,-28
     940:	1009883a 	mov	r4,r2
     944:	00800404 	movi	r2,16
     948:	100d883a 	mov	r6,r2
     94c:	200b883a 	mov	r5,r4
     950:	1809883a 	mov	r4,r3
     954:	0000ad40 	call	ad4 <memcpy>

	hex[0] = num & 0xF;          // least significant digit
     958:	e0bffe0b 	ldhu	r2,-8(fp)
     95c:	108003cc 	andi	r2,r2,15
     960:	e0bff805 	stb	r2,-32(fp)
	hex[1] = (num >> 4) & 0xF;
     964:	e0bffe0b 	ldhu	r2,-8(fp)
     968:	1004d13a 	srli	r2,r2,4
     96c:	108003cc 	andi	r2,r2,15
     970:	e0bff845 	stb	r2,-31(fp)
	hex[2] = (num >> 8) & 0xF;
     974:	e0bffe0b 	ldhu	r2,-8(fp)
     978:	1004d23a 	srli	r2,r2,8
     97c:	108003cc 	andi	r2,r2,15
     980:	e0bff885 	stb	r2,-30(fp)
	hex[3] = (num >> 12) & 0xF;  // most significant digit
     984:	e0bffe0b 	ldhu	r2,-8(fp)
     988:	1004d33a 	srli	r2,r2,12
     98c:	108003cc 	andi	r2,r2,15
     990:	e0bff8c5 	stb	r2,-29(fp)

	// encode the digits
	// blank leading zeros if asked, but never other zeros
	alt_u8 trailing_zeros = 0;
     994:	e03ff405 	stb	zero,-48(fp)
	int i;
	int k = 24;
     998:	00800604 	movi	r2,24
     99c:	e0bff615 	stw	r2,-40(fp)
	int hex4 = 0; // The encoded value to write to the base register
     9a0:	e03ff715 	stw	zero,-36(fp)
	for (i=3; i>=0; i--) {
     9a4:	008000c4 	movi	r2,3
     9a8:	e0bff515 	stw	r2,-44(fp)
     9ac:	00002006 	br	a30 <seven_seg_hex+0x120>
		if (leading_zeros || hex[i] > 0 || trailing_zeros) {
     9b0:	e0bfff03 	ldbu	r2,-4(fp)
     9b4:	1000081e 	bne	r2,zero,9d8 <seven_seg_hex+0xc8>
     9b8:	e0fff804 	addi	r3,fp,-32
     9bc:	e0bff517 	ldw	r2,-44(fp)
     9c0:	1885883a 	add	r2,r3,r2
     9c4:	10800003 	ldbu	r2,0(r2)
     9c8:	10803fcc 	andi	r2,r2,255
     9cc:	1000021e 	bne	r2,zero,9d8 <seven_seg_hex+0xc8>
     9d0:	e0bff403 	ldbu	r2,-48(fp)
     9d4:	10001026 	beq	r2,zero,a18 <seven_seg_hex+0x108>
			hex4 += HEX_CODES[hex[i]] << k;
     9d8:	e0fff804 	addi	r3,fp,-32
     9dc:	e0bff517 	ldw	r2,-44(fp)
     9e0:	1885883a 	add	r2,r3,r2
     9e4:	10800003 	ldbu	r2,0(r2)
     9e8:	10803fcc 	andi	r2,r2,255
     9ec:	e0fff904 	addi	r3,fp,-28
     9f0:	1885883a 	add	r2,r3,r2
     9f4:	10800003 	ldbu	r2,0(r2)
     9f8:	10c03fcc 	andi	r3,r2,255
     9fc:	e0bff617 	ldw	r2,-40(fp)
     a00:	1884983a 	sll	r2,r3,r2
     a04:	e0fff717 	ldw	r3,-36(fp)
     a08:	1885883a 	add	r2,r3,r2
     a0c:	e0bff715 	stw	r2,-36(fp)
			trailing_zeros = 1;
     a10:	00800044 	movi	r2,1
     a14:	e0bff405 	stb	r2,-48(fp)
		}
		k -= 8;
     a18:	e0bff617 	ldw	r2,-40(fp)
     a1c:	10bffe04 	addi	r2,r2,-8
     a20:	e0bff615 	stw	r2,-40(fp)
	// blank leading zeros if asked, but never other zeros
	alt_u8 trailing_zeros = 0;
	int i;
	int k = 24;
	int hex4 = 0; // The encoded value to write to the base register
	for (i=3; i>=0; i--) {
     a24:	e0bff517 	ldw	r2,-44(fp)
     a28:	10bfffc4 	addi	r2,r2,-1
     a2c:	e0bff515 	stw	r2,-44(fp)
     a30:	e0bff517 	ldw	r2,-44(fp)
     a34:	103fde0e 	bge	r2,zero,9b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009b0>
			hex4 += HEX_CODES[hex[i]] << k;
			trailing_zeros = 1;
		}
		k -= 8;
	}
	IOWR(base, 0, hex4);
     a38:	e0bffd17 	ldw	r2,-12(fp)
     a3c:	e0fff717 	ldw	r3,-36(fp)
     a40:	10c00035 	stwio	r3,0(r2)
}
     a44:	0001883a 	nop
     a48:	e037883a 	mov	sp,fp
     a4c:	dfc00117 	ldw	ra,4(sp)
     a50:	df000017 	ldw	fp,0(sp)
     a54:	dec00204 	addi	sp,sp,8
     a58:	f800283a 	ret

00000a5c <timerISR>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void timerISR(void* context)
#else
void timerISR(void * context, alt_u32 id)
#endif
{
     a5c:	defffb04 	addi	sp,sp,-20
     a60:	dfc00415 	stw	ra,16(sp)
     a64:	df000315 	stw	fp,12(sp)
     a68:	df000304 	addi	fp,sp,12
     a6c:	e13ffe15 	stw	r4,-8(fp)
     a70:	e17fff15 	stw	r5,-4(fp)
	/* Cast context. It is important that this be declared
	 * volatile to avoid unwanted compiler optimization.
	 */
	alt_u32* pCount = (alt_u32*)context;
     a74:	e0bffe17 	ldw	r2,-8(fp)
     a78:	e0bffd15 	stw	r2,-12(fp)
	/* clear the interrupt */
    IOWR(INTERVAL_TIMER_BASE, 0, 1);
     a7c:	00c00044 	movi	r3,1
     a80:	00840034 	movhi	r2,4096
     a84:	10880004 	addi	r2,r2,8192
     a88:	10c00035 	stwio	r3,0(r2)
	/* Act upon the interrupt */
    *pCount = *pCount + 1;
     a8c:	e0bffd17 	ldw	r2,-12(fp)
     a90:	10800017 	ldw	r2,0(r2)
     a94:	10c00044 	addi	r3,r2,1
     a98:	e0bffd17 	ldw	r2,-12(fp)
     a9c:	10c00015 	stw	r3,0(r2)
	/* Display count value 
	 * (Is this the best place to do this? 
	 * Why or why not?) 
	 */
	HexDisplay((alt_u32*)HEX3_HEX0_BASE, *pCount);
     aa0:	e0bffd17 	ldw	r2,-12(fp)
     aa4:	10800017 	ldw	r2,0(r2)
     aa8:	10bfffcc 	andi	r2,r2,65535
     aac:	100b883a 	mov	r5,r2
     ab0:	01040034 	movhi	r4,4096
     ab4:	21000804 	addi	r4,r4,32
     ab8:	00002c80 	call	2c8 <HexDisplay>

	return;
     abc:	0001883a 	nop
}
     ac0:	e037883a 	mov	sp,fp
     ac4:	dfc00117 	ldw	ra,4(sp)
     ac8:	df000017 	ldw	fp,0(sp)
     acc:	dec00204 	addi	sp,sp,8
     ad0:	f800283a 	ret

00000ad4 <memcpy>:
     ad4:	defffd04 	addi	sp,sp,-12
     ad8:	dfc00215 	stw	ra,8(sp)
     adc:	dc400115 	stw	r17,4(sp)
     ae0:	dc000015 	stw	r16,0(sp)
     ae4:	00c003c4 	movi	r3,15
     ae8:	2005883a 	mov	r2,r4
     aec:	1980452e 	bgeu	r3,r6,c04 <memcpy+0x130>
     af0:	2906b03a 	or	r3,r5,r4
     af4:	18c000cc 	andi	r3,r3,3
     af8:	1800441e 	bne	r3,zero,c0c <memcpy+0x138>
     afc:	347ffc04 	addi	r17,r6,-16
     b00:	8822d13a 	srli	r17,r17,4
     b04:	28c00104 	addi	r3,r5,4
     b08:	23400104 	addi	r13,r4,4
     b0c:	8820913a 	slli	r16,r17,4
     b10:	2b000204 	addi	r12,r5,8
     b14:	22c00204 	addi	r11,r4,8
     b18:	84000504 	addi	r16,r16,20
     b1c:	2a800304 	addi	r10,r5,12
     b20:	22400304 	addi	r9,r4,12
     b24:	2c21883a 	add	r16,r5,r16
     b28:	2811883a 	mov	r8,r5
     b2c:	200f883a 	mov	r7,r4
     b30:	41000017 	ldw	r4,0(r8)
     b34:	1fc00017 	ldw	ra,0(r3)
     b38:	63c00017 	ldw	r15,0(r12)
     b3c:	39000015 	stw	r4,0(r7)
     b40:	53800017 	ldw	r14,0(r10)
     b44:	6fc00015 	stw	ra,0(r13)
     b48:	5bc00015 	stw	r15,0(r11)
     b4c:	4b800015 	stw	r14,0(r9)
     b50:	18c00404 	addi	r3,r3,16
     b54:	39c00404 	addi	r7,r7,16
     b58:	42000404 	addi	r8,r8,16
     b5c:	6b400404 	addi	r13,r13,16
     b60:	63000404 	addi	r12,r12,16
     b64:	5ac00404 	addi	r11,r11,16
     b68:	52800404 	addi	r10,r10,16
     b6c:	4a400404 	addi	r9,r9,16
     b70:	1c3fef1e 	bne	r3,r16,b30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b30>
     b74:	89c00044 	addi	r7,r17,1
     b78:	380e913a 	slli	r7,r7,4
     b7c:	310003cc 	andi	r4,r6,15
     b80:	02c000c4 	movi	r11,3
     b84:	11c7883a 	add	r3,r2,r7
     b88:	29cb883a 	add	r5,r5,r7
     b8c:	5900212e 	bgeu	r11,r4,c14 <memcpy+0x140>
     b90:	1813883a 	mov	r9,r3
     b94:	2811883a 	mov	r8,r5
     b98:	200f883a 	mov	r7,r4
     b9c:	42800017 	ldw	r10,0(r8)
     ba0:	4a400104 	addi	r9,r9,4
     ba4:	39ffff04 	addi	r7,r7,-4
     ba8:	4abfff15 	stw	r10,-4(r9)
     bac:	42000104 	addi	r8,r8,4
     bb0:	59fffa36 	bltu	r11,r7,b9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b9c>
     bb4:	213fff04 	addi	r4,r4,-4
     bb8:	2008d0ba 	srli	r4,r4,2
     bbc:	318000cc 	andi	r6,r6,3
     bc0:	21000044 	addi	r4,r4,1
     bc4:	2109883a 	add	r4,r4,r4
     bc8:	2109883a 	add	r4,r4,r4
     bcc:	1907883a 	add	r3,r3,r4
     bd0:	290b883a 	add	r5,r5,r4
     bd4:	30000626 	beq	r6,zero,bf0 <memcpy+0x11c>
     bd8:	198d883a 	add	r6,r3,r6
     bdc:	29c00003 	ldbu	r7,0(r5)
     be0:	18c00044 	addi	r3,r3,1
     be4:	29400044 	addi	r5,r5,1
     be8:	19ffffc5 	stb	r7,-1(r3)
     bec:	19bffb1e 	bne	r3,r6,bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bdc>
     bf0:	dfc00217 	ldw	ra,8(sp)
     bf4:	dc400117 	ldw	r17,4(sp)
     bf8:	dc000017 	ldw	r16,0(sp)
     bfc:	dec00304 	addi	sp,sp,12
     c00:	f800283a 	ret
     c04:	2007883a 	mov	r3,r4
     c08:	003ff206 	br	bd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bd4>
     c0c:	2007883a 	mov	r3,r4
     c10:	003ff106 	br	bd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bd8>
     c14:	200d883a 	mov	r6,r4
     c18:	003fee06 	br	bd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bd4>

00000c1c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
     c1c:	defff004 	addi	sp,sp,-64
     c20:	df000f15 	stw	fp,60(sp)
     c24:	df000f04 	addi	fp,sp,60
     c28:	e13ffd15 	stw	r4,-12(fp)
     c2c:	e17ffe15 	stw	r5,-8(fp)
     c30:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
     c34:	00bffa84 	movi	r2,-22
     c38:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
     c3c:	e0bffd17 	ldw	r2,-12(fp)
     c40:	10800828 	cmpgeui	r2,r2,32
     c44:	10005c1e 	bne	r2,zero,db8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     c48:	0005303a 	rdctl	r2,status
     c4c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     c50:	e0fff617 	ldw	r3,-40(fp)
     c54:	00bfff84 	movi	r2,-2
     c58:	1884703a 	and	r2,r3,r2
     c5c:	1001703a 	wrctl	status,r2
  
  return context;
     c60:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
     c64:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
     c68:	00800034 	movhi	r2,0
     c6c:	109e2204 	addi	r2,r2,30856
     c70:	e0fffd17 	ldw	r3,-12(fp)
     c74:	180690fa 	slli	r3,r3,3
     c78:	10c5883a 	add	r2,r2,r3
     c7c:	e0ffff17 	ldw	r3,-4(fp)
     c80:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
     c84:	00800034 	movhi	r2,0
     c88:	109e2204 	addi	r2,r2,30856
     c8c:	e0fffd17 	ldw	r3,-12(fp)
     c90:	180690fa 	slli	r3,r3,3
     c94:	10c5883a 	add	r2,r2,r3
     c98:	10800104 	addi	r2,r2,4
     c9c:	e0fffe17 	ldw	r3,-8(fp)
     ca0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
     ca4:	e0bfff17 	ldw	r2,-4(fp)
     ca8:	10001f26 	beq	r2,zero,d28 <alt_irq_register+0x10c>
     cac:	e0bffd17 	ldw	r2,-12(fp)
     cb0:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     cb4:	0005303a 	rdctl	r2,status
     cb8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     cbc:	e0fff717 	ldw	r3,-36(fp)
     cc0:	00bfff84 	movi	r2,-2
     cc4:	1884703a 	and	r2,r3,r2
     cc8:	1001703a 	wrctl	status,r2
  
  return context;
     ccc:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     cd0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
     cd4:	00c00044 	movi	r3,1
     cd8:	e0bff217 	ldw	r2,-56(fp)
     cdc:	1884983a 	sll	r2,r3,r2
     ce0:	1007883a 	mov	r3,r2
     ce4:	00800034 	movhi	r2,0
     ce8:	109e1a04 	addi	r2,r2,30824
     cec:	10800017 	ldw	r2,0(r2)
     cf0:	1886b03a 	or	r3,r3,r2
     cf4:	00800034 	movhi	r2,0
     cf8:	109e1a04 	addi	r2,r2,30824
     cfc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     d00:	00800034 	movhi	r2,0
     d04:	109e1a04 	addi	r2,r2,30824
     d08:	10800017 	ldw	r2,0(r2)
     d0c:	100170fa 	wrctl	ienable,r2
     d10:	e0bff817 	ldw	r2,-32(fp)
     d14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d18:	e0bff917 	ldw	r2,-28(fp)
     d1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     d20:	0005883a 	mov	r2,zero
     d24:	00001f06 	br	da4 <alt_irq_register+0x188>
     d28:	e0bffd17 	ldw	r2,-12(fp)
     d2c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     d30:	0005303a 	rdctl	r2,status
     d34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     d38:	e0fffa17 	ldw	r3,-24(fp)
     d3c:	00bfff84 	movi	r2,-2
     d40:	1884703a 	and	r2,r3,r2
     d44:	1001703a 	wrctl	status,r2
  
  return context;
     d48:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     d4c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
     d50:	00c00044 	movi	r3,1
     d54:	e0bff417 	ldw	r2,-48(fp)
     d58:	1884983a 	sll	r2,r3,r2
     d5c:	0084303a 	nor	r2,zero,r2
     d60:	1007883a 	mov	r3,r2
     d64:	00800034 	movhi	r2,0
     d68:	109e1a04 	addi	r2,r2,30824
     d6c:	10800017 	ldw	r2,0(r2)
     d70:	1886703a 	and	r3,r3,r2
     d74:	00800034 	movhi	r2,0
     d78:	109e1a04 	addi	r2,r2,30824
     d7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     d80:	00800034 	movhi	r2,0
     d84:	109e1a04 	addi	r2,r2,30824
     d88:	10800017 	ldw	r2,0(r2)
     d8c:	100170fa 	wrctl	ienable,r2
     d90:	e0bffb17 	ldw	r2,-20(fp)
     d94:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d98:	e0bffc17 	ldw	r2,-16(fp)
     d9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     da0:	0005883a 	mov	r2,zero
     da4:	e0bff115 	stw	r2,-60(fp)
     da8:	e0bff317 	ldw	r2,-52(fp)
     dac:	e0bff515 	stw	r2,-44(fp)
     db0:	e0bff517 	ldw	r2,-44(fp)
     db4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
     db8:	e0bff117 	ldw	r2,-60(fp)
}
     dbc:	e037883a 	mov	sp,fp
     dc0:	df000017 	ldw	fp,0(sp)
     dc4:	dec00104 	addi	sp,sp,4
     dc8:	f800283a 	ret

00000dcc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     dcc:	defffc04 	addi	sp,sp,-16
     dd0:	df000315 	stw	fp,12(sp)
     dd4:	df000304 	addi	fp,sp,12
     dd8:	e13ffd15 	stw	r4,-12(fp)
     ddc:	e17ffe15 	stw	r5,-8(fp)
     de0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     de4:	e0fffe17 	ldw	r3,-8(fp)
     de8:	e0bffd17 	ldw	r2,-12(fp)
     dec:	18800c26 	beq	r3,r2,e20 <alt_load_section+0x54>
  {
    while( to != end )
     df0:	00000806 	br	e14 <alt_load_section+0x48>
    {
      *to++ = *from++;
     df4:	e0bffe17 	ldw	r2,-8(fp)
     df8:	10c00104 	addi	r3,r2,4
     dfc:	e0fffe15 	stw	r3,-8(fp)
     e00:	e0fffd17 	ldw	r3,-12(fp)
     e04:	19000104 	addi	r4,r3,4
     e08:	e13ffd15 	stw	r4,-12(fp)
     e0c:	18c00017 	ldw	r3,0(r3)
     e10:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     e14:	e0fffe17 	ldw	r3,-8(fp)
     e18:	e0bfff17 	ldw	r2,-4(fp)
     e1c:	18bff51e 	bne	r3,r2,df4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000df4>
    {
      *to++ = *from++;
    }
  }
}
     e20:	0001883a 	nop
     e24:	e037883a 	mov	sp,fp
     e28:	df000017 	ldw	fp,0(sp)
     e2c:	dec00104 	addi	sp,sp,4
     e30:	f800283a 	ret

00000e34 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     e34:	defffe04 	addi	sp,sp,-8
     e38:	dfc00115 	stw	ra,4(sp)
     e3c:	df000015 	stw	fp,0(sp)
     e40:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     e44:	01800034 	movhi	r6,0
     e48:	3197b304 	addi	r6,r6,24268
     e4c:	01400034 	movhi	r5,0
     e50:	29514e04 	addi	r5,r5,17720
     e54:	01000034 	movhi	r4,0
     e58:	2117b304 	addi	r4,r4,24268
     e5c:	0000dcc0 	call	dcc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     e60:	01800034 	movhi	r6,0
     e64:	31809204 	addi	r6,r6,584
     e68:	01400034 	movhi	r5,0
     e6c:	29400804 	addi	r5,r5,32
     e70:	01000034 	movhi	r4,0
     e74:	21000804 	addi	r4,r4,32
     e78:	0000dcc0 	call	dcc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     e7c:	01800034 	movhi	r6,0
     e80:	31914e04 	addi	r6,r6,17720
     e84:	01400034 	movhi	r5,0
     e88:	2950cb04 	addi	r5,r5,17196
     e8c:	01000034 	movhi	r4,0
     e90:	2110cb04 	addi	r4,r4,17196
     e94:	0000dcc0 	call	dcc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     e98:	00033680 	call	3368 <alt_dcache_flush_all>
  alt_icache_flush_all();
     e9c:	00035f80 	call	35f8 <alt_icache_flush_all>
}
     ea0:	0001883a 	nop
     ea4:	e037883a 	mov	sp,fp
     ea8:	dfc00117 	ldw	ra,4(sp)
     eac:	df000017 	ldw	fp,0(sp)
     eb0:	dec00204 	addi	sp,sp,8
     eb4:	f800283a 	ret

00000eb8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     eb8:	defffd04 	addi	sp,sp,-12
     ebc:	dfc00215 	stw	ra,8(sp)
     ec0:	df000115 	stw	fp,4(sp)
     ec4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     ec8:	0009883a 	mov	r4,zero
     ecc:	0000f6c0 	call	f6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     ed0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     ed4:	0000fa40 	call	fa4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     ed8:	01800034 	movhi	r6,0
     edc:	3190f104 	addi	r6,r6,17348
     ee0:	01400034 	movhi	r5,0
     ee4:	2950f104 	addi	r5,r5,17348
     ee8:	01000034 	movhi	r4,0
     eec:	2110f104 	addi	r4,r4,17348
     ef0:	00036f00 	call	36f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     ef4:	00034a80 	call	34a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     ef8:	01000034 	movhi	r4,0
     efc:	210d4204 	addi	r4,r4,13576
     f00:	0003f000 	call	3f00 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     f04:	d0a67317 	ldw	r2,-26164(gp)
     f08:	d0e67417 	ldw	r3,-26160(gp)
     f0c:	d1267517 	ldw	r4,-26156(gp)
     f10:	200d883a 	mov	r6,r4
     f14:	180b883a 	mov	r5,r3
     f18:	1009883a 	mov	r4,r2
     f1c:	00003580 	call	358 <main>
     f20:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     f24:	01000044 	movi	r4,1
     f28:	00032980 	call	3298 <close>
  exit (result);
     f2c:	e13fff17 	ldw	r4,-4(fp)
     f30:	0003f140 	call	3f14 <exit>

00000f34 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     f34:	defffd04 	addi	sp,sp,-12
     f38:	dfc00215 	stw	ra,8(sp)
     f3c:	df000115 	stw	fp,4(sp)
     f40:	df000104 	addi	fp,sp,4
     f44:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     f48:	01400034 	movhi	r5,0
     f4c:	2957ab04 	addi	r5,r5,24236
     f50:	e13fff17 	ldw	r4,-4(fp)
     f54:	00034040 	call	3404 <alt_dev_llist_insert>
}
     f58:	e037883a 	mov	sp,fp
     f5c:	dfc00117 	ldw	ra,4(sp)
     f60:	df000017 	ldw	fp,0(sp)
     f64:	dec00204 	addi	sp,sp,8
     f68:	f800283a 	ret

00000f6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     f6c:	defffd04 	addi	sp,sp,-12
     f70:	dfc00215 	stw	ra,8(sp)
     f74:	df000115 	stw	fp,4(sp)
     f78:	df000104 	addi	fp,sp,4
     f7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
     f80:	0003be80 	call	3be8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     f84:	00800044 	movi	r2,1
     f88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     f8c:	0001883a 	nop
     f90:	e037883a 	mov	sp,fp
     f94:	dfc00117 	ldw	ra,4(sp)
     f98:	df000017 	ldw	fp,0(sp)
     f9c:	dec00204 	addi	sp,sp,8
     fa0:	f800283a 	ret

00000fa4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     fa4:	defffd04 	addi	sp,sp,-12
     fa8:	dfc00215 	stw	ra,8(sp)
     fac:	df000115 	stw	fp,4(sp)
     fb0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     fb4:	01c00204 	movi	r7,8
     fb8:	000d883a 	mov	r6,zero
     fbc:	000b883a 	mov	r5,zero
     fc0:	01040034 	movhi	r4,4096
     fc4:	21080004 	addi	r4,r4,8192
     fc8:	0001db40 	call	1db4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     fcc:	01800204 	movi	r6,8
     fd0:	000b883a 	mov	r5,zero
     fd4:	01000034 	movhi	r4,0
     fd8:	21115804 	addi	r4,r4,17760
     fdc:	000142c0 	call	142c <altera_avalon_jtag_uart_init>
     fe0:	01000034 	movhi	r4,0
     fe4:	21114e04 	addi	r4,r4,17720
     fe8:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
     fec:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
     ff0:	01000034 	movhi	r4,0
     ff4:	21156604 	addi	r4,r4,21912
     ff8:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
     ffc:	01000034 	movhi	r4,0
    1000:	21157204 	addi	r4,r4,21960
    1004:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    1008:	01000034 	movhi	r4,0
    100c:	21157e04 	addi	r4,r4,22008
    1010:	0001eec0 	call	1eec <alt_up_character_lcd_init>
    1014:	01000034 	movhi	r4,0
    1018:	21157e04 	addi	r4,r4,22008
    101c:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    1020:	01000034 	movhi	r4,0
    1024:	21158904 	addi	r4,r4,22052
    1028:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
    102c:	01000034 	movhi	r4,0
    1030:	21159404 	addi	r4,r4,22096
    1034:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    1038:	01000034 	movhi	r4,0
    103c:	21159f04 	addi	r4,r4,22140
    1040:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    1044:	01000034 	movhi	r4,0
    1048:	2115aa04 	addi	r4,r4,22184
    104c:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    1050:	01000034 	movhi	r4,0
    1054:	2115b504 	addi	r4,r4,22228
    1058:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    105c:	01000034 	movhi	r4,0
    1060:	2115c004 	addi	r4,r4,22272
    1064:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    1068:	01000034 	movhi	r4,0
    106c:	2115cb04 	addi	r4,r4,22316
    1070:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    1074:	01000034 	movhi	r4,0
    1078:	2115d604 	addi	r4,r4,22360
    107c:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    1080:	01000034 	movhi	r4,0
    1084:	2115e104 	addi	r4,r4,22404
    1088:	00027e80 	call	27e8 <alt_up_ps2_init>
    108c:	01000034 	movhi	r4,0
    1090:	2115e104 	addi	r4,r4,22404
    1094:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    1098:	01000034 	movhi	r4,0
    109c:	2115ef04 	addi	r4,r4,22460
    10a0:	00027e80 	call	27e8 <alt_up_ps2_init>
    10a4:	01000034 	movhi	r4,0
    10a8:	2115ef04 	addi	r4,r4,22460
    10ac:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    10b0:	01000034 	movhi	r4,0
    10b4:	2115fd04 	addi	r4,r4,22516
    10b8:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    10bc:	01000034 	movhi	r4,0
    10c0:	21160804 	addi	r4,r4,22560
    10c4:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    10c8:	00800034 	movhi	r2,0
    10cc:	10961504 	addi	r2,r2,22612
    10d0:	10800a17 	ldw	r2,40(r2)
    10d4:	10800017 	ldw	r2,0(r2)
    10d8:	1007883a 	mov	r3,r2
    10dc:	00800034 	movhi	r2,0
    10e0:	10961504 	addi	r2,r2,22612
    10e4:	10c00b15 	stw	r3,44(r2)
    10e8:	00800034 	movhi	r2,0
    10ec:	10961504 	addi	r2,r2,22612
    10f0:	10800a17 	ldw	r2,40(r2)
    10f4:	10800104 	addi	r2,r2,4
    10f8:	10800017 	ldw	r2,0(r2)
    10fc:	1007883a 	mov	r3,r2
    1100:	00800034 	movhi	r2,0
    1104:	10961504 	addi	r2,r2,22612
    1108:	10c00c15 	stw	r3,48(r2)
    110c:	00800034 	movhi	r2,0
    1110:	10961504 	addi	r2,r2,22612
    1114:	10800a17 	ldw	r2,40(r2)
    1118:	10800204 	addi	r2,r2,8
    111c:	10800017 	ldw	r2,0(r2)
    1120:	10ffffcc 	andi	r3,r2,65535
    1124:	00800034 	movhi	r2,0
    1128:	10961504 	addi	r2,r2,22612
    112c:	10c00f15 	stw	r3,60(r2)
    1130:	00800034 	movhi	r2,0
    1134:	10961504 	addi	r2,r2,22612
    1138:	10800a17 	ldw	r2,40(r2)
    113c:	10800204 	addi	r2,r2,8
    1140:	10800017 	ldw	r2,0(r2)
    1144:	1006d43a 	srli	r3,r2,16
    1148:	00800034 	movhi	r2,0
    114c:	10961504 	addi	r2,r2,22612
    1150:	10c01015 	stw	r3,64(r2)
    1154:	00800034 	movhi	r2,0
    1158:	10961504 	addi	r2,r2,22612
    115c:	10800a17 	ldw	r2,40(r2)
    1160:	10800304 	addi	r2,r2,12
    1164:	10800017 	ldw	r2,0(r2)
    1168:	1005d07a 	srai	r2,r2,1
    116c:	10c0004c 	andi	r3,r2,1
    1170:	00800034 	movhi	r2,0
    1174:	10961504 	addi	r2,r2,22612
    1178:	10c00d15 	stw	r3,52(r2)
    117c:	00800034 	movhi	r2,0
    1180:	10961504 	addi	r2,r2,22612
    1184:	10800a17 	ldw	r2,40(r2)
    1188:	10800304 	addi	r2,r2,12
    118c:	10800017 	ldw	r2,0(r2)
    1190:	1005d13a 	srai	r2,r2,4
    1194:	10c003cc 	andi	r3,r2,15
    1198:	00800034 	movhi	r2,0
    119c:	10961504 	addi	r2,r2,22612
    11a0:	10c00e15 	stw	r3,56(r2)
    11a4:	00800034 	movhi	r2,0
    11a8:	10961504 	addi	r2,r2,22612
    11ac:	10800a17 	ldw	r2,40(r2)
    11b0:	10800304 	addi	r2,r2,12
    11b4:	10800017 	ldw	r2,0(r2)
    11b8:	1005d43a 	srai	r2,r2,16
    11bc:	e0bfff05 	stb	r2,-4(fp)
    11c0:	00800034 	movhi	r2,0
    11c4:	10961504 	addi	r2,r2,22612
    11c8:	10800a17 	ldw	r2,40(r2)
    11cc:	10800304 	addi	r2,r2,12
    11d0:	10800017 	ldw	r2,0(r2)
    11d4:	1004d63a 	srli	r2,r2,24
    11d8:	e0bfff45 	stb	r2,-3(fp)
    11dc:	00800034 	movhi	r2,0
    11e0:	10961504 	addi	r2,r2,22612
    11e4:	10800e17 	ldw	r2,56(r2)
    11e8:	10800058 	cmpnei	r2,r2,1
    11ec:	1000041e 	bne	r2,zero,1200 <alt_sys_init+0x25c>
    11f0:	00800034 	movhi	r2,0
    11f4:	10961504 	addi	r2,r2,22612
    11f8:	10001115 	stw	zero,68(r2)
    11fc:	00000e06 	br	1238 <alt_sys_init+0x294>
    1200:	00800034 	movhi	r2,0
    1204:	10961504 	addi	r2,r2,22612
    1208:	10800e17 	ldw	r2,56(r2)
    120c:	10800098 	cmpnei	r2,r2,2
    1210:	1000051e 	bne	r2,zero,1228 <alt_sys_init+0x284>
    1214:	00800034 	movhi	r2,0
    1218:	10961504 	addi	r2,r2,22612
    121c:	00c00044 	movi	r3,1
    1220:	10c01115 	stw	r3,68(r2)
    1224:	00000406 	br	1238 <alt_sys_init+0x294>
    1228:	00800034 	movhi	r2,0
    122c:	10961504 	addi	r2,r2,22612
    1230:	00c00084 	movi	r3,2
    1234:	10c01115 	stw	r3,68(r2)
    1238:	e0bfff03 	ldbu	r2,-4(fp)
    123c:	00c00804 	movi	r3,32
    1240:	1885c83a 	sub	r2,r3,r2
    1244:	00ffffc4 	movi	r3,-1
    1248:	1886d83a 	srl	r3,r3,r2
    124c:	00800034 	movhi	r2,0
    1250:	10961504 	addi	r2,r2,22612
    1254:	10c01215 	stw	r3,72(r2)
    1258:	e0ffff03 	ldbu	r3,-4(fp)
    125c:	00800034 	movhi	r2,0
    1260:	10961504 	addi	r2,r2,22612
    1264:	10801117 	ldw	r2,68(r2)
    1268:	1887883a 	add	r3,r3,r2
    126c:	00800034 	movhi	r2,0
    1270:	10961504 	addi	r2,r2,22612
    1274:	10c01315 	stw	r3,76(r2)
    1278:	e0bfff43 	ldbu	r2,-3(fp)
    127c:	00c00804 	movi	r3,32
    1280:	1885c83a 	sub	r2,r3,r2
    1284:	00ffffc4 	movi	r3,-1
    1288:	1886d83a 	srl	r3,r3,r2
    128c:	00800034 	movhi	r2,0
    1290:	10961504 	addi	r2,r2,22612
    1294:	10c01415 	stw	r3,80(r2)
    1298:	01000034 	movhi	r4,0
    129c:	21161504 	addi	r4,r4,22612
    12a0:	0000f340 	call	f34 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    12a4:	01000034 	movhi	r4,0
    12a8:	21162a04 	addi	r4,r4,22696
    12ac:	0000f340 	call	f34 <alt_dev_reg>
}
    12b0:	0001883a 	nop
    12b4:	e037883a 	mov	sp,fp
    12b8:	dfc00117 	ldw	ra,4(sp)
    12bc:	df000017 	ldw	fp,0(sp)
    12c0:	dec00204 	addi	sp,sp,8
    12c4:	f800283a 	ret

000012c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    12c8:	defffa04 	addi	sp,sp,-24
    12cc:	dfc00515 	stw	ra,20(sp)
    12d0:	df000415 	stw	fp,16(sp)
    12d4:	df000404 	addi	fp,sp,16
    12d8:	e13ffd15 	stw	r4,-12(fp)
    12dc:	e17ffe15 	stw	r5,-8(fp)
    12e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    12e4:	e0bffd17 	ldw	r2,-12(fp)
    12e8:	10800017 	ldw	r2,0(r2)
    12ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    12f0:	e0bffc17 	ldw	r2,-16(fp)
    12f4:	10c00a04 	addi	r3,r2,40
    12f8:	e0bffd17 	ldw	r2,-12(fp)
    12fc:	10800217 	ldw	r2,8(r2)
    1300:	100f883a 	mov	r7,r2
    1304:	e1bfff17 	ldw	r6,-4(fp)
    1308:	e17ffe17 	ldw	r5,-8(fp)
    130c:	1809883a 	mov	r4,r3
    1310:	00018f80 	call	18f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1314:	e037883a 	mov	sp,fp
    1318:	dfc00117 	ldw	ra,4(sp)
    131c:	df000017 	ldw	fp,0(sp)
    1320:	dec00204 	addi	sp,sp,8
    1324:	f800283a 	ret

00001328 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1328:	defffa04 	addi	sp,sp,-24
    132c:	dfc00515 	stw	ra,20(sp)
    1330:	df000415 	stw	fp,16(sp)
    1334:	df000404 	addi	fp,sp,16
    1338:	e13ffd15 	stw	r4,-12(fp)
    133c:	e17ffe15 	stw	r5,-8(fp)
    1340:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1344:	e0bffd17 	ldw	r2,-12(fp)
    1348:	10800017 	ldw	r2,0(r2)
    134c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1350:	e0bffc17 	ldw	r2,-16(fp)
    1354:	10c00a04 	addi	r3,r2,40
    1358:	e0bffd17 	ldw	r2,-12(fp)
    135c:	10800217 	ldw	r2,8(r2)
    1360:	100f883a 	mov	r7,r2
    1364:	e1bfff17 	ldw	r6,-4(fp)
    1368:	e17ffe17 	ldw	r5,-8(fp)
    136c:	1809883a 	mov	r4,r3
    1370:	0001b140 	call	1b14 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    1374:	e037883a 	mov	sp,fp
    1378:	dfc00117 	ldw	ra,4(sp)
    137c:	df000017 	ldw	fp,0(sp)
    1380:	dec00204 	addi	sp,sp,8
    1384:	f800283a 	ret

00001388 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1388:	defffc04 	addi	sp,sp,-16
    138c:	dfc00315 	stw	ra,12(sp)
    1390:	df000215 	stw	fp,8(sp)
    1394:	df000204 	addi	fp,sp,8
    1398:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    139c:	e0bfff17 	ldw	r2,-4(fp)
    13a0:	10800017 	ldw	r2,0(r2)
    13a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    13a8:	e0bffe17 	ldw	r2,-8(fp)
    13ac:	10c00a04 	addi	r3,r2,40
    13b0:	e0bfff17 	ldw	r2,-4(fp)
    13b4:	10800217 	ldw	r2,8(r2)
    13b8:	100b883a 	mov	r5,r2
    13bc:	1809883a 	mov	r4,r3
    13c0:	00017a00 	call	17a0 <altera_avalon_jtag_uart_close>
}
    13c4:	e037883a 	mov	sp,fp
    13c8:	dfc00117 	ldw	ra,4(sp)
    13cc:	df000017 	ldw	fp,0(sp)
    13d0:	dec00204 	addi	sp,sp,8
    13d4:	f800283a 	ret

000013d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    13d8:	defffa04 	addi	sp,sp,-24
    13dc:	dfc00515 	stw	ra,20(sp)
    13e0:	df000415 	stw	fp,16(sp)
    13e4:	df000404 	addi	fp,sp,16
    13e8:	e13ffd15 	stw	r4,-12(fp)
    13ec:	e17ffe15 	stw	r5,-8(fp)
    13f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    13f4:	e0bffd17 	ldw	r2,-12(fp)
    13f8:	10800017 	ldw	r2,0(r2)
    13fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1400:	e0bffc17 	ldw	r2,-16(fp)
    1404:	10800a04 	addi	r2,r2,40
    1408:	e1bfff17 	ldw	r6,-4(fp)
    140c:	e17ffe17 	ldw	r5,-8(fp)
    1410:	1009883a 	mov	r4,r2
    1414:	00018080 	call	1808 <altera_avalon_jtag_uart_ioctl>
}
    1418:	e037883a 	mov	sp,fp
    141c:	dfc00117 	ldw	ra,4(sp)
    1420:	df000017 	ldw	fp,0(sp)
    1424:	dec00204 	addi	sp,sp,8
    1428:	f800283a 	ret

0000142c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    142c:	defffb04 	addi	sp,sp,-20
    1430:	dfc00415 	stw	ra,16(sp)
    1434:	df000315 	stw	fp,12(sp)
    1438:	df000304 	addi	fp,sp,12
    143c:	e13ffd15 	stw	r4,-12(fp)
    1440:	e17ffe15 	stw	r5,-8(fp)
    1444:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1448:	e0bffd17 	ldw	r2,-12(fp)
    144c:	00c00044 	movi	r3,1
    1450:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1454:	e0bffd17 	ldw	r2,-12(fp)
    1458:	10800017 	ldw	r2,0(r2)
    145c:	10800104 	addi	r2,r2,4
    1460:	1007883a 	mov	r3,r2
    1464:	e0bffd17 	ldw	r2,-12(fp)
    1468:	10800817 	ldw	r2,32(r2)
    146c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    1470:	e0bfff17 	ldw	r2,-4(fp)
    1474:	01800034 	movhi	r6,0
    1478:	31853a04 	addi	r6,r6,5352
    147c:	e17ffd17 	ldw	r5,-12(fp)
    1480:	1009883a 	mov	r4,r2
    1484:	0000c1c0 	call	c1c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1488:	e0bffd17 	ldw	r2,-12(fp)
    148c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1490:	e0bffd17 	ldw	r2,-12(fp)
    1494:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1498:	00800034 	movhi	r2,0
    149c:	109e1e04 	addi	r2,r2,30840
    14a0:	10800017 	ldw	r2,0(r2)
    14a4:	e1fffd17 	ldw	r7,-12(fp)
    14a8:	01800034 	movhi	r6,0
    14ac:	3185be04 	addi	r6,r6,5880
    14b0:	100b883a 	mov	r5,r2
    14b4:	1809883a 	mov	r4,r3
    14b8:	00031080 	call	3108 <alt_alarm_start>
    14bc:	1000040e 	bge	r2,zero,14d0 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    14c0:	e0fffd17 	ldw	r3,-12(fp)
    14c4:	00a00034 	movhi	r2,32768
    14c8:	10bfffc4 	addi	r2,r2,-1
    14cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    14d0:	0001883a 	nop
    14d4:	e037883a 	mov	sp,fp
    14d8:	dfc00117 	ldw	ra,4(sp)
    14dc:	df000017 	ldw	fp,0(sp)
    14e0:	dec00204 	addi	sp,sp,8
    14e4:	f800283a 	ret

000014e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    14e8:	defff704 	addi	sp,sp,-36
    14ec:	df000815 	stw	fp,32(sp)
    14f0:	df000804 	addi	fp,sp,32
    14f4:	e13ffe15 	stw	r4,-8(fp)
    14f8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    14fc:	e0bffe17 	ldw	r2,-8(fp)
    1500:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    1504:	e0bffa17 	ldw	r2,-24(fp)
    1508:	10800017 	ldw	r2,0(r2)
    150c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1510:	e0bffb17 	ldw	r2,-20(fp)
    1514:	10800104 	addi	r2,r2,4
    1518:	10800037 	ldwio	r2,0(r2)
    151c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    1520:	e0bffc17 	ldw	r2,-16(fp)
    1524:	1080c00c 	andi	r2,r2,768
    1528:	10006d26 	beq	r2,zero,16e0 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    152c:	e0bffc17 	ldw	r2,-16(fp)
    1530:	1080400c 	andi	r2,r2,256
    1534:	10003526 	beq	r2,zero,160c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    1538:	00800074 	movhi	r2,1
    153c:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1540:	e0bffa17 	ldw	r2,-24(fp)
    1544:	10800a17 	ldw	r2,40(r2)
    1548:	10800044 	addi	r2,r2,1
    154c:	1081ffcc 	andi	r2,r2,2047
    1550:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    1554:	e0bffa17 	ldw	r2,-24(fp)
    1558:	10c00b17 	ldw	r3,44(r2)
    155c:	e0bffd17 	ldw	r2,-12(fp)
    1560:	18801526 	beq	r3,r2,15b8 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1564:	e0bffb17 	ldw	r2,-20(fp)
    1568:	10800037 	ldwio	r2,0(r2)
    156c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1570:	e0bff817 	ldw	r2,-32(fp)
    1574:	10a0000c 	andi	r2,r2,32768
    1578:	10001126 	beq	r2,zero,15c0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    157c:	e0bffa17 	ldw	r2,-24(fp)
    1580:	10800a17 	ldw	r2,40(r2)
    1584:	e0fff817 	ldw	r3,-32(fp)
    1588:	1809883a 	mov	r4,r3
    158c:	e0fffa17 	ldw	r3,-24(fp)
    1590:	1885883a 	add	r2,r3,r2
    1594:	10800e04 	addi	r2,r2,56
    1598:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    159c:	e0bffa17 	ldw	r2,-24(fp)
    15a0:	10800a17 	ldw	r2,40(r2)
    15a4:	10800044 	addi	r2,r2,1
    15a8:	10c1ffcc 	andi	r3,r2,2047
    15ac:	e0bffa17 	ldw	r2,-24(fp)
    15b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    15b4:	003fe206 	br	1540 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001540>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    15b8:	0001883a 	nop
    15bc:	00000106 	br	15c4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    15c0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    15c4:	e0bff817 	ldw	r2,-32(fp)
    15c8:	10bfffec 	andhi	r2,r2,65535
    15cc:	10000f26 	beq	r2,zero,160c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    15d0:	e0bffa17 	ldw	r2,-24(fp)
    15d4:	10c00817 	ldw	r3,32(r2)
    15d8:	00bfff84 	movi	r2,-2
    15dc:	1886703a 	and	r3,r3,r2
    15e0:	e0bffa17 	ldw	r2,-24(fp)
    15e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    15e8:	e0bffb17 	ldw	r2,-20(fp)
    15ec:	10800104 	addi	r2,r2,4
    15f0:	1007883a 	mov	r3,r2
    15f4:	e0bffa17 	ldw	r2,-24(fp)
    15f8:	10800817 	ldw	r2,32(r2)
    15fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1600:	e0bffb17 	ldw	r2,-20(fp)
    1604:	10800104 	addi	r2,r2,4
    1608:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    160c:	e0bffc17 	ldw	r2,-16(fp)
    1610:	1080800c 	andi	r2,r2,512
    1614:	103fbe26 	beq	r2,zero,1510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001510>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1618:	e0bffc17 	ldw	r2,-16(fp)
    161c:	1004d43a 	srli	r2,r2,16
    1620:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1624:	00001406 	br	1678 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    1628:	e0bffb17 	ldw	r2,-20(fp)
    162c:	e0fffa17 	ldw	r3,-24(fp)
    1630:	18c00d17 	ldw	r3,52(r3)
    1634:	e13ffa17 	ldw	r4,-24(fp)
    1638:	20c7883a 	add	r3,r4,r3
    163c:	18c20e04 	addi	r3,r3,2104
    1640:	18c00003 	ldbu	r3,0(r3)
    1644:	18c03fcc 	andi	r3,r3,255
    1648:	18c0201c 	xori	r3,r3,128
    164c:	18ffe004 	addi	r3,r3,-128
    1650:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1654:	e0bffa17 	ldw	r2,-24(fp)
    1658:	10800d17 	ldw	r2,52(r2)
    165c:	10800044 	addi	r2,r2,1
    1660:	10c1ffcc 	andi	r3,r2,2047
    1664:	e0bffa17 	ldw	r2,-24(fp)
    1668:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    166c:	e0bff917 	ldw	r2,-28(fp)
    1670:	10bfffc4 	addi	r2,r2,-1
    1674:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    1678:	e0bff917 	ldw	r2,-28(fp)
    167c:	10000526 	beq	r2,zero,1694 <altera_avalon_jtag_uart_irq+0x1ac>
    1680:	e0bffa17 	ldw	r2,-24(fp)
    1684:	10c00d17 	ldw	r3,52(r2)
    1688:	e0bffa17 	ldw	r2,-24(fp)
    168c:	10800c17 	ldw	r2,48(r2)
    1690:	18bfe51e 	bne	r3,r2,1628 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001628>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    1694:	e0bff917 	ldw	r2,-28(fp)
    1698:	103f9d26 	beq	r2,zero,1510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001510>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    169c:	e0bffa17 	ldw	r2,-24(fp)
    16a0:	10c00817 	ldw	r3,32(r2)
    16a4:	00bfff44 	movi	r2,-3
    16a8:	1886703a 	and	r3,r3,r2
    16ac:	e0bffa17 	ldw	r2,-24(fp)
    16b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    16b4:	e0bffa17 	ldw	r2,-24(fp)
    16b8:	10800017 	ldw	r2,0(r2)
    16bc:	10800104 	addi	r2,r2,4
    16c0:	1007883a 	mov	r3,r2
    16c4:	e0bffa17 	ldw	r2,-24(fp)
    16c8:	10800817 	ldw	r2,32(r2)
    16cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    16d0:	e0bffb17 	ldw	r2,-20(fp)
    16d4:	10800104 	addi	r2,r2,4
    16d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    16dc:	003f8c06 	br	1510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001510>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    16e0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    16e4:	0001883a 	nop
    16e8:	e037883a 	mov	sp,fp
    16ec:	df000017 	ldw	fp,0(sp)
    16f0:	dec00104 	addi	sp,sp,4
    16f4:	f800283a 	ret

000016f8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    16f8:	defff804 	addi	sp,sp,-32
    16fc:	df000715 	stw	fp,28(sp)
    1700:	df000704 	addi	fp,sp,28
    1704:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1708:	e0bffb17 	ldw	r2,-20(fp)
    170c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1710:	e0bff917 	ldw	r2,-28(fp)
    1714:	10800017 	ldw	r2,0(r2)
    1718:	10800104 	addi	r2,r2,4
    171c:	10800037 	ldwio	r2,0(r2)
    1720:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1724:	e0bffa17 	ldw	r2,-24(fp)
    1728:	1081000c 	andi	r2,r2,1024
    172c:	10000b26 	beq	r2,zero,175c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1730:	e0bff917 	ldw	r2,-28(fp)
    1734:	10800017 	ldw	r2,0(r2)
    1738:	10800104 	addi	r2,r2,4
    173c:	1007883a 	mov	r3,r2
    1740:	e0bff917 	ldw	r2,-28(fp)
    1744:	10800817 	ldw	r2,32(r2)
    1748:	10810014 	ori	r2,r2,1024
    174c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    1750:	e0bff917 	ldw	r2,-28(fp)
    1754:	10000915 	stw	zero,36(r2)
    1758:	00000a06 	br	1784 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    175c:	e0bff917 	ldw	r2,-28(fp)
    1760:	10c00917 	ldw	r3,36(r2)
    1764:	00a00034 	movhi	r2,32768
    1768:	10bfff04 	addi	r2,r2,-4
    176c:	10c00536 	bltu	r2,r3,1784 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    1770:	e0bff917 	ldw	r2,-28(fp)
    1774:	10800917 	ldw	r2,36(r2)
    1778:	10c00044 	addi	r3,r2,1
    177c:	e0bff917 	ldw	r2,-28(fp)
    1780:	10c00915 	stw	r3,36(r2)
    1784:	00800034 	movhi	r2,0
    1788:	109e1e04 	addi	r2,r2,30840
    178c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1790:	e037883a 	mov	sp,fp
    1794:	df000017 	ldw	fp,0(sp)
    1798:	dec00104 	addi	sp,sp,4
    179c:	f800283a 	ret

000017a0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    17a0:	defffd04 	addi	sp,sp,-12
    17a4:	df000215 	stw	fp,8(sp)
    17a8:	df000204 	addi	fp,sp,8
    17ac:	e13ffe15 	stw	r4,-8(fp)
    17b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    17b4:	00000506 	br	17cc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    17b8:	e0bfff17 	ldw	r2,-4(fp)
    17bc:	1090000c 	andi	r2,r2,16384
    17c0:	10000226 	beq	r2,zero,17cc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    17c4:	00bffd44 	movi	r2,-11
    17c8:	00000b06 	br	17f8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    17cc:	e0bffe17 	ldw	r2,-8(fp)
    17d0:	10c00d17 	ldw	r3,52(r2)
    17d4:	e0bffe17 	ldw	r2,-8(fp)
    17d8:	10800c17 	ldw	r2,48(r2)
    17dc:	18800526 	beq	r3,r2,17f4 <altera_avalon_jtag_uart_close+0x54>
    17e0:	e0bffe17 	ldw	r2,-8(fp)
    17e4:	10c00917 	ldw	r3,36(r2)
    17e8:	e0bffe17 	ldw	r2,-8(fp)
    17ec:	10800117 	ldw	r2,4(r2)
    17f0:	18bff136 	bltu	r3,r2,17b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017b8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    17f4:	0005883a 	mov	r2,zero
}
    17f8:	e037883a 	mov	sp,fp
    17fc:	df000017 	ldw	fp,0(sp)
    1800:	dec00104 	addi	sp,sp,4
    1804:	f800283a 	ret

00001808 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1808:	defffa04 	addi	sp,sp,-24
    180c:	df000515 	stw	fp,20(sp)
    1810:	df000504 	addi	fp,sp,20
    1814:	e13ffd15 	stw	r4,-12(fp)
    1818:	e17ffe15 	stw	r5,-8(fp)
    181c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    1820:	00bff9c4 	movi	r2,-25
    1824:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    1828:	e0bffe17 	ldw	r2,-8(fp)
    182c:	10da8060 	cmpeqi	r3,r2,27137
    1830:	1800031e 	bne	r3,zero,1840 <altera_avalon_jtag_uart_ioctl+0x38>
    1834:	109a80a0 	cmpeqi	r2,r2,27138
    1838:	1000181e 	bne	r2,zero,189c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    183c:	00002906 	br	18e4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1840:	e0bffd17 	ldw	r2,-12(fp)
    1844:	10c00117 	ldw	r3,4(r2)
    1848:	00a00034 	movhi	r2,32768
    184c:	10bfffc4 	addi	r2,r2,-1
    1850:	18802126 	beq	r3,r2,18d8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    1854:	e0bfff17 	ldw	r2,-4(fp)
    1858:	10800017 	ldw	r2,0(r2)
    185c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1860:	e0bffc17 	ldw	r2,-16(fp)
    1864:	10800090 	cmplti	r2,r2,2
    1868:	1000061e 	bne	r2,zero,1884 <altera_avalon_jtag_uart_ioctl+0x7c>
    186c:	e0fffc17 	ldw	r3,-16(fp)
    1870:	00a00034 	movhi	r2,32768
    1874:	10bfffc4 	addi	r2,r2,-1
    1878:	18800226 	beq	r3,r2,1884 <altera_avalon_jtag_uart_ioctl+0x7c>
    187c:	e0bffc17 	ldw	r2,-16(fp)
    1880:	00000206 	br	188c <altera_avalon_jtag_uart_ioctl+0x84>
    1884:	00a00034 	movhi	r2,32768
    1888:	10bfff84 	addi	r2,r2,-2
    188c:	e0fffd17 	ldw	r3,-12(fp)
    1890:	18800115 	stw	r2,4(r3)
      rc = 0;
    1894:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    1898:	00000f06 	br	18d8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    189c:	e0bffd17 	ldw	r2,-12(fp)
    18a0:	10c00117 	ldw	r3,4(r2)
    18a4:	00a00034 	movhi	r2,32768
    18a8:	10bfffc4 	addi	r2,r2,-1
    18ac:	18800c26 	beq	r3,r2,18e0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    18b0:	e0bffd17 	ldw	r2,-12(fp)
    18b4:	10c00917 	ldw	r3,36(r2)
    18b8:	e0bffd17 	ldw	r2,-12(fp)
    18bc:	10800117 	ldw	r2,4(r2)
    18c0:	1885803a 	cmpltu	r2,r3,r2
    18c4:	10c03fcc 	andi	r3,r2,255
    18c8:	e0bfff17 	ldw	r2,-4(fp)
    18cc:	10c00015 	stw	r3,0(r2)
      rc = 0;
    18d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    18d4:	00000206 	br	18e0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    18d8:	0001883a 	nop
    18dc:	00000106 	br	18e4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    18e0:	0001883a 	nop

  default:
    break;
  }

  return rc;
    18e4:	e0bffb17 	ldw	r2,-20(fp)
}
    18e8:	e037883a 	mov	sp,fp
    18ec:	df000017 	ldw	fp,0(sp)
    18f0:	dec00104 	addi	sp,sp,4
    18f4:	f800283a 	ret

000018f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    18f8:	defff304 	addi	sp,sp,-52
    18fc:	dfc00c15 	stw	ra,48(sp)
    1900:	df000b15 	stw	fp,44(sp)
    1904:	df000b04 	addi	fp,sp,44
    1908:	e13ffc15 	stw	r4,-16(fp)
    190c:	e17ffd15 	stw	r5,-12(fp)
    1910:	e1bffe15 	stw	r6,-8(fp)
    1914:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    1918:	e0bffd17 	ldw	r2,-12(fp)
    191c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1920:	00004706 	br	1a40 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1924:	e0bffc17 	ldw	r2,-16(fp)
    1928:	10800a17 	ldw	r2,40(r2)
    192c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    1930:	e0bffc17 	ldw	r2,-16(fp)
    1934:	10800b17 	ldw	r2,44(r2)
    1938:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    193c:	e0fff717 	ldw	r3,-36(fp)
    1940:	e0bff817 	ldw	r2,-32(fp)
    1944:	18800536 	bltu	r3,r2,195c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1948:	e0fff717 	ldw	r3,-36(fp)
    194c:	e0bff817 	ldw	r2,-32(fp)
    1950:	1885c83a 	sub	r2,r3,r2
    1954:	e0bff615 	stw	r2,-40(fp)
    1958:	00000406 	br	196c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    195c:	00c20004 	movi	r3,2048
    1960:	e0bff817 	ldw	r2,-32(fp)
    1964:	1885c83a 	sub	r2,r3,r2
    1968:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    196c:	e0bff617 	ldw	r2,-40(fp)
    1970:	10001e26 	beq	r2,zero,19ec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    1974:	e0fffe17 	ldw	r3,-8(fp)
    1978:	e0bff617 	ldw	r2,-40(fp)
    197c:	1880022e 	bgeu	r3,r2,1988 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    1980:	e0bffe17 	ldw	r2,-8(fp)
    1984:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    1988:	e0bffc17 	ldw	r2,-16(fp)
    198c:	10c00e04 	addi	r3,r2,56
    1990:	e0bff817 	ldw	r2,-32(fp)
    1994:	1885883a 	add	r2,r3,r2
    1998:	e1bff617 	ldw	r6,-40(fp)
    199c:	100b883a 	mov	r5,r2
    19a0:	e13ff517 	ldw	r4,-44(fp)
    19a4:	0000ad40 	call	ad4 <memcpy>
      ptr   += n;
    19a8:	e0fff517 	ldw	r3,-44(fp)
    19ac:	e0bff617 	ldw	r2,-40(fp)
    19b0:	1885883a 	add	r2,r3,r2
    19b4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    19b8:	e0fffe17 	ldw	r3,-8(fp)
    19bc:	e0bff617 	ldw	r2,-40(fp)
    19c0:	1885c83a 	sub	r2,r3,r2
    19c4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    19c8:	e0fff817 	ldw	r3,-32(fp)
    19cc:	e0bff617 	ldw	r2,-40(fp)
    19d0:	1885883a 	add	r2,r3,r2
    19d4:	10c1ffcc 	andi	r3,r2,2047
    19d8:	e0bffc17 	ldw	r2,-16(fp)
    19dc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    19e0:	e0bffe17 	ldw	r2,-8(fp)
    19e4:	00bfcf16 	blt	zero,r2,1924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001924>
    19e8:	00000106 	br	19f0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    19ec:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    19f0:	e0fff517 	ldw	r3,-44(fp)
    19f4:	e0bffd17 	ldw	r2,-12(fp)
    19f8:	1880141e 	bne	r3,r2,1a4c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    19fc:	e0bfff17 	ldw	r2,-4(fp)
    1a00:	1090000c 	andi	r2,r2,16384
    1a04:	1000131e 	bne	r2,zero,1a54 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1a08:	0001883a 	nop
    1a0c:	e0bffc17 	ldw	r2,-16(fp)
    1a10:	10c00a17 	ldw	r3,40(r2)
    1a14:	e0bff717 	ldw	r2,-36(fp)
    1a18:	1880051e 	bne	r3,r2,1a30 <altera_avalon_jtag_uart_read+0x138>
    1a1c:	e0bffc17 	ldw	r2,-16(fp)
    1a20:	10c00917 	ldw	r3,36(r2)
    1a24:	e0bffc17 	ldw	r2,-16(fp)
    1a28:	10800117 	ldw	r2,4(r2)
    1a2c:	18bff736 	bltu	r3,r2,1a0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a0c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1a30:	e0bffc17 	ldw	r2,-16(fp)
    1a34:	10c00a17 	ldw	r3,40(r2)
    1a38:	e0bff717 	ldw	r2,-36(fp)
    1a3c:	18800726 	beq	r3,r2,1a5c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1a40:	e0bffe17 	ldw	r2,-8(fp)
    1a44:	00bfb716 	blt	zero,r2,1924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001924>
    1a48:	00000506 	br	1a60 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    1a4c:	0001883a 	nop
    1a50:	00000306 	br	1a60 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    1a54:	0001883a 	nop
    1a58:	00000106 	br	1a60 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    1a5c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1a60:	e0fff517 	ldw	r3,-44(fp)
    1a64:	e0bffd17 	ldw	r2,-12(fp)
    1a68:	18801826 	beq	r3,r2,1acc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a6c:	0005303a 	rdctl	r2,status
    1a70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a74:	e0fffb17 	ldw	r3,-20(fp)
    1a78:	00bfff84 	movi	r2,-2
    1a7c:	1884703a 	and	r2,r3,r2
    1a80:	1001703a 	wrctl	status,r2
  
  return context;
    1a84:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    1a88:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1a8c:	e0bffc17 	ldw	r2,-16(fp)
    1a90:	10800817 	ldw	r2,32(r2)
    1a94:	10c00054 	ori	r3,r2,1
    1a98:	e0bffc17 	ldw	r2,-16(fp)
    1a9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1aa0:	e0bffc17 	ldw	r2,-16(fp)
    1aa4:	10800017 	ldw	r2,0(r2)
    1aa8:	10800104 	addi	r2,r2,4
    1aac:	1007883a 	mov	r3,r2
    1ab0:	e0bffc17 	ldw	r2,-16(fp)
    1ab4:	10800817 	ldw	r2,32(r2)
    1ab8:	18800035 	stwio	r2,0(r3)
    1abc:	e0bffa17 	ldw	r2,-24(fp)
    1ac0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1ac4:	e0bff917 	ldw	r2,-28(fp)
    1ac8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1acc:	e0fff517 	ldw	r3,-44(fp)
    1ad0:	e0bffd17 	ldw	r2,-12(fp)
    1ad4:	18800426 	beq	r3,r2,1ae8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    1ad8:	e0fff517 	ldw	r3,-44(fp)
    1adc:	e0bffd17 	ldw	r2,-12(fp)
    1ae0:	1885c83a 	sub	r2,r3,r2
    1ae4:	00000606 	br	1b00 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    1ae8:	e0bfff17 	ldw	r2,-4(fp)
    1aec:	1090000c 	andi	r2,r2,16384
    1af0:	10000226 	beq	r2,zero,1afc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    1af4:	00bffd44 	movi	r2,-11
    1af8:	00000106 	br	1b00 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    1afc:	00bffec4 	movi	r2,-5
}
    1b00:	e037883a 	mov	sp,fp
    1b04:	dfc00117 	ldw	ra,4(sp)
    1b08:	df000017 	ldw	fp,0(sp)
    1b0c:	dec00204 	addi	sp,sp,8
    1b10:	f800283a 	ret

00001b14 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1b14:	defff304 	addi	sp,sp,-52
    1b18:	dfc00c15 	stw	ra,48(sp)
    1b1c:	df000b15 	stw	fp,44(sp)
    1b20:	df000b04 	addi	fp,sp,44
    1b24:	e13ffc15 	stw	r4,-16(fp)
    1b28:	e17ffd15 	stw	r5,-12(fp)
    1b2c:	e1bffe15 	stw	r6,-8(fp)
    1b30:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1b34:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1b38:	e0bffd17 	ldw	r2,-12(fp)
    1b3c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1b40:	00003706 	br	1c20 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1b44:	e0bffc17 	ldw	r2,-16(fp)
    1b48:	10800c17 	ldw	r2,48(r2)
    1b4c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    1b50:	e0bffc17 	ldw	r2,-16(fp)
    1b54:	10800d17 	ldw	r2,52(r2)
    1b58:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    1b5c:	e0fff917 	ldw	r3,-28(fp)
    1b60:	e0bff517 	ldw	r2,-44(fp)
    1b64:	1880062e 	bgeu	r3,r2,1b80 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1b68:	e0fff517 	ldw	r3,-44(fp)
    1b6c:	e0bff917 	ldw	r2,-28(fp)
    1b70:	1885c83a 	sub	r2,r3,r2
    1b74:	10bfffc4 	addi	r2,r2,-1
    1b78:	e0bff615 	stw	r2,-40(fp)
    1b7c:	00000b06 	br	1bac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    1b80:	e0bff517 	ldw	r2,-44(fp)
    1b84:	10000526 	beq	r2,zero,1b9c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1b88:	00c20004 	movi	r3,2048
    1b8c:	e0bff917 	ldw	r2,-28(fp)
    1b90:	1885c83a 	sub	r2,r3,r2
    1b94:	e0bff615 	stw	r2,-40(fp)
    1b98:	00000406 	br	1bac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1b9c:	00c1ffc4 	movi	r3,2047
    1ba0:	e0bff917 	ldw	r2,-28(fp)
    1ba4:	1885c83a 	sub	r2,r3,r2
    1ba8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    1bac:	e0bff617 	ldw	r2,-40(fp)
    1bb0:	10001e26 	beq	r2,zero,1c2c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    1bb4:	e0fffe17 	ldw	r3,-8(fp)
    1bb8:	e0bff617 	ldw	r2,-40(fp)
    1bbc:	1880022e 	bgeu	r3,r2,1bc8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    1bc0:	e0bffe17 	ldw	r2,-8(fp)
    1bc4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    1bc8:	e0bffc17 	ldw	r2,-16(fp)
    1bcc:	10c20e04 	addi	r3,r2,2104
    1bd0:	e0bff917 	ldw	r2,-28(fp)
    1bd4:	1885883a 	add	r2,r3,r2
    1bd8:	e1bff617 	ldw	r6,-40(fp)
    1bdc:	e17ffd17 	ldw	r5,-12(fp)
    1be0:	1009883a 	mov	r4,r2
    1be4:	0000ad40 	call	ad4 <memcpy>
      ptr   += n;
    1be8:	e0fffd17 	ldw	r3,-12(fp)
    1bec:	e0bff617 	ldw	r2,-40(fp)
    1bf0:	1885883a 	add	r2,r3,r2
    1bf4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    1bf8:	e0fffe17 	ldw	r3,-8(fp)
    1bfc:	e0bff617 	ldw	r2,-40(fp)
    1c00:	1885c83a 	sub	r2,r3,r2
    1c04:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1c08:	e0fff917 	ldw	r3,-28(fp)
    1c0c:	e0bff617 	ldw	r2,-40(fp)
    1c10:	1885883a 	add	r2,r3,r2
    1c14:	10c1ffcc 	andi	r3,r2,2047
    1c18:	e0bffc17 	ldw	r2,-16(fp)
    1c1c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1c20:	e0bffe17 	ldw	r2,-8(fp)
    1c24:	00bfc716 	blt	zero,r2,1b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b44>
    1c28:	00000106 	br	1c30 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    1c2c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1c30:	0005303a 	rdctl	r2,status
    1c34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1c38:	e0fffb17 	ldw	r3,-20(fp)
    1c3c:	00bfff84 	movi	r2,-2
    1c40:	1884703a 	and	r2,r3,r2
    1c44:	1001703a 	wrctl	status,r2
  
  return context;
    1c48:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1c4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1c50:	e0bffc17 	ldw	r2,-16(fp)
    1c54:	10800817 	ldw	r2,32(r2)
    1c58:	10c00094 	ori	r3,r2,2
    1c5c:	e0bffc17 	ldw	r2,-16(fp)
    1c60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1c64:	e0bffc17 	ldw	r2,-16(fp)
    1c68:	10800017 	ldw	r2,0(r2)
    1c6c:	10800104 	addi	r2,r2,4
    1c70:	1007883a 	mov	r3,r2
    1c74:	e0bffc17 	ldw	r2,-16(fp)
    1c78:	10800817 	ldw	r2,32(r2)
    1c7c:	18800035 	stwio	r2,0(r3)
    1c80:	e0bffa17 	ldw	r2,-24(fp)
    1c84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c88:	e0bff817 	ldw	r2,-32(fp)
    1c8c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    1c90:	e0bffe17 	ldw	r2,-8(fp)
    1c94:	0080100e 	bge	zero,r2,1cd8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    1c98:	e0bfff17 	ldw	r2,-4(fp)
    1c9c:	1090000c 	andi	r2,r2,16384
    1ca0:	1000101e 	bne	r2,zero,1ce4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1ca4:	0001883a 	nop
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	10c00d17 	ldw	r3,52(r2)
    1cb0:	e0bff517 	ldw	r2,-44(fp)
    1cb4:	1880051e 	bne	r3,r2,1ccc <altera_avalon_jtag_uart_write+0x1b8>
    1cb8:	e0bffc17 	ldw	r2,-16(fp)
    1cbc:	10c00917 	ldw	r3,36(r2)
    1cc0:	e0bffc17 	ldw	r2,-16(fp)
    1cc4:	10800117 	ldw	r2,4(r2)
    1cc8:	18bff736 	bltu	r3,r2,1ca8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ca8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1ccc:	e0bffc17 	ldw	r2,-16(fp)
    1cd0:	10800917 	ldw	r2,36(r2)
    1cd4:	1000051e 	bne	r2,zero,1cec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    1cd8:	e0bffe17 	ldw	r2,-8(fp)
    1cdc:	00bfd016 	blt	zero,r2,1c20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c20>
    1ce0:	00000306 	br	1cf0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    1ce4:	0001883a 	nop
    1ce8:	00000106 	br	1cf0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    1cec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1cf0:	e0fffd17 	ldw	r3,-12(fp)
    1cf4:	e0bff717 	ldw	r2,-36(fp)
    1cf8:	18800426 	beq	r3,r2,1d0c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    1cfc:	e0fffd17 	ldw	r3,-12(fp)
    1d00:	e0bff717 	ldw	r2,-36(fp)
    1d04:	1885c83a 	sub	r2,r3,r2
    1d08:	00000606 	br	1d24 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    1d0c:	e0bfff17 	ldw	r2,-4(fp)
    1d10:	1090000c 	andi	r2,r2,16384
    1d14:	10000226 	beq	r2,zero,1d20 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    1d18:	00bffd44 	movi	r2,-11
    1d1c:	00000106 	br	1d24 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1d20:	00bffec4 	movi	r2,-5
}
    1d24:	e037883a 	mov	sp,fp
    1d28:	dfc00117 	ldw	ra,4(sp)
    1d2c:	df000017 	ldw	fp,0(sp)
    1d30:	dec00204 	addi	sp,sp,8
    1d34:	f800283a 	ret

00001d38 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1d38:	defff904 	addi	sp,sp,-28
    1d3c:	dfc00615 	stw	ra,24(sp)
    1d40:	df000515 	stw	fp,20(sp)
    1d44:	df000504 	addi	fp,sp,20
    1d48:	e13ffe15 	stw	r4,-8(fp)
    1d4c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1d50:	0007883a 	mov	r3,zero
    1d54:	e0bffe17 	ldw	r2,-8(fp)
    1d58:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1d5c:	e0bffe17 	ldw	r2,-8(fp)
    1d60:	10800104 	addi	r2,r2,4
    1d64:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1d68:	0005303a 	rdctl	r2,status
    1d6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1d70:	e0fffc17 	ldw	r3,-16(fp)
    1d74:	00bfff84 	movi	r2,-2
    1d78:	1884703a 	and	r2,r3,r2
    1d7c:	1001703a 	wrctl	status,r2
  
  return context;
    1d80:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    1d84:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    1d88:	0003ae00 	call	3ae0 <alt_tick>
    1d8c:	e0bffb17 	ldw	r2,-20(fp)
    1d90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1d94:	e0bffd17 	ldw	r2,-12(fp)
    1d98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    1d9c:	0001883a 	nop
    1da0:	e037883a 	mov	sp,fp
    1da4:	dfc00117 	ldw	ra,4(sp)
    1da8:	df000017 	ldw	fp,0(sp)
    1dac:	dec00204 	addi	sp,sp,8
    1db0:	f800283a 	ret

00001db4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1db4:	defff904 	addi	sp,sp,-28
    1db8:	dfc00615 	stw	ra,24(sp)
    1dbc:	df000515 	stw	fp,20(sp)
    1dc0:	df000504 	addi	fp,sp,20
    1dc4:	e13ffc15 	stw	r4,-16(fp)
    1dc8:	e17ffd15 	stw	r5,-12(fp)
    1dcc:	e1bffe15 	stw	r6,-8(fp)
    1dd0:	e1ffff15 	stw	r7,-4(fp)
    1dd4:	e0bfff17 	ldw	r2,-4(fp)
    1dd8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1ddc:	00800034 	movhi	r2,0
    1de0:	109e1e04 	addi	r2,r2,30840
    1de4:	10800017 	ldw	r2,0(r2)
    1de8:	1000041e 	bne	r2,zero,1dfc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    1dec:	00800034 	movhi	r2,0
    1df0:	109e1e04 	addi	r2,r2,30840
    1df4:	e0fffb17 	ldw	r3,-20(fp)
    1df8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1dfc:	e0bffc17 	ldw	r2,-16(fp)
    1e00:	10800104 	addi	r2,r2,4
    1e04:	00c001c4 	movi	r3,7
    1e08:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1e0c:	01800034 	movhi	r6,0
    1e10:	31874e04 	addi	r6,r6,7480
    1e14:	e17ffc17 	ldw	r5,-16(fp)
    1e18:	e13ffe17 	ldw	r4,-8(fp)
    1e1c:	0000c1c0 	call	c1c <alt_irq_register>
#endif  
}
    1e20:	0001883a 	nop
    1e24:	e037883a 	mov	sp,fp
    1e28:	dfc00117 	ldw	ra,4(sp)
    1e2c:	df000017 	ldw	fp,0(sp)
    1e30:	dec00204 	addi	sp,sp,8
    1e34:	f800283a 	ret

00001e38 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    1e38:	defffc04 	addi	sp,sp,-16
    1e3c:	df000315 	stw	fp,12(sp)
    1e40:	df000304 	addi	fp,sp,12
    1e44:	e13ffe15 	stw	r4,-8(fp)
    1e48:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    1e4c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    1e50:	e0bfff17 	ldw	r2,-4(fp)
    1e54:	1000061e 	bne	r2,zero,1e70 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    1e58:	e0bffe17 	ldw	r2,-8(fp)
    1e5c:	1007883a 	mov	r3,r2
    1e60:	e0bffd03 	ldbu	r2,-12(fp)
    1e64:	1884b03a 	or	r2,r3,r2
    1e68:	e0bffd05 	stb	r2,-12(fp)
    1e6c:	00000806 	br	1e90 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    1e70:	e0bffe17 	ldw	r2,-8(fp)
    1e74:	1007883a 	mov	r3,r2
    1e78:	e0bffd03 	ldbu	r2,-12(fp)
    1e7c:	1884b03a 	or	r2,r3,r2
    1e80:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    1e84:	e0bffd03 	ldbu	r2,-12(fp)
    1e88:	10801014 	ori	r2,r2,64
    1e8c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    1e90:	e0fffd03 	ldbu	r3,-12(fp)
    1e94:	00bfe004 	movi	r2,-128
    1e98:	1884b03a 	or	r2,r3,r2
}
    1e9c:	e037883a 	mov	sp,fp
    1ea0:	df000017 	ldw	fp,0(sp)
    1ea4:	dec00104 	addi	sp,sp,4
    1ea8:	f800283a 	ret

00001eac <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    1eac:	defffd04 	addi	sp,sp,-12
    1eb0:	df000215 	stw	fp,8(sp)
    1eb4:	df000204 	addi	fp,sp,8
    1eb8:	e13ffe15 	stw	r4,-8(fp)
    1ebc:	2805883a 	mov	r2,r5
    1ec0:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    1ec4:	e0bffe17 	ldw	r2,-8(fp)
    1ec8:	10800a17 	ldw	r2,40(r2)
    1ecc:	1007883a 	mov	r3,r2
    1ed0:	e0bfff03 	ldbu	r2,-4(fp)
    1ed4:	18800025 	stbio	r2,0(r3)
}
    1ed8:	0001883a 	nop
    1edc:	e037883a 	mov	sp,fp
    1ee0:	df000017 	ldw	fp,0(sp)
    1ee4:	dec00104 	addi	sp,sp,4
    1ee8:	f800283a 	ret

00001eec <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    1eec:	defffe04 	addi	sp,sp,-8
    1ef0:	df000115 	stw	fp,4(sp)
    1ef4:	df000104 	addi	fp,sp,4
    1ef8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    1efc:	e0bfff17 	ldw	r2,-4(fp)
    1f00:	10800a17 	ldw	r2,40(r2)
    1f04:	1007883a 	mov	r3,r2
    1f08:	00800044 	movi	r2,1
    1f0c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    1f10:	0001883a 	nop
    1f14:	e037883a 	mov	sp,fp
    1f18:	df000017 	ldw	fp,0(sp)
    1f1c:	dec00104 	addi	sp,sp,4
    1f20:	f800283a 	ret

00001f24 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    1f24:	defffc04 	addi	sp,sp,-16
    1f28:	dfc00315 	stw	ra,12(sp)
    1f2c:	df000215 	stw	fp,8(sp)
    1f30:	df000204 	addi	fp,sp,8
    1f34:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    1f38:	01400034 	movhi	r5,0
    1f3c:	2957ab04 	addi	r5,r5,24236
    1f40:	e13fff17 	ldw	r4,-4(fp)
    1f44:	00035680 	call	3568 <alt_find_dev>
    1f48:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1f4c:	e0bffe17 	ldw	r2,-8(fp)
}
    1f50:	e037883a 	mov	sp,fp
    1f54:	dfc00117 	ldw	ra,4(sp)
    1f58:	df000017 	ldw	fp,0(sp)
    1f5c:	dec00204 	addi	sp,sp,8
    1f60:	f800283a 	ret

00001f64 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    1f64:	defffb04 	addi	sp,sp,-20
    1f68:	df000415 	stw	fp,16(sp)
    1f6c:	df000404 	addi	fp,sp,16
    1f70:	e13ffd15 	stw	r4,-12(fp)
    1f74:	e17ffe15 	stw	r5,-8(fp)
    1f78:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    1f7c:	e03ffc15 	stw	zero,-16(fp)
    1f80:	00000f06 	br	1fc0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    1f84:	e0bffd17 	ldw	r2,-12(fp)
    1f88:	10800a17 	ldw	r2,40(r2)
    1f8c:	10800044 	addi	r2,r2,1
    1f90:	1009883a 	mov	r4,r2
    1f94:	e0fffe17 	ldw	r3,-8(fp)
    1f98:	e0bffc17 	ldw	r2,-16(fp)
    1f9c:	1885883a 	add	r2,r3,r2
    1fa0:	10800003 	ldbu	r2,0(r2)
    1fa4:	10803fcc 	andi	r2,r2,255
    1fa8:	1080201c 	xori	r2,r2,128
    1fac:	10bfe004 	addi	r2,r2,-128
    1fb0:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    1fb4:	e0bffc17 	ldw	r2,-16(fp)
    1fb8:	10800044 	addi	r2,r2,1
    1fbc:	e0bffc15 	stw	r2,-16(fp)
    1fc0:	e0fffc17 	ldw	r3,-16(fp)
    1fc4:	e0bfff17 	ldw	r2,-4(fp)
    1fc8:	18bfee36 	bltu	r3,r2,1f84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f84>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    1fcc:	0001883a 	nop
    1fd0:	e037883a 	mov	sp,fp
    1fd4:	df000017 	ldw	fp,0(sp)
    1fd8:	dec00104 	addi	sp,sp,4
    1fdc:	f800283a 	ret

00001fe0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    1fe0:	defffd04 	addi	sp,sp,-12
    1fe4:	df000215 	stw	fp,8(sp)
    1fe8:	df000204 	addi	fp,sp,8
    1fec:	e13ffe15 	stw	r4,-8(fp)
    1ff0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    1ff4:	00000d06 	br	202c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    1ff8:	e0bffe17 	ldw	r2,-8(fp)
    1ffc:	10800a17 	ldw	r2,40(r2)
    2000:	10800044 	addi	r2,r2,1
    2004:	1007883a 	mov	r3,r2
    2008:	e0bfff17 	ldw	r2,-4(fp)
    200c:	10800003 	ldbu	r2,0(r2)
    2010:	10803fcc 	andi	r2,r2,255
    2014:	1080201c 	xori	r2,r2,128
    2018:	10bfe004 	addi	r2,r2,-128
    201c:	18800025 	stbio	r2,0(r3)
		++ptr;
    2020:	e0bfff17 	ldw	r2,-4(fp)
    2024:	10800044 	addi	r2,r2,1
    2028:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    202c:	e0bfff17 	ldw	r2,-4(fp)
    2030:	10800003 	ldbu	r2,0(r2)
    2034:	10803fcc 	andi	r2,r2,255
    2038:	1080201c 	xori	r2,r2,128
    203c:	10bfe004 	addi	r2,r2,-128
    2040:	103fed1e 	bne	r2,zero,1ff8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ff8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    2044:	0001883a 	nop
    2048:	e037883a 	mov	sp,fp
    204c:	df000017 	ldw	fp,0(sp)
    2050:	dec00104 	addi	sp,sp,4
    2054:	f800283a 	ret

00002058 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    2058:	defffb04 	addi	sp,sp,-20
    205c:	dfc00415 	stw	ra,16(sp)
    2060:	df000315 	stw	fp,12(sp)
    2064:	df000304 	addi	fp,sp,12
    2068:	e13ffd15 	stw	r4,-12(fp)
    206c:	e17ffe15 	stw	r5,-8(fp)
    2070:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    2074:	e0bffd17 	ldw	r2,-12(fp)
    2078:	10800017 	ldw	r2,0(r2)
    207c:	e0ffff17 	ldw	r3,-4(fp)
    2080:	180d883a 	mov	r6,r3
    2084:	e17ffe17 	ldw	r5,-8(fp)
    2088:	1009883a 	mov	r4,r2
    208c:	0001f640 	call	1f64 <alt_up_character_lcd_write>
	return 0;
    2090:	0005883a 	mov	r2,zero
}
    2094:	e037883a 	mov	sp,fp
    2098:	dfc00117 	ldw	ra,4(sp)
    209c:	df000017 	ldw	fp,0(sp)
    20a0:	dec00204 	addi	sp,sp,8
    20a4:	f800283a 	ret

000020a8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    20a8:	defffa04 	addi	sp,sp,-24
    20ac:	dfc00515 	stw	ra,20(sp)
    20b0:	df000415 	stw	fp,16(sp)
    20b4:	df000404 	addi	fp,sp,16
    20b8:	e13ffd15 	stw	r4,-12(fp)
    20bc:	e17ffe15 	stw	r5,-8(fp)
    20c0:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    20c4:	e0bffe17 	ldw	r2,-8(fp)
    20c8:	10800a28 	cmpgeui	r2,r2,40
    20cc:	1000031e 	bne	r2,zero,20dc <alt_up_character_lcd_set_cursor_pos+0x34>
    20d0:	e0bfff17 	ldw	r2,-4(fp)
    20d4:	108000b0 	cmpltui	r2,r2,2
    20d8:	1000021e 	bne	r2,zero,20e4 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    20dc:	00bfffc4 	movi	r2,-1
    20e0:	00000906 	br	2108 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    20e4:	e17fff17 	ldw	r5,-4(fp)
    20e8:	e13ffe17 	ldw	r4,-8(fp)
    20ec:	0001e380 	call	1e38 <get_DDRAM_addr>
    20f0:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    20f4:	e0bffc03 	ldbu	r2,-16(fp)
    20f8:	100b883a 	mov	r5,r2
    20fc:	e13ffd17 	ldw	r4,-12(fp)
    2100:	0001eac0 	call	1eac <alt_up_character_lcd_send_cmd>
	return 0;
    2104:	0005883a 	mov	r2,zero
}
    2108:	e037883a 	mov	sp,fp
    210c:	dfc00117 	ldw	ra,4(sp)
    2110:	df000017 	ldw	fp,0(sp)
    2114:	dec00204 	addi	sp,sp,8
    2118:	f800283a 	ret

0000211c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    211c:	defffb04 	addi	sp,sp,-20
    2120:	dfc00415 	stw	ra,16(sp)
    2124:	df000315 	stw	fp,12(sp)
    2128:	df000304 	addi	fp,sp,12
    212c:	e13ffe15 	stw	r4,-8(fp)
    2130:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    2134:	e0bfff17 	ldw	r2,-4(fp)
    2138:	10001526 	beq	r2,zero,2190 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    213c:	e0bfff17 	ldw	r2,-4(fp)
    2140:	0080020e 	bge	zero,r2,214c <alt_up_character_lcd_shift_cursor+0x30>
    2144:	00800504 	movi	r2,20
    2148:	00000106 	br	2150 <alt_up_character_lcd_shift_cursor+0x34>
    214c:	00800404 	movi	r2,16
    2150:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    2154:	e0bfff17 	ldw	r2,-4(fp)
    2158:	1000010e 	bge	r2,zero,2160 <alt_up_character_lcd_shift_cursor+0x44>
    215c:	0085c83a 	sub	r2,zero,r2
    2160:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    2164:	00000406 	br	2178 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    2168:	e0bffd43 	ldbu	r2,-11(fp)
    216c:	100b883a 	mov	r5,r2
    2170:	e13ffe17 	ldw	r4,-8(fp)
    2174:	0001eac0 	call	1eac <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    2178:	e0bffd03 	ldbu	r2,-12(fp)
    217c:	10ffffc4 	addi	r3,r2,-1
    2180:	e0fffd05 	stb	r3,-12(fp)
    2184:	10803fcc 	andi	r2,r2,255
    2188:	103ff71e 	bne	r2,zero,2168 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002168>
    218c:	00000106 	br	2194 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    2190:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    2194:	e037883a 	mov	sp,fp
    2198:	dfc00117 	ldw	ra,4(sp)
    219c:	df000017 	ldw	fp,0(sp)
    21a0:	dec00204 	addi	sp,sp,8
    21a4:	f800283a 	ret

000021a8 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    21a8:	defffb04 	addi	sp,sp,-20
    21ac:	dfc00415 	stw	ra,16(sp)
    21b0:	df000315 	stw	fp,12(sp)
    21b4:	df000304 	addi	fp,sp,12
    21b8:	e13ffe15 	stw	r4,-8(fp)
    21bc:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    21c0:	e0bfff17 	ldw	r2,-4(fp)
    21c4:	10001526 	beq	r2,zero,221c <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    21c8:	e0bfff17 	ldw	r2,-4(fp)
    21cc:	0080020e 	bge	zero,r2,21d8 <alt_up_character_lcd_shift_display+0x30>
    21d0:	00800704 	movi	r2,28
    21d4:	00000106 	br	21dc <alt_up_character_lcd_shift_display+0x34>
    21d8:	00800604 	movi	r2,24
    21dc:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    21e0:	e0bfff17 	ldw	r2,-4(fp)
    21e4:	1000010e 	bge	r2,zero,21ec <alt_up_character_lcd_shift_display+0x44>
    21e8:	0085c83a 	sub	r2,zero,r2
    21ec:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    21f0:	00000406 	br	2204 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    21f4:	e0bffd43 	ldbu	r2,-11(fp)
    21f8:	100b883a 	mov	r5,r2
    21fc:	e13ffe17 	ldw	r4,-8(fp)
    2200:	0001eac0 	call	1eac <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    2204:	e0bffd03 	ldbu	r2,-12(fp)
    2208:	10ffffc4 	addi	r3,r2,-1
    220c:	e0fffd05 	stb	r3,-12(fp)
    2210:	10803fcc 	andi	r2,r2,255
    2214:	103ff71e 	bne	r2,zero,21f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70021f4>
    2218:	00000106 	br	2220 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    221c:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    2220:	e037883a 	mov	sp,fp
    2224:	dfc00117 	ldw	ra,4(sp)
    2228:	df000017 	ldw	fp,0(sp)
    222c:	dec00204 	addi	sp,sp,8
    2230:	f800283a 	ret

00002234 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    2234:	defffa04 	addi	sp,sp,-24
    2238:	dfc00515 	stw	ra,20(sp)
    223c:	df000415 	stw	fp,16(sp)
    2240:	df000404 	addi	fp,sp,16
    2244:	e13ffd15 	stw	r4,-12(fp)
    2248:	e17ffe15 	stw	r5,-8(fp)
    224c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    2250:	e0bffe17 	ldw	r2,-8(fp)
    2254:	10800a28 	cmpgeui	r2,r2,40
    2258:	1000031e 	bne	r2,zero,2268 <alt_up_character_lcd_erase_pos+0x34>
    225c:	e0bfff17 	ldw	r2,-4(fp)
    2260:	108000b0 	cmpltui	r2,r2,2
    2264:	1000021e 	bne	r2,zero,2270 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    2268:	00bfffc4 	movi	r2,-1
    226c:	00000f06 	br	22ac <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    2270:	e17fff17 	ldw	r5,-4(fp)
    2274:	e13ffe17 	ldw	r4,-8(fp)
    2278:	0001e380 	call	1e38 <get_DDRAM_addr>
    227c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    2280:	e0bffc03 	ldbu	r2,-16(fp)
    2284:	100b883a 	mov	r5,r2
    2288:	e13ffd17 	ldw	r4,-12(fp)
    228c:	0001eac0 	call	1eac <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    2290:	e0bffd17 	ldw	r2,-12(fp)
    2294:	10800a17 	ldw	r2,40(r2)
    2298:	10800044 	addi	r2,r2,1
    229c:	1007883a 	mov	r3,r2
    22a0:	00800084 	movi	r2,2
    22a4:	18800025 	stbio	r2,0(r3)
	return 0;
    22a8:	0005883a 	mov	r2,zero
}
    22ac:	e037883a 	mov	sp,fp
    22b0:	dfc00117 	ldw	ra,4(sp)
    22b4:	df000017 	ldw	fp,0(sp)
    22b8:	dec00204 	addi	sp,sp,8
    22bc:	f800283a 	ret

000022c0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    22c0:	defffd04 	addi	sp,sp,-12
    22c4:	dfc00215 	stw	ra,8(sp)
    22c8:	df000115 	stw	fp,4(sp)
    22cc:	df000104 	addi	fp,sp,4
    22d0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    22d4:	01400304 	movi	r5,12
    22d8:	e13fff17 	ldw	r4,-4(fp)
    22dc:	0001eac0 	call	1eac <alt_up_character_lcd_send_cmd>
}
    22e0:	0001883a 	nop
    22e4:	e037883a 	mov	sp,fp
    22e8:	dfc00117 	ldw	ra,4(sp)
    22ec:	df000017 	ldw	fp,0(sp)
    22f0:	dec00204 	addi	sp,sp,8
    22f4:	f800283a 	ret

000022f8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    22f8:	defffd04 	addi	sp,sp,-12
    22fc:	dfc00215 	stw	ra,8(sp)
    2300:	df000115 	stw	fp,4(sp)
    2304:	df000104 	addi	fp,sp,4
    2308:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    230c:	014003c4 	movi	r5,15
    2310:	e13fff17 	ldw	r4,-4(fp)
    2314:	0001eac0 	call	1eac <alt_up_character_lcd_send_cmd>
}
    2318:	0001883a 	nop
    231c:	e037883a 	mov	sp,fp
    2320:	dfc00117 	ldw	ra,4(sp)
    2324:	df000017 	ldw	fp,0(sp)
    2328:	dec00204 	addi	sp,sp,8
    232c:	f800283a 	ret

00002330 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    2330:	defffd04 	addi	sp,sp,-12
    2334:	df000215 	stw	fp,8(sp)
    2338:	df000204 	addi	fp,sp,8
    233c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    2340:	e0bfff17 	ldw	r2,-4(fp)
    2344:	10800a17 	ldw	r2,40(r2)
    2348:	10800104 	addi	r2,r2,4
    234c:	10800037 	ldwio	r2,0(r2)
    2350:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    2354:	e0bffe17 	ldw	r2,-8(fp)
    2358:	10800054 	ori	r2,r2,1
    235c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    2360:	e0bfff17 	ldw	r2,-4(fp)
    2364:	10800a17 	ldw	r2,40(r2)
    2368:	10800104 	addi	r2,r2,4
    236c:	1007883a 	mov	r3,r2
    2370:	e0bffe17 	ldw	r2,-8(fp)
    2374:	18800035 	stwio	r2,0(r3)
}
    2378:	0001883a 	nop
    237c:	e037883a 	mov	sp,fp
    2380:	df000017 	ldw	fp,0(sp)
    2384:	dec00104 	addi	sp,sp,4
    2388:	f800283a 	ret

0000238c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    238c:	defffd04 	addi	sp,sp,-12
    2390:	df000215 	stw	fp,8(sp)
    2394:	df000204 	addi	fp,sp,8
    2398:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    239c:	e0bfff17 	ldw	r2,-4(fp)
    23a0:	10800a17 	ldw	r2,40(r2)
    23a4:	10800104 	addi	r2,r2,4
    23a8:	10800037 	ldwio	r2,0(r2)
    23ac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    23b0:	e0fffe17 	ldw	r3,-8(fp)
    23b4:	00bfff84 	movi	r2,-2
    23b8:	1884703a 	and	r2,r3,r2
    23bc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    23c0:	e0bfff17 	ldw	r2,-4(fp)
    23c4:	10800a17 	ldw	r2,40(r2)
    23c8:	10800104 	addi	r2,r2,4
    23cc:	1007883a 	mov	r3,r2
    23d0:	e0bffe17 	ldw	r2,-8(fp)
    23d4:	18800035 	stwio	r2,0(r3)
}
    23d8:	0001883a 	nop
    23dc:	e037883a 	mov	sp,fp
    23e0:	df000017 	ldw	fp,0(sp)
    23e4:	dec00104 	addi	sp,sp,4
    23e8:	f800283a 	ret

000023ec <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    23ec:	defffd04 	addi	sp,sp,-12
    23f0:	df000215 	stw	fp,8(sp)
    23f4:	df000204 	addi	fp,sp,8
    23f8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    23fc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    2400:	e0bfff17 	ldw	r2,-4(fp)
    2404:	10800a17 	ldw	r2,40(r2)
    2408:	10800084 	addi	r2,r2,2
    240c:	1080002b 	ldhuio	r2,0(r2)
    2410:	10bfffcc 	andi	r2,r2,65535
    2414:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    2418:	e0bffe0b 	ldhu	r2,-8(fp)
}
    241c:	e037883a 	mov	sp,fp
    2420:	df000017 	ldw	fp,0(sp)
    2424:	dec00104 	addi	sp,sp,4
    2428:	f800283a 	ret

0000242c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    242c:	defffd04 	addi	sp,sp,-12
    2430:	df000215 	stw	fp,8(sp)
    2434:	df000204 	addi	fp,sp,8
    2438:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    243c:	e0bfff17 	ldw	r2,-4(fp)
    2440:	10800a17 	ldw	r2,40(r2)
    2444:	10800104 	addi	r2,r2,4
    2448:	10800037 	ldwio	r2,0(r2)
    244c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    2450:	e0bffe17 	ldw	r2,-8(fp)
    2454:	1004d43a 	srli	r2,r2,16
}
    2458:	e037883a 	mov	sp,fp
    245c:	df000017 	ldw	fp,0(sp)
    2460:	dec00104 	addi	sp,sp,4
    2464:	f800283a 	ret

00002468 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    2468:	defffd04 	addi	sp,sp,-12
    246c:	df000215 	stw	fp,8(sp)
    2470:	df000204 	addi	fp,sp,8
    2474:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    2478:	e0bfff17 	ldw	r2,-4(fp)
    247c:	1080800c 	andi	r2,r2,512
    2480:	1004d27a 	srli	r2,r2,9
    2484:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    2488:	e0bffe17 	ldw	r2,-8(fp)
    248c:	10000226 	beq	r2,zero,2498 <alt_up_irda_check_parity+0x30>
    2490:	00bfffc4 	movi	r2,-1
    2494:	00000106 	br	249c <alt_up_irda_check_parity+0x34>
    2498:	0005883a 	mov	r2,zero
}
    249c:	e037883a 	mov	sp,fp
    24a0:	df000017 	ldw	fp,0(sp)
    24a4:	dec00104 	addi	sp,sp,4
    24a8:	f800283a 	ret

000024ac <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    24ac:	defffd04 	addi	sp,sp,-12
    24b0:	df000215 	stw	fp,8(sp)
    24b4:	df000204 	addi	fp,sp,8
    24b8:	e13ffe15 	stw	r4,-8(fp)
    24bc:	2805883a 	mov	r2,r5
    24c0:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    24c4:	e0bffe17 	ldw	r2,-8(fp)
    24c8:	10800a17 	ldw	r2,40(r2)
    24cc:	1007883a 	mov	r3,r2
    24d0:	e0bfff03 	ldbu	r2,-4(fp)
    24d4:	18800035 	stwio	r2,0(r3)
	return 0;
    24d8:	0005883a 	mov	r2,zero
}
    24dc:	e037883a 	mov	sp,fp
    24e0:	df000017 	ldw	fp,0(sp)
    24e4:	dec00104 	addi	sp,sp,4
    24e8:	f800283a 	ret

000024ec <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    24ec:	defffa04 	addi	sp,sp,-24
    24f0:	dfc00515 	stw	ra,20(sp)
    24f4:	df000415 	stw	fp,16(sp)
    24f8:	df000404 	addi	fp,sp,16
    24fc:	e13ffd15 	stw	r4,-12(fp)
    2500:	e17ffe15 	stw	r5,-8(fp)
    2504:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    2508:	e0bffd17 	ldw	r2,-12(fp)
    250c:	10800a17 	ldw	r2,40(r2)
    2510:	10800037 	ldwio	r2,0(r2)
    2514:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    2518:	e0bffc17 	ldw	r2,-16(fp)
    251c:	1007883a 	mov	r3,r2
    2520:	e0bffe17 	ldw	r2,-8(fp)
    2524:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    2528:	e13ffc17 	ldw	r4,-16(fp)
    252c:	00024680 	call	2468 <alt_up_irda_check_parity>
    2530:	1007883a 	mov	r3,r2
    2534:	e0bfff17 	ldw	r2,-4(fp)
    2538:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    253c:	e0bffc17 	ldw	r2,-16(fp)
    2540:	10a0000c 	andi	r2,r2,32768
    2544:	1004d3fa 	srli	r2,r2,15
    2548:	10bfffc4 	addi	r2,r2,-1
}
    254c:	e037883a 	mov	sp,fp
    2550:	dfc00117 	ldw	ra,4(sp)
    2554:	df000017 	ldw	fp,0(sp)
    2558:	dec00204 	addi	sp,sp,8
    255c:	f800283a 	ret

00002560 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    2560:	defff804 	addi	sp,sp,-32
    2564:	dfc00715 	stw	ra,28(sp)
    2568:	df000615 	stw	fp,24(sp)
    256c:	df000604 	addi	fp,sp,24
    2570:	e13ffd15 	stw	r4,-12(fp)
    2574:	e17ffe15 	stw	r5,-8(fp)
    2578:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    257c:	e0bffd17 	ldw	r2,-12(fp)
    2580:	10800017 	ldw	r2,0(r2)
    2584:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    2588:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    258c:	00000c06 	br	25c0 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    2590:	e0bffe17 	ldw	r2,-8(fp)
    2594:	10c00044 	addi	r3,r2,1
    2598:	e0fffe15 	stw	r3,-8(fp)
    259c:	e0fffc04 	addi	r3,fp,-16
    25a0:	180d883a 	mov	r6,r3
    25a4:	100b883a 	mov	r5,r2
    25a8:	e13ffb17 	ldw	r4,-20(fp)
    25ac:	00024ec0 	call	24ec <alt_up_irda_read_data>
    25b0:	1000081e 	bne	r2,zero,25d4 <alt_up_irda_read_fd+0x74>
			count++;
    25b4:	e0bffa17 	ldw	r2,-24(fp)
    25b8:	10800044 	addi	r2,r2,1
    25bc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    25c0:	e0bfff17 	ldw	r2,-4(fp)
    25c4:	10ffffc4 	addi	r3,r2,-1
    25c8:	e0ffff15 	stw	r3,-4(fp)
    25cc:	103ff01e 	bne	r2,zero,2590 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002590>
    25d0:	00000106 	br	25d8 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    25d4:	0001883a 	nop
	}
	return count;
    25d8:	e0bffa17 	ldw	r2,-24(fp)
}
    25dc:	e037883a 	mov	sp,fp
    25e0:	dfc00117 	ldw	ra,4(sp)
    25e4:	df000017 	ldw	fp,0(sp)
    25e8:	dec00204 	addi	sp,sp,8
    25ec:	f800283a 	ret

000025f0 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    25f0:	defff904 	addi	sp,sp,-28
    25f4:	dfc00615 	stw	ra,24(sp)
    25f8:	df000515 	stw	fp,20(sp)
    25fc:	df000504 	addi	fp,sp,20
    2600:	e13ffd15 	stw	r4,-12(fp)
    2604:	e17ffe15 	stw	r5,-8(fp)
    2608:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    260c:	e0bffd17 	ldw	r2,-12(fp)
    2610:	10800017 	ldw	r2,0(r2)
    2614:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    2618:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    261c:	00000c06 	br	2650 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    2620:	e0bffe17 	ldw	r2,-8(fp)
    2624:	10c00044 	addi	r3,r2,1
    2628:	e0fffe15 	stw	r3,-8(fp)
    262c:	10800003 	ldbu	r2,0(r2)
    2630:	10803fcc 	andi	r2,r2,255
    2634:	100b883a 	mov	r5,r2
    2638:	e13ffc17 	ldw	r4,-16(fp)
    263c:	00024ac0 	call	24ac <alt_up_irda_write_data>
    2640:	1000081e 	bne	r2,zero,2664 <alt_up_irda_write_fd+0x74>
			count++;
    2644:	e0bffb17 	ldw	r2,-20(fp)
    2648:	10800044 	addi	r2,r2,1
    264c:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    2650:	e0bfff17 	ldw	r2,-4(fp)
    2654:	10ffffc4 	addi	r3,r2,-1
    2658:	e0ffff15 	stw	r3,-4(fp)
    265c:	103ff01e 	bne	r2,zero,2620 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002620>
    2660:	00000106 	br	2668 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
    2664:	0001883a 	nop
	}
	return count;
    2668:	e0bffb17 	ldw	r2,-20(fp)
}
    266c:	e037883a 	mov	sp,fp
    2670:	dfc00117 	ldw	ra,4(sp)
    2674:	df000017 	ldw	fp,0(sp)
    2678:	dec00204 	addi	sp,sp,8
    267c:	f800283a 	ret

00002680 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    2680:	defffc04 	addi	sp,sp,-16
    2684:	dfc00315 	stw	ra,12(sp)
    2688:	df000215 	stw	fp,8(sp)
    268c:	df000204 	addi	fp,sp,8
    2690:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    2694:	01400034 	movhi	r5,0
    2698:	2957ab04 	addi	r5,r5,24236
    269c:	e13fff17 	ldw	r4,-4(fp)
    26a0:	00035680 	call	3568 <alt_find_dev>
    26a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    26a8:	e0bffe17 	ldw	r2,-8(fp)
}
    26ac:	e037883a 	mov	sp,fp
    26b0:	dfc00117 	ldw	ra,4(sp)
    26b4:	df000017 	ldw	fp,0(sp)
    26b8:	dec00204 	addi	sp,sp,8
    26bc:	f800283a 	ret

000026c0 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    26c0:	defffd04 	addi	sp,sp,-12
    26c4:	df000215 	stw	fp,8(sp)
    26c8:	df000204 	addi	fp,sp,8
    26cc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    26d0:	e0bfff17 	ldw	r2,-4(fp)
    26d4:	1080400c 	andi	r2,r2,256
    26d8:	1004d23a 	srli	r2,r2,8
    26dc:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    26e0:	e0bffe03 	ldbu	r2,-8(fp)
}
    26e4:	e037883a 	mov	sp,fp
    26e8:	df000017 	ldw	fp,0(sp)
    26ec:	dec00104 	addi	sp,sp,4
    26f0:	f800283a 	ret

000026f4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    26f4:	defffd04 	addi	sp,sp,-12
    26f8:	df000215 	stw	fp,8(sp)
    26fc:	df000204 	addi	fp,sp,8
    2700:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    2704:	e0bfff17 	ldw	r2,-4(fp)
    2708:	1080004c 	andi	r2,r2,1
    270c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    2710:	e0bffe03 	ldbu	r2,-8(fp)
}
    2714:	e037883a 	mov	sp,fp
    2718:	df000017 	ldw	fp,0(sp)
    271c:	dec00104 	addi	sp,sp,4
    2720:	f800283a 	ret

00002724 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    2724:	defffd04 	addi	sp,sp,-12
    2728:	df000215 	stw	fp,8(sp)
    272c:	df000204 	addi	fp,sp,8
    2730:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    2734:	e0bfff17 	ldw	r2,-4(fp)
    2738:	1081000c 	andi	r2,r2,1024
    273c:	1004d2ba 	srli	r2,r2,10
    2740:	e0bffe05 	stb	r2,-8(fp)
	return re;
    2744:	e0bffe03 	ldbu	r2,-8(fp)
}
    2748:	e037883a 	mov	sp,fp
    274c:	df000017 	ldw	fp,0(sp)
    2750:	dec00104 	addi	sp,sp,4
    2754:	f800283a 	ret

00002758 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    2758:	defffd04 	addi	sp,sp,-12
    275c:	df000215 	stw	fp,8(sp)
    2760:	df000204 	addi	fp,sp,8
    2764:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    2768:	e0bfff17 	ldw	r2,-4(fp)
    276c:	1004d43a 	srli	r2,r2,16
    2770:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    2774:	e0bffe0b 	ldhu	r2,-8(fp)
}
    2778:	e037883a 	mov	sp,fp
    277c:	df000017 	ldw	fp,0(sp)
    2780:	dec00104 	addi	sp,sp,4
    2784:	f800283a 	ret

00002788 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    2788:	defffd04 	addi	sp,sp,-12
    278c:	df000215 	stw	fp,8(sp)
    2790:	df000204 	addi	fp,sp,8
    2794:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    2798:	e0bfff17 	ldw	r2,-4(fp)
    279c:	10a0000c 	andi	r2,r2,32768
    27a0:	1004d3fa 	srli	r2,r2,15
    27a4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    27a8:	e0bffe03 	ldbu	r2,-8(fp)
}
    27ac:	e037883a 	mov	sp,fp
    27b0:	df000017 	ldw	fp,0(sp)
    27b4:	dec00104 	addi	sp,sp,4
    27b8:	f800283a 	ret

000027bc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    27bc:	defffd04 	addi	sp,sp,-12
    27c0:	df000215 	stw	fp,8(sp)
    27c4:	df000204 	addi	fp,sp,8
    27c8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    27cc:	e0bfff17 	ldw	r2,-4(fp)
    27d0:	e0bffe05 	stb	r2,-8(fp)
	return data;
    27d4:	e0bffe03 	ldbu	r2,-8(fp)
}
    27d8:	e037883a 	mov	sp,fp
    27dc:	df000017 	ldw	fp,0(sp)
    27e0:	dec00104 	addi	sp,sp,4
    27e4:	f800283a 	ret

000027e8 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    27e8:	defffb04 	addi	sp,sp,-20
    27ec:	dfc00415 	stw	ra,16(sp)
    27f0:	df000315 	stw	fp,12(sp)
    27f4:	df000304 	addi	fp,sp,12
    27f8:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    27fc:	01403fc4 	movi	r5,255
    2800:	e13fff17 	ldw	r4,-4(fp)
    2804:	0002a480 	call	2a48 <alt_up_ps2_write_data_byte_with_ack>
    2808:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    280c:	e0bffd17 	ldw	r2,-12(fp)
    2810:	1000211e 	bne	r2,zero,2898 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    2814:	e0bffe04 	addi	r2,fp,-8
    2818:	100b883a 	mov	r5,r2
    281c:	e13fff17 	ldw	r4,-4(fp)
    2820:	0002aac0 	call	2aac <alt_up_ps2_read_data_byte_timeout>
    2824:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    2828:	e0bffd17 	ldw	r2,-12(fp)
    282c:	10001a1e 	bne	r2,zero,2898 <alt_up_ps2_init+0xb0>
    2830:	e0bffe03 	ldbu	r2,-8(fp)
    2834:	10803fcc 	andi	r2,r2,255
    2838:	10802a98 	cmpnei	r2,r2,170
    283c:	1000161e 	bne	r2,zero,2898 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    2840:	e0bffe04 	addi	r2,fp,-8
    2844:	100b883a 	mov	r5,r2
    2848:	e13fff17 	ldw	r4,-4(fp)
    284c:	0002aac0 	call	2aac <alt_up_ps2_read_data_byte_timeout>
    2850:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    2854:	e0bffd17 	ldw	r2,-12(fp)
    2858:	10bfe318 	cmpnei	r2,r2,-116
    285c:	1000041e 	bne	r2,zero,2870 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    2860:	e0bfff17 	ldw	r2,-4(fp)
    2864:	00c00044 	movi	r3,1
    2868:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
    286c:	00000a06 	br	2898 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
    2870:	e0bffd17 	ldw	r2,-12(fp)
    2874:	1000081e 	bne	r2,zero,2898 <alt_up_ps2_init+0xb0>
    2878:	e0bffe03 	ldbu	r2,-8(fp)
    287c:	10803fcc 	andi	r2,r2,255
    2880:	1000051e 	bne	r2,zero,2898 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    2884:	e0bfff17 	ldw	r2,-4(fp)
    2888:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    288c:	01403d04 	movi	r5,244
    2890:	e13fff17 	ldw	r4,-4(fp)
    2894:	000296c0 	call	296c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    2898:	0001883a 	nop
    289c:	e037883a 	mov	sp,fp
    28a0:	dfc00117 	ldw	ra,4(sp)
    28a4:	df000017 	ldw	fp,0(sp)
    28a8:	dec00204 	addi	sp,sp,8
    28ac:	f800283a 	ret

000028b0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    28b0:	defffd04 	addi	sp,sp,-12
    28b4:	df000215 	stw	fp,8(sp)
    28b8:	df000204 	addi	fp,sp,8
    28bc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    28c0:	e0bfff17 	ldw	r2,-4(fp)
    28c4:	10800a17 	ldw	r2,40(r2)
    28c8:	10800104 	addi	r2,r2,4
    28cc:	10800037 	ldwio	r2,0(r2)
    28d0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    28d4:	e0bffe17 	ldw	r2,-8(fp)
    28d8:	10800054 	ori	r2,r2,1
    28dc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    28e0:	e0bfff17 	ldw	r2,-4(fp)
    28e4:	10800a17 	ldw	r2,40(r2)
    28e8:	10800104 	addi	r2,r2,4
    28ec:	1007883a 	mov	r3,r2
    28f0:	e0bffe17 	ldw	r2,-8(fp)
    28f4:	18800035 	stwio	r2,0(r3)
}
    28f8:	0001883a 	nop
    28fc:	e037883a 	mov	sp,fp
    2900:	df000017 	ldw	fp,0(sp)
    2904:	dec00104 	addi	sp,sp,4
    2908:	f800283a 	ret

0000290c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    290c:	defffd04 	addi	sp,sp,-12
    2910:	df000215 	stw	fp,8(sp)
    2914:	df000204 	addi	fp,sp,8
    2918:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    291c:	e0bfff17 	ldw	r2,-4(fp)
    2920:	10800a17 	ldw	r2,40(r2)
    2924:	10800104 	addi	r2,r2,4
    2928:	10800037 	ldwio	r2,0(r2)
    292c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    2930:	e0fffe17 	ldw	r3,-8(fp)
    2934:	00bfff84 	movi	r2,-2
    2938:	1884703a 	and	r2,r3,r2
    293c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    2940:	e0bfff17 	ldw	r2,-4(fp)
    2944:	10800a17 	ldw	r2,40(r2)
    2948:	10800104 	addi	r2,r2,4
    294c:	1007883a 	mov	r3,r2
    2950:	e0bffe17 	ldw	r2,-8(fp)
    2954:	18800035 	stwio	r2,0(r3)
}
    2958:	0001883a 	nop
    295c:	e037883a 	mov	sp,fp
    2960:	df000017 	ldw	fp,0(sp)
    2964:	dec00104 	addi	sp,sp,4
    2968:	f800283a 	ret

0000296c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    296c:	defffb04 	addi	sp,sp,-20
    2970:	dfc00415 	stw	ra,16(sp)
    2974:	df000315 	stw	fp,12(sp)
    2978:	df000304 	addi	fp,sp,12
    297c:	e13ffe15 	stw	r4,-8(fp)
    2980:	2805883a 	mov	r2,r5
    2984:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    2988:	e0bffe17 	ldw	r2,-8(fp)
    298c:	10800a17 	ldw	r2,40(r2)
    2990:	1007883a 	mov	r3,r2
    2994:	e0bfff03 	ldbu	r2,-4(fp)
    2998:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    299c:	e0bffe17 	ldw	r2,-8(fp)
    29a0:	10800a17 	ldw	r2,40(r2)
    29a4:	10800104 	addi	r2,r2,4
    29a8:	10800037 	ldwio	r2,0(r2)
    29ac:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    29b0:	e13ffd17 	ldw	r4,-12(fp)
    29b4:	00027240 	call	2724 <read_CE_bit>
    29b8:	10803fcc 	andi	r2,r2,255
    29bc:	10000226 	beq	r2,zero,29c8 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    29c0:	00bffec4 	movi	r2,-5
    29c4:	00000106 	br	29cc <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    29c8:	0005883a 	mov	r2,zero
}
    29cc:	e037883a 	mov	sp,fp
    29d0:	dfc00117 	ldw	ra,4(sp)
    29d4:	df000017 	ldw	fp,0(sp)
    29d8:	dec00204 	addi	sp,sp,8
    29dc:	f800283a 	ret

000029e0 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    29e0:	defffc04 	addi	sp,sp,-16
    29e4:	dfc00315 	stw	ra,12(sp)
    29e8:	df000215 	stw	fp,8(sp)
    29ec:	df000204 	addi	fp,sp,8
    29f0:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    29f4:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    29f8:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    29fc:	e0bffe44 	addi	r2,fp,-7
    2a00:	100b883a 	mov	r5,r2
    2a04:	e13fff17 	ldw	r4,-4(fp)
    2a08:	0002aac0 	call	2aac <alt_up_ps2_read_data_byte_timeout>
    2a0c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    2a10:	e0bffe03 	ldbu	r2,-8(fp)
    2a14:	1000061e 	bne	r2,zero,2a30 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    2a18:	e0bffe43 	ldbu	r2,-7(fp)
    2a1c:	10803fcc 	andi	r2,r2,255
    2a20:	10803e98 	cmpnei	r2,r2,250
    2a24:	103ff51e 	bne	r2,zero,29fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70029fc>
				return 0;
    2a28:	0005883a 	mov	r2,zero
    2a2c:	00000106 	br	2a34 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
    2a30:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
    2a34:	e037883a 	mov	sp,fp
    2a38:	dfc00117 	ldw	ra,4(sp)
    2a3c:	df000017 	ldw	fp,0(sp)
    2a40:	dec00204 	addi	sp,sp,8
    2a44:	f800283a 	ret

00002a48 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    2a48:	defffa04 	addi	sp,sp,-24
    2a4c:	dfc00515 	stw	ra,20(sp)
    2a50:	df000415 	stw	fp,16(sp)
    2a54:	df000404 	addi	fp,sp,16
    2a58:	e13ffe15 	stw	r4,-8(fp)
    2a5c:	2805883a 	mov	r2,r5
    2a60:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    2a64:	e0bfff03 	ldbu	r2,-4(fp)
    2a68:	100b883a 	mov	r5,r2
    2a6c:	e13ffe17 	ldw	r4,-8(fp)
    2a70:	000296c0 	call	296c <alt_up_ps2_write_data_byte>
    2a74:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    2a78:	e0bffc17 	ldw	r2,-16(fp)
    2a7c:	10000226 	beq	r2,zero,2a88 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    2a80:	e0bffc17 	ldw	r2,-16(fp)
    2a84:	00000406 	br	2a98 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    2a88:	e13ffe17 	ldw	r4,-8(fp)
    2a8c:	00029e00 	call	29e0 <alt_up_ps2_wait_for_ack>
    2a90:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    2a94:	e0bffd17 	ldw	r2,-12(fp)
}
    2a98:	e037883a 	mov	sp,fp
    2a9c:	dfc00117 	ldw	ra,4(sp)
    2aa0:	df000017 	ldw	fp,0(sp)
    2aa4:	dec00204 	addi	sp,sp,8
    2aa8:	f800283a 	ret

00002aac <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    2aac:	defffa04 	addi	sp,sp,-24
    2ab0:	dfc00515 	stw	ra,20(sp)
    2ab4:	df000415 	stw	fp,16(sp)
    2ab8:	df000404 	addi	fp,sp,16
    2abc:	e13ffe15 	stw	r4,-8(fp)
    2ac0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    2ac4:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    2ac8:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    2acc:	e0bffc17 	ldw	r2,-16(fp)
    2ad0:	10800044 	addi	r2,r2,1
    2ad4:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    2ad8:	e0bffe17 	ldw	r2,-8(fp)
    2adc:	10800a17 	ldw	r2,40(r2)
    2ae0:	10800037 	ldwio	r2,0(r2)
    2ae4:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    2ae8:	e13ffd17 	ldw	r4,-12(fp)
    2aec:	00027880 	call	2788 <read_data_valid>
    2af0:	10803fcc 	andi	r2,r2,255
    2af4:	10000726 	beq	r2,zero,2b14 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    2af8:	e13ffd17 	ldw	r4,-12(fp)
    2afc:	00027bc0 	call	27bc <read_data_byte>
    2b00:	1007883a 	mov	r3,r2
    2b04:	e0bfff17 	ldw	r2,-4(fp)
    2b08:	10c00005 	stb	r3,0(r2)
			return 0;
    2b0c:	0005883a 	mov	r2,zero
    2b10:	00000806 	br	2b34 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    2b14:	e0bffe17 	ldw	r2,-8(fp)
    2b18:	10800c17 	ldw	r2,48(r2)
    2b1c:	103feb26 	beq	r2,zero,2acc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002acc>
    2b20:	e0bffe17 	ldw	r2,-8(fp)
    2b24:	10c00c17 	ldw	r3,48(r2)
    2b28:	e0bffc17 	ldw	r2,-16(fp)
    2b2c:	18bfe72e 	bgeu	r3,r2,2acc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002acc>
		{
			return -ETIMEDOUT;
    2b30:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    2b34:	e037883a 	mov	sp,fp
    2b38:	dfc00117 	ldw	ra,4(sp)
    2b3c:	df000017 	ldw	fp,0(sp)
    2b40:	dec00204 	addi	sp,sp,8
    2b44:	f800283a 	ret

00002b48 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    2b48:	defffb04 	addi	sp,sp,-20
    2b4c:	dfc00415 	stw	ra,16(sp)
    2b50:	df000315 	stw	fp,12(sp)
    2b54:	df000304 	addi	fp,sp,12
    2b58:	e13ffe15 	stw	r4,-8(fp)
    2b5c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    2b60:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    2b64:	e0bffe17 	ldw	r2,-8(fp)
    2b68:	10800a17 	ldw	r2,40(r2)
    2b6c:	10800037 	ldwio	r2,0(r2)
    2b70:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    2b74:	e13ffd17 	ldw	r4,-12(fp)
    2b78:	00027880 	call	2788 <read_data_valid>
    2b7c:	10803fcc 	andi	r2,r2,255
    2b80:	10000726 	beq	r2,zero,2ba0 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    2b84:	e13ffd17 	ldw	r4,-12(fp)
    2b88:	00027bc0 	call	27bc <read_data_byte>
    2b8c:	1007883a 	mov	r3,r2
    2b90:	e0bfff17 	ldw	r2,-4(fp)
    2b94:	10c00005 	stb	r3,0(r2)
		return 0;
    2b98:	0005883a 	mov	r2,zero
    2b9c:	00000106 	br	2ba4 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    2ba0:	00bfffc4 	movi	r2,-1
}
    2ba4:	e037883a 	mov	sp,fp
    2ba8:	dfc00117 	ldw	ra,4(sp)
    2bac:	df000017 	ldw	fp,0(sp)
    2bb0:	dec00204 	addi	sp,sp,8
    2bb4:	f800283a 	ret

00002bb8 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    2bb8:	defffb04 	addi	sp,sp,-20
    2bbc:	dfc00415 	stw	ra,16(sp)
    2bc0:	df000315 	stw	fp,12(sp)
    2bc4:	df000304 	addi	fp,sp,12
    2bc8:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    2bcc:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    2bd0:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    2bd4:	e0bfff17 	ldw	r2,-4(fp)
    2bd8:	10800a17 	ldw	r2,40(r2)
    2bdc:	10800037 	ldwio	r2,0(r2)
    2be0:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    2be4:	e13ffe17 	ldw	r4,-8(fp)
    2be8:	00027580 	call	2758 <read_num_bytes_available>
    2bec:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    2bf0:	e0bffd0b 	ldhu	r2,-12(fp)
    2bf4:	103ff71e 	bne	r2,zero,2bd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002bd4>
}
    2bf8:	0001883a 	nop
    2bfc:	e037883a 	mov	sp,fp
    2c00:	dfc00117 	ldw	ra,4(sp)
    2c04:	df000017 	ldw	fp,0(sp)
    2c08:	dec00204 	addi	sp,sp,8
    2c0c:	f800283a 	ret

00002c10 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    2c10:	defff804 	addi	sp,sp,-32
    2c14:	dfc00715 	stw	ra,28(sp)
    2c18:	df000615 	stw	fp,24(sp)
    2c1c:	df000604 	addi	fp,sp,24
    2c20:	e13ffd15 	stw	r4,-12(fp)
    2c24:	e17ffe15 	stw	r5,-8(fp)
    2c28:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    2c2c:	e0bffd17 	ldw	r2,-12(fp)
    2c30:	10800017 	ldw	r2,0(r2)
    2c34:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    2c38:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    2c3c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    2c40:	e0fffc17 	ldw	r3,-16(fp)
    2c44:	e0bfff17 	ldw	r2,-4(fp)
    2c48:	18bffd16 	blt	r3,r2,2c40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c40>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    2c4c:	e0bffe17 	ldw	r2,-8(fp)
    2c50:	10c00044 	addi	r3,r2,1
    2c54:	e0fffe15 	stw	r3,-8(fp)
    2c58:	100b883a 	mov	r5,r2
    2c5c:	e13ffa17 	ldw	r4,-24(fp)
    2c60:	0002aac0 	call	2aac <alt_up_ps2_read_data_byte_timeout>
    2c64:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    2c68:	e0bffb17 	ldw	r2,-20(fp)
    2c6c:	10000226 	beq	r2,zero,2c78 <alt_up_ps2_read_fd+0x68>
			return count;
    2c70:	e0bffc17 	ldw	r2,-16(fp)
    2c74:	00000406 	br	2c88 <alt_up_ps2_read_fd+0x78>
		count++;
    2c78:	e0bffc17 	ldw	r2,-16(fp)
    2c7c:	10800044 	addi	r2,r2,1
    2c80:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    2c84:	e0bffc17 	ldw	r2,-16(fp)
}
    2c88:	e037883a 	mov	sp,fp
    2c8c:	dfc00117 	ldw	ra,4(sp)
    2c90:	df000017 	ldw	fp,0(sp)
    2c94:	dec00204 	addi	sp,sp,8
    2c98:	f800283a 	ret

00002c9c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    2c9c:	defff804 	addi	sp,sp,-32
    2ca0:	dfc00715 	stw	ra,28(sp)
    2ca4:	df000615 	stw	fp,24(sp)
    2ca8:	df000604 	addi	fp,sp,24
    2cac:	e13ffd15 	stw	r4,-12(fp)
    2cb0:	e17ffe15 	stw	r5,-8(fp)
    2cb4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    2cb8:	e0bffd17 	ldw	r2,-12(fp)
    2cbc:	10800017 	ldw	r2,0(r2)
    2cc0:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    2cc4:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    2cc8:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    2ccc:	00001006 	br	2d10 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    2cd0:	e0bffe17 	ldw	r2,-8(fp)
    2cd4:	10c00044 	addi	r3,r2,1
    2cd8:	e0fffe15 	stw	r3,-8(fp)
    2cdc:	10800003 	ldbu	r2,0(r2)
    2ce0:	10803fcc 	andi	r2,r2,255
    2ce4:	100b883a 	mov	r5,r2
    2ce8:	e13ffb17 	ldw	r4,-20(fp)
    2cec:	000296c0 	call	296c <alt_up_ps2_write_data_byte>
    2cf0:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    2cf4:	e0bffc17 	ldw	r2,-16(fp)
    2cf8:	10000226 	beq	r2,zero,2d04 <alt_up_ps2_write_fd+0x68>
			return count;
    2cfc:	e0bffa17 	ldw	r2,-24(fp)
    2d00:	00000706 	br	2d20 <alt_up_ps2_write_fd+0x84>
		count++;
    2d04:	e0bffa17 	ldw	r2,-24(fp)
    2d08:	10800044 	addi	r2,r2,1
    2d0c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    2d10:	e0fffa17 	ldw	r3,-24(fp)
    2d14:	e0bfff17 	ldw	r2,-4(fp)
    2d18:	18bfed16 	blt	r3,r2,2cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cd0>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    2d1c:	e0bffa17 	ldw	r2,-24(fp)
}
    2d20:	e037883a 	mov	sp,fp
    2d24:	dfc00117 	ldw	ra,4(sp)
    2d28:	df000017 	ldw	fp,0(sp)
    2d2c:	dec00204 	addi	sp,sp,8
    2d30:	f800283a 	ret

00002d34 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    2d34:	defffc04 	addi	sp,sp,-16
    2d38:	dfc00315 	stw	ra,12(sp)
    2d3c:	df000215 	stw	fp,8(sp)
    2d40:	df000204 	addi	fp,sp,8
    2d44:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    2d48:	01400034 	movhi	r5,0
    2d4c:	2957ab04 	addi	r5,r5,24236
    2d50:	e13fff17 	ldw	r4,-4(fp)
    2d54:	00035680 	call	3568 <alt_find_dev>
    2d58:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    2d5c:	e0bffe17 	ldw	r2,-8(fp)
}
    2d60:	e037883a 	mov	sp,fp
    2d64:	dfc00117 	ldw	ra,4(sp)
    2d68:	df000017 	ldw	fp,0(sp)
    2d6c:	dec00204 	addi	sp,sp,8
    2d70:	f800283a 	ret

00002d74 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    2d74:	defffd04 	addi	sp,sp,-12
    2d78:	df000215 	stw	fp,8(sp)
    2d7c:	df000204 	addi	fp,sp,8
    2d80:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    2d84:	e0bfff17 	ldw	r2,-4(fp)
    2d88:	10800a17 	ldw	r2,40(r2)
    2d8c:	10800104 	addi	r2,r2,4
    2d90:	10800037 	ldwio	r2,0(r2)
    2d94:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    2d98:	e0bffe17 	ldw	r2,-8(fp)
    2d9c:	10800054 	ori	r2,r2,1
    2da0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    2da4:	e0bfff17 	ldw	r2,-4(fp)
    2da8:	10800a17 	ldw	r2,40(r2)
    2dac:	10800104 	addi	r2,r2,4
    2db0:	1007883a 	mov	r3,r2
    2db4:	e0bffe17 	ldw	r2,-8(fp)
    2db8:	18800035 	stwio	r2,0(r3)
}
    2dbc:	0001883a 	nop
    2dc0:	e037883a 	mov	sp,fp
    2dc4:	df000017 	ldw	fp,0(sp)
    2dc8:	dec00104 	addi	sp,sp,4
    2dcc:	f800283a 	ret

00002dd0 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    2dd0:	defffd04 	addi	sp,sp,-12
    2dd4:	df000215 	stw	fp,8(sp)
    2dd8:	df000204 	addi	fp,sp,8
    2ddc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    2de0:	e0bfff17 	ldw	r2,-4(fp)
    2de4:	10800a17 	ldw	r2,40(r2)
    2de8:	10800104 	addi	r2,r2,4
    2dec:	10800037 	ldwio	r2,0(r2)
    2df0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    2df4:	e0fffe17 	ldw	r3,-8(fp)
    2df8:	00bfff84 	movi	r2,-2
    2dfc:	1884703a 	and	r2,r3,r2
    2e00:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    2e04:	e0bfff17 	ldw	r2,-4(fp)
    2e08:	10800a17 	ldw	r2,40(r2)
    2e0c:	10800104 	addi	r2,r2,4
    2e10:	1007883a 	mov	r3,r2
    2e14:	e0bffe17 	ldw	r2,-8(fp)
    2e18:	18800035 	stwio	r2,0(r3)
}
    2e1c:	0001883a 	nop
    2e20:	e037883a 	mov	sp,fp
    2e24:	df000017 	ldw	fp,0(sp)
    2e28:	dec00104 	addi	sp,sp,4
    2e2c:	f800283a 	ret

00002e30 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    2e30:	defffd04 	addi	sp,sp,-12
    2e34:	df000215 	stw	fp,8(sp)
    2e38:	df000204 	addi	fp,sp,8
    2e3c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    2e40:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    2e44:	e0bfff17 	ldw	r2,-4(fp)
    2e48:	10800a17 	ldw	r2,40(r2)
    2e4c:	10800084 	addi	r2,r2,2
    2e50:	1080002b 	ldhuio	r2,0(r2)
    2e54:	10bfffcc 	andi	r2,r2,65535
    2e58:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    2e5c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    2e60:	e037883a 	mov	sp,fp
    2e64:	df000017 	ldw	fp,0(sp)
    2e68:	dec00104 	addi	sp,sp,4
    2e6c:	f800283a 	ret

00002e70 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    2e70:	defffd04 	addi	sp,sp,-12
    2e74:	df000215 	stw	fp,8(sp)
    2e78:	df000204 	addi	fp,sp,8
    2e7c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    2e80:	e0bfff17 	ldw	r2,-4(fp)
    2e84:	10800a17 	ldw	r2,40(r2)
    2e88:	10800104 	addi	r2,r2,4
    2e8c:	10800037 	ldwio	r2,0(r2)
    2e90:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    2e94:	e0bffe17 	ldw	r2,-8(fp)
    2e98:	1004d43a 	srli	r2,r2,16
}
    2e9c:	e037883a 	mov	sp,fp
    2ea0:	df000017 	ldw	fp,0(sp)
    2ea4:	dec00104 	addi	sp,sp,4
    2ea8:	f800283a 	ret

00002eac <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    2eac:	defffd04 	addi	sp,sp,-12
    2eb0:	df000215 	stw	fp,8(sp)
    2eb4:	df000204 	addi	fp,sp,8
    2eb8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    2ebc:	e0bfff17 	ldw	r2,-4(fp)
    2ec0:	1080800c 	andi	r2,r2,512
    2ec4:	1004d27a 	srli	r2,r2,9
    2ec8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    2ecc:	e0bffe17 	ldw	r2,-8(fp)
    2ed0:	10000226 	beq	r2,zero,2edc <alt_up_rs232_check_parity+0x30>
    2ed4:	00bfffc4 	movi	r2,-1
    2ed8:	00000106 	br	2ee0 <alt_up_rs232_check_parity+0x34>
    2edc:	0005883a 	mov	r2,zero
}
    2ee0:	e037883a 	mov	sp,fp
    2ee4:	df000017 	ldw	fp,0(sp)
    2ee8:	dec00104 	addi	sp,sp,4
    2eec:	f800283a 	ret

00002ef0 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    2ef0:	defffd04 	addi	sp,sp,-12
    2ef4:	df000215 	stw	fp,8(sp)
    2ef8:	df000204 	addi	fp,sp,8
    2efc:	e13ffe15 	stw	r4,-8(fp)
    2f00:	2805883a 	mov	r2,r5
    2f04:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    2f08:	e0bffe17 	ldw	r2,-8(fp)
    2f0c:	10800a17 	ldw	r2,40(r2)
    2f10:	1007883a 	mov	r3,r2
    2f14:	e0bfff03 	ldbu	r2,-4(fp)
    2f18:	18800035 	stwio	r2,0(r3)
	return 0;
    2f1c:	0005883a 	mov	r2,zero
}
    2f20:	e037883a 	mov	sp,fp
    2f24:	df000017 	ldw	fp,0(sp)
    2f28:	dec00104 	addi	sp,sp,4
    2f2c:	f800283a 	ret

00002f30 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    2f30:	defffa04 	addi	sp,sp,-24
    2f34:	dfc00515 	stw	ra,20(sp)
    2f38:	df000415 	stw	fp,16(sp)
    2f3c:	df000404 	addi	fp,sp,16
    2f40:	e13ffd15 	stw	r4,-12(fp)
    2f44:	e17ffe15 	stw	r5,-8(fp)
    2f48:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    2f4c:	e0bffd17 	ldw	r2,-12(fp)
    2f50:	10800a17 	ldw	r2,40(r2)
    2f54:	10800037 	ldwio	r2,0(r2)
    2f58:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    2f5c:	e0bffc17 	ldw	r2,-16(fp)
    2f60:	1007883a 	mov	r3,r2
    2f64:	e0bffe17 	ldw	r2,-8(fp)
    2f68:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    2f6c:	e13ffc17 	ldw	r4,-16(fp)
    2f70:	0002eac0 	call	2eac <alt_up_rs232_check_parity>
    2f74:	1007883a 	mov	r3,r2
    2f78:	e0bfff17 	ldw	r2,-4(fp)
    2f7c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    2f80:	e0bffc17 	ldw	r2,-16(fp)
    2f84:	10a0000c 	andi	r2,r2,32768
    2f88:	1004d3fa 	srli	r2,r2,15
    2f8c:	10bfffc4 	addi	r2,r2,-1
}
    2f90:	e037883a 	mov	sp,fp
    2f94:	dfc00117 	ldw	ra,4(sp)
    2f98:	df000017 	ldw	fp,0(sp)
    2f9c:	dec00204 	addi	sp,sp,8
    2fa0:	f800283a 	ret

00002fa4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    2fa4:	defff804 	addi	sp,sp,-32
    2fa8:	dfc00715 	stw	ra,28(sp)
    2fac:	df000615 	stw	fp,24(sp)
    2fb0:	df000604 	addi	fp,sp,24
    2fb4:	e13ffd15 	stw	r4,-12(fp)
    2fb8:	e17ffe15 	stw	r5,-8(fp)
    2fbc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    2fc0:	e0bffd17 	ldw	r2,-12(fp)
    2fc4:	10800017 	ldw	r2,0(r2)
    2fc8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    2fcc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    2fd0:	00000c06 	br	3004 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    2fd4:	e0bffe17 	ldw	r2,-8(fp)
    2fd8:	10c00044 	addi	r3,r2,1
    2fdc:	e0fffe15 	stw	r3,-8(fp)
    2fe0:	e0fffc04 	addi	r3,fp,-16
    2fe4:	180d883a 	mov	r6,r3
    2fe8:	100b883a 	mov	r5,r2
    2fec:	e13ffb17 	ldw	r4,-20(fp)
    2ff0:	0002f300 	call	2f30 <alt_up_rs232_read_data>
    2ff4:	1000081e 	bne	r2,zero,3018 <alt_up_rs232_read_fd+0x74>
			count++;
    2ff8:	e0bffa17 	ldw	r2,-24(fp)
    2ffc:	10800044 	addi	r2,r2,1
    3000:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    3004:	e0bfff17 	ldw	r2,-4(fp)
    3008:	10ffffc4 	addi	r3,r2,-1
    300c:	e0ffff15 	stw	r3,-4(fp)
    3010:	103ff01e 	bne	r2,zero,2fd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002fd4>
    3014:	00000106 	br	301c <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    3018:	0001883a 	nop
	}
	return count;
    301c:	e0bffa17 	ldw	r2,-24(fp)
}
    3020:	e037883a 	mov	sp,fp
    3024:	dfc00117 	ldw	ra,4(sp)
    3028:	df000017 	ldw	fp,0(sp)
    302c:	dec00204 	addi	sp,sp,8
    3030:	f800283a 	ret

00003034 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    3034:	defff904 	addi	sp,sp,-28
    3038:	dfc00615 	stw	ra,24(sp)
    303c:	df000515 	stw	fp,20(sp)
    3040:	df000504 	addi	fp,sp,20
    3044:	e13ffd15 	stw	r4,-12(fp)
    3048:	e17ffe15 	stw	r5,-8(fp)
    304c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    3050:	e0bffd17 	ldw	r2,-12(fp)
    3054:	10800017 	ldw	r2,0(r2)
    3058:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    305c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    3060:	00000d06 	br	3098 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    3064:	e0bffe17 	ldw	r2,-8(fp)
    3068:	10800003 	ldbu	r2,0(r2)
    306c:	10803fcc 	andi	r2,r2,255
    3070:	100b883a 	mov	r5,r2
    3074:	e13ffc17 	ldw	r4,-16(fp)
    3078:	0002ef00 	call	2ef0 <alt_up_rs232_write_data>
    307c:	10000b1e 	bne	r2,zero,30ac <alt_up_rs232_write_fd+0x78>
		{
			count++;
    3080:	e0bffb17 	ldw	r2,-20(fp)
    3084:	10800044 	addi	r2,r2,1
    3088:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    308c:	e0bffe17 	ldw	r2,-8(fp)
    3090:	10800044 	addi	r2,r2,1
    3094:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    3098:	e0bfff17 	ldw	r2,-4(fp)
    309c:	10ffffc4 	addi	r3,r2,-1
    30a0:	e0ffff15 	stw	r3,-4(fp)
    30a4:	103fef1e 	bne	r2,zero,3064 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003064>
    30a8:	00000106 	br	30b0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
    30ac:	0001883a 	nop
	}
	return count;
    30b0:	e0bffb17 	ldw	r2,-20(fp)
}
    30b4:	e037883a 	mov	sp,fp
    30b8:	dfc00117 	ldw	ra,4(sp)
    30bc:	df000017 	ldw	fp,0(sp)
    30c0:	dec00204 	addi	sp,sp,8
    30c4:	f800283a 	ret

000030c8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    30c8:	defffc04 	addi	sp,sp,-16
    30cc:	dfc00315 	stw	ra,12(sp)
    30d0:	df000215 	stw	fp,8(sp)
    30d4:	df000204 	addi	fp,sp,8
    30d8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    30dc:	01400034 	movhi	r5,0
    30e0:	2957ab04 	addi	r5,r5,24236
    30e4:	e13fff17 	ldw	r4,-4(fp)
    30e8:	00035680 	call	3568 <alt_find_dev>
    30ec:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    30f0:	e0bffe17 	ldw	r2,-8(fp)
}
    30f4:	e037883a 	mov	sp,fp
    30f8:	dfc00117 	ldw	ra,4(sp)
    30fc:	df000017 	ldw	fp,0(sp)
    3100:	dec00204 	addi	sp,sp,8
    3104:	f800283a 	ret

00003108 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    3108:	defff504 	addi	sp,sp,-44
    310c:	df000a15 	stw	fp,40(sp)
    3110:	df000a04 	addi	fp,sp,40
    3114:	e13ffc15 	stw	r4,-16(fp)
    3118:	e17ffd15 	stw	r5,-12(fp)
    311c:	e1bffe15 	stw	r6,-8(fp)
    3120:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    3124:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3128:	00800034 	movhi	r2,0
    312c:	109e1e04 	addi	r2,r2,30840
    3130:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    3134:	10003f26 	beq	r2,zero,3234 <alt_alarm_start+0x12c>
  {
    if (alarm)
    3138:	e0bffc17 	ldw	r2,-16(fp)
    313c:	10003b26 	beq	r2,zero,322c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    3140:	e0bffc17 	ldw	r2,-16(fp)
    3144:	e0fffe17 	ldw	r3,-8(fp)
    3148:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    314c:	e0bffc17 	ldw	r2,-16(fp)
    3150:	e0ffff17 	ldw	r3,-4(fp)
    3154:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3158:	0005303a 	rdctl	r2,status
    315c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3160:	e0fff917 	ldw	r3,-28(fp)
    3164:	00bfff84 	movi	r2,-2
    3168:	1884703a 	and	r2,r3,r2
    316c:	1001703a 	wrctl	status,r2
  
  return context;
    3170:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    3174:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    3178:	00800034 	movhi	r2,0
    317c:	109e1f04 	addi	r2,r2,30844
    3180:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    3184:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    3188:	e0fffd17 	ldw	r3,-12(fp)
    318c:	e0bff617 	ldw	r2,-40(fp)
    3190:	1885883a 	add	r2,r3,r2
    3194:	10c00044 	addi	r3,r2,1
    3198:	e0bffc17 	ldw	r2,-16(fp)
    319c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    31a0:	e0bffc17 	ldw	r2,-16(fp)
    31a4:	10c00217 	ldw	r3,8(r2)
    31a8:	e0bff617 	ldw	r2,-40(fp)
    31ac:	1880042e 	bgeu	r3,r2,31c0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    31b0:	e0bffc17 	ldw	r2,-16(fp)
    31b4:	00c00044 	movi	r3,1
    31b8:	10c00405 	stb	r3,16(r2)
    31bc:	00000206 	br	31c8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    31c0:	e0bffc17 	ldw	r2,-16(fp)
    31c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    31c8:	e0fffc17 	ldw	r3,-16(fp)
    31cc:	00800034 	movhi	r2,0
    31d0:	1097af04 	addi	r2,r2,24252
    31d4:	e0bffa15 	stw	r2,-24(fp)
    31d8:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    31dc:	e0bffb17 	ldw	r2,-20(fp)
    31e0:	e0fffa17 	ldw	r3,-24(fp)
    31e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    31e8:	e0bffa17 	ldw	r2,-24(fp)
    31ec:	10c00017 	ldw	r3,0(r2)
    31f0:	e0bffb17 	ldw	r2,-20(fp)
    31f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    31f8:	e0bffa17 	ldw	r2,-24(fp)
    31fc:	10800017 	ldw	r2,0(r2)
    3200:	e0fffb17 	ldw	r3,-20(fp)
    3204:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    3208:	e0bffa17 	ldw	r2,-24(fp)
    320c:	e0fffb17 	ldw	r3,-20(fp)
    3210:	10c00015 	stw	r3,0(r2)
    3214:	e0bff817 	ldw	r2,-32(fp)
    3218:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    321c:	e0bff717 	ldw	r2,-36(fp)
    3220:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    3224:	0005883a 	mov	r2,zero
    3228:	00000306 	br	3238 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    322c:	00bffa84 	movi	r2,-22
    3230:	00000106 	br	3238 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    3234:	00bfde84 	movi	r2,-134
  }
}
    3238:	e037883a 	mov	sp,fp
    323c:	df000017 	ldw	fp,0(sp)
    3240:	dec00104 	addi	sp,sp,4
    3244:	f800283a 	ret

00003248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3248:	defffe04 	addi	sp,sp,-8
    324c:	dfc00115 	stw	ra,4(sp)
    3250:	df000015 	stw	fp,0(sp)
    3254:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3258:	00800034 	movhi	r2,0
    325c:	1097ae04 	addi	r2,r2,24248
    3260:	10800017 	ldw	r2,0(r2)
    3264:	10000526 	beq	r2,zero,327c <alt_get_errno+0x34>
    3268:	00800034 	movhi	r2,0
    326c:	1097ae04 	addi	r2,r2,24248
    3270:	10800017 	ldw	r2,0(r2)
    3274:	103ee83a 	callr	r2
    3278:	00000206 	br	3284 <alt_get_errno+0x3c>
    327c:	00800034 	movhi	r2,0
    3280:	109e2104 	addi	r2,r2,30852
}
    3284:	e037883a 	mov	sp,fp
    3288:	dfc00117 	ldw	ra,4(sp)
    328c:	df000017 	ldw	fp,0(sp)
    3290:	dec00204 	addi	sp,sp,8
    3294:	f800283a 	ret

00003298 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    3298:	defffb04 	addi	sp,sp,-20
    329c:	dfc00415 	stw	ra,16(sp)
    32a0:	df000315 	stw	fp,12(sp)
    32a4:	df000304 	addi	fp,sp,12
    32a8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    32ac:	e0bfff17 	ldw	r2,-4(fp)
    32b0:	10000616 	blt	r2,zero,32cc <close+0x34>
    32b4:	e0bfff17 	ldw	r2,-4(fp)
    32b8:	10c00324 	muli	r3,r2,12
    32bc:	00800034 	movhi	r2,0
    32c0:	10963f04 	addi	r2,r2,22780
    32c4:	1885883a 	add	r2,r3,r2
    32c8:	00000106 	br	32d0 <close+0x38>
    32cc:	0005883a 	mov	r2,zero
    32d0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    32d4:	e0bffd17 	ldw	r2,-12(fp)
    32d8:	10001926 	beq	r2,zero,3340 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    32dc:	e0bffd17 	ldw	r2,-12(fp)
    32e0:	10800017 	ldw	r2,0(r2)
    32e4:	10800417 	ldw	r2,16(r2)
    32e8:	10000626 	beq	r2,zero,3304 <close+0x6c>
    32ec:	e0bffd17 	ldw	r2,-12(fp)
    32f0:	10800017 	ldw	r2,0(r2)
    32f4:	10800417 	ldw	r2,16(r2)
    32f8:	e13ffd17 	ldw	r4,-12(fp)
    32fc:	103ee83a 	callr	r2
    3300:	00000106 	br	3308 <close+0x70>
    3304:	0005883a 	mov	r2,zero
    3308:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    330c:	e13fff17 	ldw	r4,-4(fp)
    3310:	00039e00 	call	39e0 <alt_release_fd>
    if (rval < 0)
    3314:	e0bffe17 	ldw	r2,-8(fp)
    3318:	1000070e 	bge	r2,zero,3338 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    331c:	00032480 	call	3248 <alt_get_errno>
    3320:	1007883a 	mov	r3,r2
    3324:	e0bffe17 	ldw	r2,-8(fp)
    3328:	0085c83a 	sub	r2,zero,r2
    332c:	18800015 	stw	r2,0(r3)
      return -1;
    3330:	00bfffc4 	movi	r2,-1
    3334:	00000706 	br	3354 <close+0xbc>
    }
    return 0;
    3338:	0005883a 	mov	r2,zero
    333c:	00000506 	br	3354 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3340:	00032480 	call	3248 <alt_get_errno>
    3344:	1007883a 	mov	r3,r2
    3348:	00801444 	movi	r2,81
    334c:	18800015 	stw	r2,0(r3)
    return -1;
    3350:	00bfffc4 	movi	r2,-1
  }
}
    3354:	e037883a 	mov	sp,fp
    3358:	dfc00117 	ldw	ra,4(sp)
    335c:	df000017 	ldw	fp,0(sp)
    3360:	dec00204 	addi	sp,sp,8
    3364:	f800283a 	ret

00003368 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    3368:	deffff04 	addi	sp,sp,-4
    336c:	df000015 	stw	fp,0(sp)
    3370:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    3374:	0001883a 	nop
    3378:	e037883a 	mov	sp,fp
    337c:	df000017 	ldw	fp,0(sp)
    3380:	dec00104 	addi	sp,sp,4
    3384:	f800283a 	ret

00003388 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3388:	defffc04 	addi	sp,sp,-16
    338c:	df000315 	stw	fp,12(sp)
    3390:	df000304 	addi	fp,sp,12
    3394:	e13ffd15 	stw	r4,-12(fp)
    3398:	e17ffe15 	stw	r5,-8(fp)
    339c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    33a0:	e0bfff17 	ldw	r2,-4(fp)
}
    33a4:	e037883a 	mov	sp,fp
    33a8:	df000017 	ldw	fp,0(sp)
    33ac:	dec00104 	addi	sp,sp,4
    33b0:	f800283a 	ret

000033b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    33b4:	defffe04 	addi	sp,sp,-8
    33b8:	dfc00115 	stw	ra,4(sp)
    33bc:	df000015 	stw	fp,0(sp)
    33c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    33c4:	00800034 	movhi	r2,0
    33c8:	1097ae04 	addi	r2,r2,24248
    33cc:	10800017 	ldw	r2,0(r2)
    33d0:	10000526 	beq	r2,zero,33e8 <alt_get_errno+0x34>
    33d4:	00800034 	movhi	r2,0
    33d8:	1097ae04 	addi	r2,r2,24248
    33dc:	10800017 	ldw	r2,0(r2)
    33e0:	103ee83a 	callr	r2
    33e4:	00000206 	br	33f0 <alt_get_errno+0x3c>
    33e8:	00800034 	movhi	r2,0
    33ec:	109e2104 	addi	r2,r2,30852
}
    33f0:	e037883a 	mov	sp,fp
    33f4:	dfc00117 	ldw	ra,4(sp)
    33f8:	df000017 	ldw	fp,0(sp)
    33fc:	dec00204 	addi	sp,sp,8
    3400:	f800283a 	ret

00003404 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    3404:	defffa04 	addi	sp,sp,-24
    3408:	dfc00515 	stw	ra,20(sp)
    340c:	df000415 	stw	fp,16(sp)
    3410:	df000404 	addi	fp,sp,16
    3414:	e13ffe15 	stw	r4,-8(fp)
    3418:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    341c:	e0bffe17 	ldw	r2,-8(fp)
    3420:	10000326 	beq	r2,zero,3430 <alt_dev_llist_insert+0x2c>
    3424:	e0bffe17 	ldw	r2,-8(fp)
    3428:	10800217 	ldw	r2,8(r2)
    342c:	1000061e 	bne	r2,zero,3448 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    3430:	00033b40 	call	33b4 <alt_get_errno>
    3434:	1007883a 	mov	r3,r2
    3438:	00800584 	movi	r2,22
    343c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    3440:	00bffa84 	movi	r2,-22
    3444:	00001306 	br	3494 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    3448:	e0bffe17 	ldw	r2,-8(fp)
    344c:	e0ffff17 	ldw	r3,-4(fp)
    3450:	e0fffc15 	stw	r3,-16(fp)
    3454:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    3458:	e0bffd17 	ldw	r2,-12(fp)
    345c:	e0fffc17 	ldw	r3,-16(fp)
    3460:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    3464:	e0bffc17 	ldw	r2,-16(fp)
    3468:	10c00017 	ldw	r3,0(r2)
    346c:	e0bffd17 	ldw	r2,-12(fp)
    3470:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3474:	e0bffc17 	ldw	r2,-16(fp)
    3478:	10800017 	ldw	r2,0(r2)
    347c:	e0fffd17 	ldw	r3,-12(fp)
    3480:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    3484:	e0bffc17 	ldw	r2,-16(fp)
    3488:	e0fffd17 	ldw	r3,-12(fp)
    348c:	10c00015 	stw	r3,0(r2)

  return 0;  
    3490:	0005883a 	mov	r2,zero
}
    3494:	e037883a 	mov	sp,fp
    3498:	dfc00117 	ldw	ra,4(sp)
    349c:	df000017 	ldw	fp,0(sp)
    34a0:	dec00204 	addi	sp,sp,8
    34a4:	f800283a 	ret

000034a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    34a8:	defffd04 	addi	sp,sp,-12
    34ac:	dfc00215 	stw	ra,8(sp)
    34b0:	df000115 	stw	fp,4(sp)
    34b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    34b8:	00800034 	movhi	r2,0
    34bc:	1090ca04 	addi	r2,r2,17192
    34c0:	e0bfff15 	stw	r2,-4(fp)
    34c4:	00000606 	br	34e0 <_do_ctors+0x38>
        (*ctor) (); 
    34c8:	e0bfff17 	ldw	r2,-4(fp)
    34cc:	10800017 	ldw	r2,0(r2)
    34d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    34d4:	e0bfff17 	ldw	r2,-4(fp)
    34d8:	10bfff04 	addi	r2,r2,-4
    34dc:	e0bfff15 	stw	r2,-4(fp)
    34e0:	e0ffff17 	ldw	r3,-4(fp)
    34e4:	00800034 	movhi	r2,0
    34e8:	1090cb04 	addi	r2,r2,17196
    34ec:	18bff62e 	bgeu	r3,r2,34c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70034c8>
        (*ctor) (); 
}
    34f0:	0001883a 	nop
    34f4:	e037883a 	mov	sp,fp
    34f8:	dfc00117 	ldw	ra,4(sp)
    34fc:	df000017 	ldw	fp,0(sp)
    3500:	dec00204 	addi	sp,sp,8
    3504:	f800283a 	ret

00003508 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    3508:	defffd04 	addi	sp,sp,-12
    350c:	dfc00215 	stw	ra,8(sp)
    3510:	df000115 	stw	fp,4(sp)
    3514:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3518:	00800034 	movhi	r2,0
    351c:	1090ca04 	addi	r2,r2,17192
    3520:	e0bfff15 	stw	r2,-4(fp)
    3524:	00000606 	br	3540 <_do_dtors+0x38>
        (*dtor) (); 
    3528:	e0bfff17 	ldw	r2,-4(fp)
    352c:	10800017 	ldw	r2,0(r2)
    3530:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3534:	e0bfff17 	ldw	r2,-4(fp)
    3538:	10bfff04 	addi	r2,r2,-4
    353c:	e0bfff15 	stw	r2,-4(fp)
    3540:	e0ffff17 	ldw	r3,-4(fp)
    3544:	00800034 	movhi	r2,0
    3548:	1090cb04 	addi	r2,r2,17196
    354c:	18bff62e 	bgeu	r3,r2,3528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003528>
        (*dtor) (); 
}
    3550:	0001883a 	nop
    3554:	e037883a 	mov	sp,fp
    3558:	dfc00117 	ldw	ra,4(sp)
    355c:	df000017 	ldw	fp,0(sp)
    3560:	dec00204 	addi	sp,sp,8
    3564:	f800283a 	ret

00003568 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    3568:	defffa04 	addi	sp,sp,-24
    356c:	dfc00515 	stw	ra,20(sp)
    3570:	df000415 	stw	fp,16(sp)
    3574:	df000404 	addi	fp,sp,16
    3578:	e13ffe15 	stw	r4,-8(fp)
    357c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    3580:	e0bfff17 	ldw	r2,-4(fp)
    3584:	10800017 	ldw	r2,0(r2)
    3588:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    358c:	e13ffe17 	ldw	r4,-8(fp)
    3590:	0003fc80 	call	3fc8 <strlen>
    3594:	10800044 	addi	r2,r2,1
    3598:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    359c:	00000d06 	br	35d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    35a0:	e0bffc17 	ldw	r2,-16(fp)
    35a4:	10800217 	ldw	r2,8(r2)
    35a8:	e0fffd17 	ldw	r3,-12(fp)
    35ac:	180d883a 	mov	r6,r3
    35b0:	e17ffe17 	ldw	r5,-8(fp)
    35b4:	1009883a 	mov	r4,r2
    35b8:	0003f4c0 	call	3f4c <memcmp>
    35bc:	1000021e 	bne	r2,zero,35c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    35c0:	e0bffc17 	ldw	r2,-16(fp)
    35c4:	00000706 	br	35e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    35c8:	e0bffc17 	ldw	r2,-16(fp)
    35cc:	10800017 	ldw	r2,0(r2)
    35d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    35d4:	e0fffc17 	ldw	r3,-16(fp)
    35d8:	e0bfff17 	ldw	r2,-4(fp)
    35dc:	18bff01e 	bne	r3,r2,35a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70035a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    35e0:	0005883a 	mov	r2,zero
}
    35e4:	e037883a 	mov	sp,fp
    35e8:	dfc00117 	ldw	ra,4(sp)
    35ec:	df000017 	ldw	fp,0(sp)
    35f0:	dec00204 	addi	sp,sp,8
    35f4:	f800283a 	ret

000035f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    35f8:	defffe04 	addi	sp,sp,-8
    35fc:	dfc00115 	stw	ra,4(sp)
    3600:	df000015 	stw	fp,0(sp)
    3604:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    3608:	01440004 	movi	r5,4096
    360c:	0009883a 	mov	r4,zero
    3610:	0003dd40 	call	3dd4 <alt_icache_flush>
#endif
}
    3614:	0001883a 	nop
    3618:	e037883a 	mov	sp,fp
    361c:	dfc00117 	ldw	ra,4(sp)
    3620:	df000017 	ldw	fp,0(sp)
    3624:	dec00204 	addi	sp,sp,8
    3628:	f800283a 	ret

0000362c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    362c:	defff904 	addi	sp,sp,-28
    3630:	dfc00615 	stw	ra,24(sp)
    3634:	df000515 	stw	fp,20(sp)
    3638:	df000504 	addi	fp,sp,20
    363c:	e13ffc15 	stw	r4,-16(fp)
    3640:	e17ffd15 	stw	r5,-12(fp)
    3644:	e1bffe15 	stw	r6,-8(fp)
    3648:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    364c:	e1bfff17 	ldw	r6,-4(fp)
    3650:	e17ffe17 	ldw	r5,-8(fp)
    3654:	e13ffd17 	ldw	r4,-12(fp)
    3658:	00038880 	call	3888 <open>
    365c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    3660:	e0bffb17 	ldw	r2,-20(fp)
    3664:	10001c16 	blt	r2,zero,36d8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    3668:	00800034 	movhi	r2,0
    366c:	10963f04 	addi	r2,r2,22780
    3670:	e0fffb17 	ldw	r3,-20(fp)
    3674:	18c00324 	muli	r3,r3,12
    3678:	10c5883a 	add	r2,r2,r3
    367c:	10c00017 	ldw	r3,0(r2)
    3680:	e0bffc17 	ldw	r2,-16(fp)
    3684:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    3688:	00800034 	movhi	r2,0
    368c:	10963f04 	addi	r2,r2,22780
    3690:	e0fffb17 	ldw	r3,-20(fp)
    3694:	18c00324 	muli	r3,r3,12
    3698:	10c5883a 	add	r2,r2,r3
    369c:	10800104 	addi	r2,r2,4
    36a0:	10c00017 	ldw	r3,0(r2)
    36a4:	e0bffc17 	ldw	r2,-16(fp)
    36a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    36ac:	00800034 	movhi	r2,0
    36b0:	10963f04 	addi	r2,r2,22780
    36b4:	e0fffb17 	ldw	r3,-20(fp)
    36b8:	18c00324 	muli	r3,r3,12
    36bc:	10c5883a 	add	r2,r2,r3
    36c0:	10800204 	addi	r2,r2,8
    36c4:	10c00017 	ldw	r3,0(r2)
    36c8:	e0bffc17 	ldw	r2,-16(fp)
    36cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    36d0:	e13ffb17 	ldw	r4,-20(fp)
    36d4:	00039e00 	call	39e0 <alt_release_fd>
  }
} 
    36d8:	0001883a 	nop
    36dc:	e037883a 	mov	sp,fp
    36e0:	dfc00117 	ldw	ra,4(sp)
    36e4:	df000017 	ldw	fp,0(sp)
    36e8:	dec00204 	addi	sp,sp,8
    36ec:	f800283a 	ret

000036f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    36f0:	defffb04 	addi	sp,sp,-20
    36f4:	dfc00415 	stw	ra,16(sp)
    36f8:	df000315 	stw	fp,12(sp)
    36fc:	df000304 	addi	fp,sp,12
    3700:	e13ffd15 	stw	r4,-12(fp)
    3704:	e17ffe15 	stw	r5,-8(fp)
    3708:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    370c:	01c07fc4 	movi	r7,511
    3710:	01800044 	movi	r6,1
    3714:	e17ffd17 	ldw	r5,-12(fp)
    3718:	01000034 	movhi	r4,0
    371c:	21164204 	addi	r4,r4,22792
    3720:	000362c0 	call	362c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    3724:	01c07fc4 	movi	r7,511
    3728:	000d883a 	mov	r6,zero
    372c:	e17ffe17 	ldw	r5,-8(fp)
    3730:	01000034 	movhi	r4,0
    3734:	21163f04 	addi	r4,r4,22780
    3738:	000362c0 	call	362c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    373c:	01c07fc4 	movi	r7,511
    3740:	01800044 	movi	r6,1
    3744:	e17fff17 	ldw	r5,-4(fp)
    3748:	01000034 	movhi	r4,0
    374c:	21164504 	addi	r4,r4,22804
    3750:	000362c0 	call	362c <alt_open_fd>
}  
    3754:	0001883a 	nop
    3758:	e037883a 	mov	sp,fp
    375c:	dfc00117 	ldw	ra,4(sp)
    3760:	df000017 	ldw	fp,0(sp)
    3764:	dec00204 	addi	sp,sp,8
    3768:	f800283a 	ret

0000376c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    376c:	defffe04 	addi	sp,sp,-8
    3770:	dfc00115 	stw	ra,4(sp)
    3774:	df000015 	stw	fp,0(sp)
    3778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    377c:	00800034 	movhi	r2,0
    3780:	1097ae04 	addi	r2,r2,24248
    3784:	10800017 	ldw	r2,0(r2)
    3788:	10000526 	beq	r2,zero,37a0 <alt_get_errno+0x34>
    378c:	00800034 	movhi	r2,0
    3790:	1097ae04 	addi	r2,r2,24248
    3794:	10800017 	ldw	r2,0(r2)
    3798:	103ee83a 	callr	r2
    379c:	00000206 	br	37a8 <alt_get_errno+0x3c>
    37a0:	00800034 	movhi	r2,0
    37a4:	109e2104 	addi	r2,r2,30852
}
    37a8:	e037883a 	mov	sp,fp
    37ac:	dfc00117 	ldw	ra,4(sp)
    37b0:	df000017 	ldw	fp,0(sp)
    37b4:	dec00204 	addi	sp,sp,8
    37b8:	f800283a 	ret

000037bc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    37bc:	defffd04 	addi	sp,sp,-12
    37c0:	df000215 	stw	fp,8(sp)
    37c4:	df000204 	addi	fp,sp,8
    37c8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    37cc:	e0bfff17 	ldw	r2,-4(fp)
    37d0:	10800217 	ldw	r2,8(r2)
    37d4:	10d00034 	orhi	r3,r2,16384
    37d8:	e0bfff17 	ldw	r2,-4(fp)
    37dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    37e0:	e03ffe15 	stw	zero,-8(fp)
    37e4:	00001d06 	br	385c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    37e8:	00800034 	movhi	r2,0
    37ec:	10963f04 	addi	r2,r2,22780
    37f0:	e0fffe17 	ldw	r3,-8(fp)
    37f4:	18c00324 	muli	r3,r3,12
    37f8:	10c5883a 	add	r2,r2,r3
    37fc:	10c00017 	ldw	r3,0(r2)
    3800:	e0bfff17 	ldw	r2,-4(fp)
    3804:	10800017 	ldw	r2,0(r2)
    3808:	1880111e 	bne	r3,r2,3850 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    380c:	00800034 	movhi	r2,0
    3810:	10963f04 	addi	r2,r2,22780
    3814:	e0fffe17 	ldw	r3,-8(fp)
    3818:	18c00324 	muli	r3,r3,12
    381c:	10c5883a 	add	r2,r2,r3
    3820:	10800204 	addi	r2,r2,8
    3824:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    3828:	1000090e 	bge	r2,zero,3850 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    382c:	e0bffe17 	ldw	r2,-8(fp)
    3830:	10c00324 	muli	r3,r2,12
    3834:	00800034 	movhi	r2,0
    3838:	10963f04 	addi	r2,r2,22780
    383c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    3840:	e0bfff17 	ldw	r2,-4(fp)
    3844:	18800226 	beq	r3,r2,3850 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    3848:	00bffcc4 	movi	r2,-13
    384c:	00000a06 	br	3878 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    3850:	e0bffe17 	ldw	r2,-8(fp)
    3854:	10800044 	addi	r2,r2,1
    3858:	e0bffe15 	stw	r2,-8(fp)
    385c:	00800034 	movhi	r2,0
    3860:	1097ad04 	addi	r2,r2,24244
    3864:	10800017 	ldw	r2,0(r2)
    3868:	1007883a 	mov	r3,r2
    386c:	e0bffe17 	ldw	r2,-8(fp)
    3870:	18bfdd2e 	bgeu	r3,r2,37e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037e8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    3874:	0005883a 	mov	r2,zero
}
    3878:	e037883a 	mov	sp,fp
    387c:	df000017 	ldw	fp,0(sp)
    3880:	dec00104 	addi	sp,sp,4
    3884:	f800283a 	ret

00003888 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    3888:	defff604 	addi	sp,sp,-40
    388c:	dfc00915 	stw	ra,36(sp)
    3890:	df000815 	stw	fp,32(sp)
    3894:	df000804 	addi	fp,sp,32
    3898:	e13ffd15 	stw	r4,-12(fp)
    389c:	e17ffe15 	stw	r5,-8(fp)
    38a0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    38a4:	00bfffc4 	movi	r2,-1
    38a8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    38ac:	00bffb44 	movi	r2,-19
    38b0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    38b4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    38b8:	01400034 	movhi	r5,0
    38bc:	2957ab04 	addi	r5,r5,24236
    38c0:	e13ffd17 	ldw	r4,-12(fp)
    38c4:	00035680 	call	3568 <alt_find_dev>
    38c8:	e0bff815 	stw	r2,-32(fp)
    38cc:	e0bff817 	ldw	r2,-32(fp)
    38d0:	1000051e 	bne	r2,zero,38e8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    38d4:	e13ffd17 	ldw	r4,-12(fp)
    38d8:	0003c0c0 	call	3c0c <alt_find_file>
    38dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    38e0:	00800044 	movi	r2,1
    38e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    38e8:	e0bff817 	ldw	r2,-32(fp)
    38ec:	10002926 	beq	r2,zero,3994 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    38f0:	e13ff817 	ldw	r4,-32(fp)
    38f4:	0003d200 	call	3d20 <alt_get_fd>
    38f8:	e0bff915 	stw	r2,-28(fp)
    38fc:	e0bff917 	ldw	r2,-28(fp)
    3900:	1000030e 	bge	r2,zero,3910 <open+0x88>
    {
      status = index;
    3904:	e0bff917 	ldw	r2,-28(fp)
    3908:	e0bffa15 	stw	r2,-24(fp)
    390c:	00002306 	br	399c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    3910:	e0bff917 	ldw	r2,-28(fp)
    3914:	10c00324 	muli	r3,r2,12
    3918:	00800034 	movhi	r2,0
    391c:	10963f04 	addi	r2,r2,22780
    3920:	1885883a 	add	r2,r3,r2
    3924:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    3928:	e0fffe17 	ldw	r3,-8(fp)
    392c:	00900034 	movhi	r2,16384
    3930:	10bfffc4 	addi	r2,r2,-1
    3934:	1886703a 	and	r3,r3,r2
    3938:	e0bffc17 	ldw	r2,-16(fp)
    393c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    3940:	e0bffb17 	ldw	r2,-20(fp)
    3944:	1000051e 	bne	r2,zero,395c <open+0xd4>
    3948:	e13ffc17 	ldw	r4,-16(fp)
    394c:	00037bc0 	call	37bc <alt_file_locked>
    3950:	e0bffa15 	stw	r2,-24(fp)
    3954:	e0bffa17 	ldw	r2,-24(fp)
    3958:	10001016 	blt	r2,zero,399c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    395c:	e0bff817 	ldw	r2,-32(fp)
    3960:	10800317 	ldw	r2,12(r2)
    3964:	10000826 	beq	r2,zero,3988 <open+0x100>
    3968:	e0bff817 	ldw	r2,-32(fp)
    396c:	10800317 	ldw	r2,12(r2)
    3970:	e1ffff17 	ldw	r7,-4(fp)
    3974:	e1bffe17 	ldw	r6,-8(fp)
    3978:	e17ffd17 	ldw	r5,-12(fp)
    397c:	e13ffc17 	ldw	r4,-16(fp)
    3980:	103ee83a 	callr	r2
    3984:	00000106 	br	398c <open+0x104>
    3988:	0005883a 	mov	r2,zero
    398c:	e0bffa15 	stw	r2,-24(fp)
    3990:	00000206 	br	399c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    3994:	00bffb44 	movi	r2,-19
    3998:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    399c:	e0bffa17 	ldw	r2,-24(fp)
    39a0:	1000090e 	bge	r2,zero,39c8 <open+0x140>
  {
    alt_release_fd (index);  
    39a4:	e13ff917 	ldw	r4,-28(fp)
    39a8:	00039e00 	call	39e0 <alt_release_fd>
    ALT_ERRNO = -status;
    39ac:	000376c0 	call	376c <alt_get_errno>
    39b0:	1007883a 	mov	r3,r2
    39b4:	e0bffa17 	ldw	r2,-24(fp)
    39b8:	0085c83a 	sub	r2,zero,r2
    39bc:	18800015 	stw	r2,0(r3)
    return -1;
    39c0:	00bfffc4 	movi	r2,-1
    39c4:	00000106 	br	39cc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    39c8:	e0bff917 	ldw	r2,-28(fp)
}
    39cc:	e037883a 	mov	sp,fp
    39d0:	dfc00117 	ldw	ra,4(sp)
    39d4:	df000017 	ldw	fp,0(sp)
    39d8:	dec00204 	addi	sp,sp,8
    39dc:	f800283a 	ret

000039e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    39e0:	defffe04 	addi	sp,sp,-8
    39e4:	df000115 	stw	fp,4(sp)
    39e8:	df000104 	addi	fp,sp,4
    39ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    39f0:	e0bfff17 	ldw	r2,-4(fp)
    39f4:	108000d0 	cmplti	r2,r2,3
    39f8:	10000d1e 	bne	r2,zero,3a30 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    39fc:	00800034 	movhi	r2,0
    3a00:	10963f04 	addi	r2,r2,22780
    3a04:	e0ffff17 	ldw	r3,-4(fp)
    3a08:	18c00324 	muli	r3,r3,12
    3a0c:	10c5883a 	add	r2,r2,r3
    3a10:	10800204 	addi	r2,r2,8
    3a14:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3a18:	00800034 	movhi	r2,0
    3a1c:	10963f04 	addi	r2,r2,22780
    3a20:	e0ffff17 	ldw	r3,-4(fp)
    3a24:	18c00324 	muli	r3,r3,12
    3a28:	10c5883a 	add	r2,r2,r3
    3a2c:	10000015 	stw	zero,0(r2)
  }
}
    3a30:	0001883a 	nop
    3a34:	e037883a 	mov	sp,fp
    3a38:	df000017 	ldw	fp,0(sp)
    3a3c:	dec00104 	addi	sp,sp,4
    3a40:	f800283a 	ret

00003a44 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    3a44:	defffa04 	addi	sp,sp,-24
    3a48:	df000515 	stw	fp,20(sp)
    3a4c:	df000504 	addi	fp,sp,20
    3a50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3a54:	0005303a 	rdctl	r2,status
    3a58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3a5c:	e0fffc17 	ldw	r3,-16(fp)
    3a60:	00bfff84 	movi	r2,-2
    3a64:	1884703a 	and	r2,r3,r2
    3a68:	1001703a 	wrctl	status,r2
  
  return context;
    3a6c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    3a70:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    3a74:	e0bfff17 	ldw	r2,-4(fp)
    3a78:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    3a7c:	e0bffd17 	ldw	r2,-12(fp)
    3a80:	10800017 	ldw	r2,0(r2)
    3a84:	e0fffd17 	ldw	r3,-12(fp)
    3a88:	18c00117 	ldw	r3,4(r3)
    3a8c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    3a90:	e0bffd17 	ldw	r2,-12(fp)
    3a94:	10800117 	ldw	r2,4(r2)
    3a98:	e0fffd17 	ldw	r3,-12(fp)
    3a9c:	18c00017 	ldw	r3,0(r3)
    3aa0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    3aa4:	e0bffd17 	ldw	r2,-12(fp)
    3aa8:	e0fffd17 	ldw	r3,-12(fp)
    3aac:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    3ab0:	e0bffd17 	ldw	r2,-12(fp)
    3ab4:	e0fffd17 	ldw	r3,-12(fp)
    3ab8:	10c00015 	stw	r3,0(r2)
    3abc:	e0bffb17 	ldw	r2,-20(fp)
    3ac0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3ac4:	e0bffe17 	ldw	r2,-8(fp)
    3ac8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    3acc:	0001883a 	nop
    3ad0:	e037883a 	mov	sp,fp
    3ad4:	df000017 	ldw	fp,0(sp)
    3ad8:	dec00104 	addi	sp,sp,4
    3adc:	f800283a 	ret

00003ae0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    3ae0:	defffb04 	addi	sp,sp,-20
    3ae4:	dfc00415 	stw	ra,16(sp)
    3ae8:	df000315 	stw	fp,12(sp)
    3aec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    3af0:	d0a00717 	ldw	r2,-32740(gp)
    3af4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    3af8:	d0a67717 	ldw	r2,-26148(gp)
    3afc:	10800044 	addi	r2,r2,1
    3b00:	d0a67715 	stw	r2,-26148(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3b04:	00002e06 	br	3bc0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    3b08:	e0bffd17 	ldw	r2,-12(fp)
    3b0c:	10800017 	ldw	r2,0(r2)
    3b10:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    3b14:	e0bffd17 	ldw	r2,-12(fp)
    3b18:	10800403 	ldbu	r2,16(r2)
    3b1c:	10803fcc 	andi	r2,r2,255
    3b20:	10000426 	beq	r2,zero,3b34 <alt_tick+0x54>
    3b24:	d0a67717 	ldw	r2,-26148(gp)
    3b28:	1000021e 	bne	r2,zero,3b34 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    3b2c:	e0bffd17 	ldw	r2,-12(fp)
    3b30:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3b34:	e0bffd17 	ldw	r2,-12(fp)
    3b38:	10800217 	ldw	r2,8(r2)
    3b3c:	d0e67717 	ldw	r3,-26148(gp)
    3b40:	18801d36 	bltu	r3,r2,3bb8 <alt_tick+0xd8>
    3b44:	e0bffd17 	ldw	r2,-12(fp)
    3b48:	10800403 	ldbu	r2,16(r2)
    3b4c:	10803fcc 	andi	r2,r2,255
    3b50:	1000191e 	bne	r2,zero,3bb8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    3b54:	e0bffd17 	ldw	r2,-12(fp)
    3b58:	10800317 	ldw	r2,12(r2)
    3b5c:	e0fffd17 	ldw	r3,-12(fp)
    3b60:	18c00517 	ldw	r3,20(r3)
    3b64:	1809883a 	mov	r4,r3
    3b68:	103ee83a 	callr	r2
    3b6c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    3b70:	e0bfff17 	ldw	r2,-4(fp)
    3b74:	1000031e 	bne	r2,zero,3b84 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    3b78:	e13ffd17 	ldw	r4,-12(fp)
    3b7c:	0003a440 	call	3a44 <alt_alarm_stop>
    3b80:	00000d06 	br	3bb8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    3b84:	e0bffd17 	ldw	r2,-12(fp)
    3b88:	10c00217 	ldw	r3,8(r2)
    3b8c:	e0bfff17 	ldw	r2,-4(fp)
    3b90:	1887883a 	add	r3,r3,r2
    3b94:	e0bffd17 	ldw	r2,-12(fp)
    3b98:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    3b9c:	e0bffd17 	ldw	r2,-12(fp)
    3ba0:	10c00217 	ldw	r3,8(r2)
    3ba4:	d0a67717 	ldw	r2,-26148(gp)
    3ba8:	1880032e 	bgeu	r3,r2,3bb8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    3bac:	e0bffd17 	ldw	r2,-12(fp)
    3bb0:	00c00044 	movi	r3,1
    3bb4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    3bb8:	e0bffe17 	ldw	r2,-8(fp)
    3bbc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    3bc0:	e0fffd17 	ldw	r3,-12(fp)
    3bc4:	d0a00704 	addi	r2,gp,-32740
    3bc8:	18bfcf1e 	bne	r3,r2,3b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003b08>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    3bcc:	0001883a 	nop
}
    3bd0:	0001883a 	nop
    3bd4:	e037883a 	mov	sp,fp
    3bd8:	dfc00117 	ldw	ra,4(sp)
    3bdc:	df000017 	ldw	fp,0(sp)
    3be0:	dec00204 	addi	sp,sp,8
    3be4:	f800283a 	ret

00003be8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    3be8:	deffff04 	addi	sp,sp,-4
    3bec:	df000015 	stw	fp,0(sp)
    3bf0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    3bf4:	000170fa 	wrctl	ienable,zero
}
    3bf8:	0001883a 	nop
    3bfc:	e037883a 	mov	sp,fp
    3c00:	df000017 	ldw	fp,0(sp)
    3c04:	dec00104 	addi	sp,sp,4
    3c08:	f800283a 	ret

00003c0c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    3c0c:	defffb04 	addi	sp,sp,-20
    3c10:	dfc00415 	stw	ra,16(sp)
    3c14:	df000315 	stw	fp,12(sp)
    3c18:	df000304 	addi	fp,sp,12
    3c1c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    3c20:	00800034 	movhi	r2,0
    3c24:	1097a904 	addi	r2,r2,24228
    3c28:	10800017 	ldw	r2,0(r2)
    3c2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3c30:	00003106 	br	3cf8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    3c34:	e0bffd17 	ldw	r2,-12(fp)
    3c38:	10800217 	ldw	r2,8(r2)
    3c3c:	1009883a 	mov	r4,r2
    3c40:	0003fc80 	call	3fc8 <strlen>
    3c44:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    3c48:	e0bffd17 	ldw	r2,-12(fp)
    3c4c:	10c00217 	ldw	r3,8(r2)
    3c50:	e0bffe17 	ldw	r2,-8(fp)
    3c54:	10bfffc4 	addi	r2,r2,-1
    3c58:	1885883a 	add	r2,r3,r2
    3c5c:	10800003 	ldbu	r2,0(r2)
    3c60:	10803fcc 	andi	r2,r2,255
    3c64:	1080201c 	xori	r2,r2,128
    3c68:	10bfe004 	addi	r2,r2,-128
    3c6c:	10800bd8 	cmpnei	r2,r2,47
    3c70:	1000031e 	bne	r2,zero,3c80 <alt_find_file+0x74>
    {
      len -= 1;
    3c74:	e0bffe17 	ldw	r2,-8(fp)
    3c78:	10bfffc4 	addi	r2,r2,-1
    3c7c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3c80:	e0bffe17 	ldw	r2,-8(fp)
    3c84:	e0ffff17 	ldw	r3,-4(fp)
    3c88:	1885883a 	add	r2,r3,r2
    3c8c:	10800003 	ldbu	r2,0(r2)
    3c90:	10803fcc 	andi	r2,r2,255
    3c94:	1080201c 	xori	r2,r2,128
    3c98:	10bfe004 	addi	r2,r2,-128
    3c9c:	10800be0 	cmpeqi	r2,r2,47
    3ca0:	1000081e 	bne	r2,zero,3cc4 <alt_find_file+0xb8>
    3ca4:	e0bffe17 	ldw	r2,-8(fp)
    3ca8:	e0ffff17 	ldw	r3,-4(fp)
    3cac:	1885883a 	add	r2,r3,r2
    3cb0:	10800003 	ldbu	r2,0(r2)
    3cb4:	10803fcc 	andi	r2,r2,255
    3cb8:	1080201c 	xori	r2,r2,128
    3cbc:	10bfe004 	addi	r2,r2,-128
    3cc0:	10000a1e 	bne	r2,zero,3cec <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    3cc4:	e0bffd17 	ldw	r2,-12(fp)
    3cc8:	10800217 	ldw	r2,8(r2)
    3ccc:	e0fffe17 	ldw	r3,-8(fp)
    3cd0:	180d883a 	mov	r6,r3
    3cd4:	e17fff17 	ldw	r5,-4(fp)
    3cd8:	1009883a 	mov	r4,r2
    3cdc:	0003f4c0 	call	3f4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3ce0:	1000021e 	bne	r2,zero,3cec <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    3ce4:	e0bffd17 	ldw	r2,-12(fp)
    3ce8:	00000806 	br	3d0c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    3cec:	e0bffd17 	ldw	r2,-12(fp)
    3cf0:	10800017 	ldw	r2,0(r2)
    3cf4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3cf8:	e0fffd17 	ldw	r3,-12(fp)
    3cfc:	00800034 	movhi	r2,0
    3d00:	1097a904 	addi	r2,r2,24228
    3d04:	18bfcb1e 	bne	r3,r2,3c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    3d08:	0005883a 	mov	r2,zero
}
    3d0c:	e037883a 	mov	sp,fp
    3d10:	dfc00117 	ldw	ra,4(sp)
    3d14:	df000017 	ldw	fp,0(sp)
    3d18:	dec00204 	addi	sp,sp,8
    3d1c:	f800283a 	ret

00003d20 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    3d20:	defffc04 	addi	sp,sp,-16
    3d24:	df000315 	stw	fp,12(sp)
    3d28:	df000304 	addi	fp,sp,12
    3d2c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    3d30:	00bffa04 	movi	r2,-24
    3d34:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3d38:	e03ffd15 	stw	zero,-12(fp)
    3d3c:	00001d06 	br	3db4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    3d40:	00800034 	movhi	r2,0
    3d44:	10963f04 	addi	r2,r2,22780
    3d48:	e0fffd17 	ldw	r3,-12(fp)
    3d4c:	18c00324 	muli	r3,r3,12
    3d50:	10c5883a 	add	r2,r2,r3
    3d54:	10800017 	ldw	r2,0(r2)
    3d58:	1000131e 	bne	r2,zero,3da8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    3d5c:	00800034 	movhi	r2,0
    3d60:	10963f04 	addi	r2,r2,22780
    3d64:	e0fffd17 	ldw	r3,-12(fp)
    3d68:	18c00324 	muli	r3,r3,12
    3d6c:	10c5883a 	add	r2,r2,r3
    3d70:	e0ffff17 	ldw	r3,-4(fp)
    3d74:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    3d78:	00800034 	movhi	r2,0
    3d7c:	1097ad04 	addi	r2,r2,24244
    3d80:	10c00017 	ldw	r3,0(r2)
    3d84:	e0bffd17 	ldw	r2,-12(fp)
    3d88:	1880040e 	bge	r3,r2,3d9c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    3d8c:	00800034 	movhi	r2,0
    3d90:	1097ad04 	addi	r2,r2,24244
    3d94:	e0fffd17 	ldw	r3,-12(fp)
    3d98:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    3d9c:	e0bffd17 	ldw	r2,-12(fp)
    3da0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    3da4:	00000606 	br	3dc0 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3da8:	e0bffd17 	ldw	r2,-12(fp)
    3dac:	10800044 	addi	r2,r2,1
    3db0:	e0bffd15 	stw	r2,-12(fp)
    3db4:	e0bffd17 	ldw	r2,-12(fp)
    3db8:	10800810 	cmplti	r2,r2,32
    3dbc:	103fe01e 	bne	r2,zero,3d40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d40>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    3dc0:	e0bffe17 	ldw	r2,-8(fp)
}
    3dc4:	e037883a 	mov	sp,fp
    3dc8:	df000017 	ldw	fp,0(sp)
    3dcc:	dec00104 	addi	sp,sp,4
    3dd0:	f800283a 	ret

00003dd4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    3dd4:	defffb04 	addi	sp,sp,-20
    3dd8:	df000415 	stw	fp,16(sp)
    3ddc:	df000404 	addi	fp,sp,16
    3de0:	e13ffe15 	stw	r4,-8(fp)
    3de4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    3de8:	e0bfff17 	ldw	r2,-4(fp)
    3dec:	10840070 	cmpltui	r2,r2,4097
    3df0:	1000021e 	bne	r2,zero,3dfc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    3df4:	00840004 	movi	r2,4096
    3df8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    3dfc:	e0fffe17 	ldw	r3,-8(fp)
    3e00:	e0bfff17 	ldw	r2,-4(fp)
    3e04:	1885883a 	add	r2,r3,r2
    3e08:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3e0c:	e0bffe17 	ldw	r2,-8(fp)
    3e10:	e0bffc15 	stw	r2,-16(fp)
    3e14:	00000506 	br	3e2c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    3e18:	e0bffc17 	ldw	r2,-16(fp)
    3e1c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3e20:	e0bffc17 	ldw	r2,-16(fp)
    3e24:	10800804 	addi	r2,r2,32
    3e28:	e0bffc15 	stw	r2,-16(fp)
    3e2c:	e0fffc17 	ldw	r3,-16(fp)
    3e30:	e0bffd17 	ldw	r2,-12(fp)
    3e34:	18bff836 	bltu	r3,r2,3e18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e18>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    3e38:	e0bffe17 	ldw	r2,-8(fp)
    3e3c:	108007cc 	andi	r2,r2,31
    3e40:	10000226 	beq	r2,zero,3e4c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    3e44:	e0bffc17 	ldw	r2,-16(fp)
    3e48:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    3e4c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    3e50:	0001883a 	nop
    3e54:	e037883a 	mov	sp,fp
    3e58:	df000017 	ldw	fp,0(sp)
    3e5c:	dec00104 	addi	sp,sp,4
    3e60:	f800283a 	ret

00003e64 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    3e64:	defffe04 	addi	sp,sp,-8
    3e68:	df000115 	stw	fp,4(sp)
    3e6c:	df000104 	addi	fp,sp,4
    3e70:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    3e74:	e0bfff17 	ldw	r2,-4(fp)
    3e78:	10bffe84 	addi	r2,r2,-6
    3e7c:	10c00428 	cmpgeui	r3,r2,16
    3e80:	18001a1e 	bne	r3,zero,3eec <alt_exception_cause_generated_bad_addr+0x88>
    3e84:	100690ba 	slli	r3,r2,2
    3e88:	00800034 	movhi	r2,0
    3e8c:	108fa704 	addi	r2,r2,16028
    3e90:	1885883a 	add	r2,r3,r2
    3e94:	10800017 	ldw	r2,0(r2)
    3e98:	1000683a 	jmp	r2
    3e9c:	00003edc 	xori	zero,zero,251
    3ea0:	00003edc 	xori	zero,zero,251
    3ea4:	00003eec 	andhi	zero,zero,251
    3ea8:	00003eec 	andhi	zero,zero,251
    3eac:	00003eec 	andhi	zero,zero,251
    3eb0:	00003edc 	xori	zero,zero,251
    3eb4:	00003ee4 	muli	zero,zero,251
    3eb8:	00003eec 	andhi	zero,zero,251
    3ebc:	00003edc 	xori	zero,zero,251
    3ec0:	00003edc 	xori	zero,zero,251
    3ec4:	00003eec 	andhi	zero,zero,251
    3ec8:	00003edc 	xori	zero,zero,251
    3ecc:	00003ee4 	muli	zero,zero,251
    3ed0:	00003eec 	andhi	zero,zero,251
    3ed4:	00003eec 	andhi	zero,zero,251
    3ed8:	00003edc 	xori	zero,zero,251
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    3edc:	00800044 	movi	r2,1
    3ee0:	00000306 	br	3ef0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    3ee4:	0005883a 	mov	r2,zero
    3ee8:	00000106 	br	3ef0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    3eec:	0005883a 	mov	r2,zero
  }
}
    3ef0:	e037883a 	mov	sp,fp
    3ef4:	df000017 	ldw	fp,0(sp)
    3ef8:	dec00104 	addi	sp,sp,4
    3efc:	f800283a 	ret

00003f00 <atexit>:
    3f00:	200b883a 	mov	r5,r4
    3f04:	000f883a 	mov	r7,zero
    3f08:	000d883a 	mov	r6,zero
    3f0c:	0009883a 	mov	r4,zero
    3f10:	00040601 	jmpi	4060 <__register_exitproc>

00003f14 <exit>:
    3f14:	defffe04 	addi	sp,sp,-8
    3f18:	000b883a 	mov	r5,zero
    3f1c:	dc000015 	stw	r16,0(sp)
    3f20:	dfc00115 	stw	ra,4(sp)
    3f24:	2021883a 	mov	r16,r4
    3f28:	00041780 	call	4178 <__call_exitprocs>
    3f2c:	00800034 	movhi	r2,0
    3f30:	1097b104 	addi	r2,r2,24260
    3f34:	11000017 	ldw	r4,0(r2)
    3f38:	20800f17 	ldw	r2,60(r4)
    3f3c:	10000126 	beq	r2,zero,3f44 <exit+0x30>
    3f40:	103ee83a 	callr	r2
    3f44:	8009883a 	mov	r4,r16
    3f48:	00042f80 	call	42f8 <_exit>

00003f4c <memcmp>:
    3f4c:	01c000c4 	movi	r7,3
    3f50:	3980192e 	bgeu	r7,r6,3fb8 <memcmp+0x6c>
    3f54:	2144b03a 	or	r2,r4,r5
    3f58:	11c4703a 	and	r2,r2,r7
    3f5c:	10000f26 	beq	r2,zero,3f9c <memcmp+0x50>
    3f60:	20800003 	ldbu	r2,0(r4)
    3f64:	28c00003 	ldbu	r3,0(r5)
    3f68:	10c0151e 	bne	r2,r3,3fc0 <memcmp+0x74>
    3f6c:	31bfff84 	addi	r6,r6,-2
    3f70:	01ffffc4 	movi	r7,-1
    3f74:	00000406 	br	3f88 <memcmp+0x3c>
    3f78:	20800003 	ldbu	r2,0(r4)
    3f7c:	28c00003 	ldbu	r3,0(r5)
    3f80:	31bfffc4 	addi	r6,r6,-1
    3f84:	10c00e1e 	bne	r2,r3,3fc0 <memcmp+0x74>
    3f88:	21000044 	addi	r4,r4,1
    3f8c:	29400044 	addi	r5,r5,1
    3f90:	31fff91e 	bne	r6,r7,3f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f78>
    3f94:	0005883a 	mov	r2,zero
    3f98:	f800283a 	ret
    3f9c:	20c00017 	ldw	r3,0(r4)
    3fa0:	28800017 	ldw	r2,0(r5)
    3fa4:	18bfee1e 	bne	r3,r2,3f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f60>
    3fa8:	31bfff04 	addi	r6,r6,-4
    3fac:	21000104 	addi	r4,r4,4
    3fb0:	29400104 	addi	r5,r5,4
    3fb4:	39bff936 	bltu	r7,r6,3f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f9c>
    3fb8:	303fe91e 	bne	r6,zero,3f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f60>
    3fbc:	003ff506 	br	3f94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f94>
    3fc0:	10c5c83a 	sub	r2,r2,r3
    3fc4:	f800283a 	ret

00003fc8 <strlen>:
    3fc8:	208000cc 	andi	r2,r4,3
    3fcc:	10002026 	beq	r2,zero,4050 <strlen+0x88>
    3fd0:	20800007 	ldb	r2,0(r4)
    3fd4:	10002026 	beq	r2,zero,4058 <strlen+0x90>
    3fd8:	2005883a 	mov	r2,r4
    3fdc:	00000206 	br	3fe8 <strlen+0x20>
    3fe0:	10c00007 	ldb	r3,0(r2)
    3fe4:	18001826 	beq	r3,zero,4048 <strlen+0x80>
    3fe8:	10800044 	addi	r2,r2,1
    3fec:	10c000cc 	andi	r3,r2,3
    3ff0:	183ffb1e 	bne	r3,zero,3fe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003fe0>
    3ff4:	10c00017 	ldw	r3,0(r2)
    3ff8:	01ffbff4 	movhi	r7,65279
    3ffc:	39ffbfc4 	addi	r7,r7,-257
    4000:	00ca303a 	nor	r5,zero,r3
    4004:	01a02074 	movhi	r6,32897
    4008:	19c7883a 	add	r3,r3,r7
    400c:	31a02004 	addi	r6,r6,-32640
    4010:	1946703a 	and	r3,r3,r5
    4014:	1986703a 	and	r3,r3,r6
    4018:	1800091e 	bne	r3,zero,4040 <strlen+0x78>
    401c:	10800104 	addi	r2,r2,4
    4020:	10c00017 	ldw	r3,0(r2)
    4024:	19cb883a 	add	r5,r3,r7
    4028:	00c6303a 	nor	r3,zero,r3
    402c:	28c6703a 	and	r3,r5,r3
    4030:	1986703a 	and	r3,r3,r6
    4034:	183ff926 	beq	r3,zero,401c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700401c>
    4038:	00000106 	br	4040 <strlen+0x78>
    403c:	10800044 	addi	r2,r2,1
    4040:	10c00007 	ldb	r3,0(r2)
    4044:	183ffd1e 	bne	r3,zero,403c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700403c>
    4048:	1105c83a 	sub	r2,r2,r4
    404c:	f800283a 	ret
    4050:	2005883a 	mov	r2,r4
    4054:	003fe706 	br	3ff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ff4>
    4058:	0005883a 	mov	r2,zero
    405c:	f800283a 	ret

00004060 <__register_exitproc>:
    4060:	defffa04 	addi	sp,sp,-24
    4064:	dc000315 	stw	r16,12(sp)
    4068:	04000034 	movhi	r16,0
    406c:	8417b104 	addi	r16,r16,24260
    4070:	80c00017 	ldw	r3,0(r16)
    4074:	dc400415 	stw	r17,16(sp)
    4078:	dfc00515 	stw	ra,20(sp)
    407c:	18805217 	ldw	r2,328(r3)
    4080:	2023883a 	mov	r17,r4
    4084:	10003726 	beq	r2,zero,4164 <__register_exitproc+0x104>
    4088:	10c00117 	ldw	r3,4(r2)
    408c:	010007c4 	movi	r4,31
    4090:	20c00e16 	blt	r4,r3,40cc <__register_exitproc+0x6c>
    4094:	1a000044 	addi	r8,r3,1
    4098:	8800221e 	bne	r17,zero,4124 <__register_exitproc+0xc4>
    409c:	18c00084 	addi	r3,r3,2
    40a0:	18c7883a 	add	r3,r3,r3
    40a4:	18c7883a 	add	r3,r3,r3
    40a8:	12000115 	stw	r8,4(r2)
    40ac:	10c7883a 	add	r3,r2,r3
    40b0:	19400015 	stw	r5,0(r3)
    40b4:	0005883a 	mov	r2,zero
    40b8:	dfc00517 	ldw	ra,20(sp)
    40bc:	dc400417 	ldw	r17,16(sp)
    40c0:	dc000317 	ldw	r16,12(sp)
    40c4:	dec00604 	addi	sp,sp,24
    40c8:	f800283a 	ret
    40cc:	00800034 	movhi	r2,0
    40d0:	10800004 	addi	r2,r2,0
    40d4:	10002626 	beq	r2,zero,4170 <__register_exitproc+0x110>
    40d8:	01006404 	movi	r4,400
    40dc:	d9400015 	stw	r5,0(sp)
    40e0:	d9800115 	stw	r6,4(sp)
    40e4:	d9c00215 	stw	r7,8(sp)
    40e8:	00000000 	call	0 <__reset>
    40ec:	d9400017 	ldw	r5,0(sp)
    40f0:	d9800117 	ldw	r6,4(sp)
    40f4:	d9c00217 	ldw	r7,8(sp)
    40f8:	10001d26 	beq	r2,zero,4170 <__register_exitproc+0x110>
    40fc:	81000017 	ldw	r4,0(r16)
    4100:	10000115 	stw	zero,4(r2)
    4104:	02000044 	movi	r8,1
    4108:	22405217 	ldw	r9,328(r4)
    410c:	0007883a 	mov	r3,zero
    4110:	12400015 	stw	r9,0(r2)
    4114:	20805215 	stw	r2,328(r4)
    4118:	10006215 	stw	zero,392(r2)
    411c:	10006315 	stw	zero,396(r2)
    4120:	883fde26 	beq	r17,zero,409c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700409c>
    4124:	18c9883a 	add	r4,r3,r3
    4128:	2109883a 	add	r4,r4,r4
    412c:	1109883a 	add	r4,r2,r4
    4130:	21802215 	stw	r6,136(r4)
    4134:	01800044 	movi	r6,1
    4138:	12406217 	ldw	r9,392(r2)
    413c:	30cc983a 	sll	r6,r6,r3
    4140:	4992b03a 	or	r9,r9,r6
    4144:	12406215 	stw	r9,392(r2)
    4148:	21c04215 	stw	r7,264(r4)
    414c:	01000084 	movi	r4,2
    4150:	893fd21e 	bne	r17,r4,409c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700409c>
    4154:	11006317 	ldw	r4,396(r2)
    4158:	218cb03a 	or	r6,r4,r6
    415c:	11806315 	stw	r6,396(r2)
    4160:	003fce06 	br	409c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700409c>
    4164:	18805304 	addi	r2,r3,332
    4168:	18805215 	stw	r2,328(r3)
    416c:	003fc606 	br	4088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004088>
    4170:	00bfffc4 	movi	r2,-1
    4174:	003fd006 	br	40b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040b8>

00004178 <__call_exitprocs>:
    4178:	defff504 	addi	sp,sp,-44
    417c:	df000915 	stw	fp,36(sp)
    4180:	dd400615 	stw	r21,24(sp)
    4184:	dc800315 	stw	r18,12(sp)
    4188:	dfc00a15 	stw	ra,40(sp)
    418c:	ddc00815 	stw	r23,32(sp)
    4190:	dd800715 	stw	r22,28(sp)
    4194:	dd000515 	stw	r20,20(sp)
    4198:	dcc00415 	stw	r19,16(sp)
    419c:	dc400215 	stw	r17,8(sp)
    41a0:	dc000115 	stw	r16,4(sp)
    41a4:	d9000015 	stw	r4,0(sp)
    41a8:	2839883a 	mov	fp,r5
    41ac:	04800044 	movi	r18,1
    41b0:	057fffc4 	movi	r21,-1
    41b4:	00800034 	movhi	r2,0
    41b8:	1097b104 	addi	r2,r2,24260
    41bc:	12000017 	ldw	r8,0(r2)
    41c0:	45005217 	ldw	r20,328(r8)
    41c4:	44c05204 	addi	r19,r8,328
    41c8:	a0001c26 	beq	r20,zero,423c <__call_exitprocs+0xc4>
    41cc:	a0800117 	ldw	r2,4(r20)
    41d0:	15ffffc4 	addi	r23,r2,-1
    41d4:	b8000d16 	blt	r23,zero,420c <__call_exitprocs+0x94>
    41d8:	14000044 	addi	r16,r2,1
    41dc:	8421883a 	add	r16,r16,r16
    41e0:	8421883a 	add	r16,r16,r16
    41e4:	84402004 	addi	r17,r16,128
    41e8:	a463883a 	add	r17,r20,r17
    41ec:	a421883a 	add	r16,r20,r16
    41f0:	e0001e26 	beq	fp,zero,426c <__call_exitprocs+0xf4>
    41f4:	80804017 	ldw	r2,256(r16)
    41f8:	e0801c26 	beq	fp,r2,426c <__call_exitprocs+0xf4>
    41fc:	bdffffc4 	addi	r23,r23,-1
    4200:	843fff04 	addi	r16,r16,-4
    4204:	8c7fff04 	addi	r17,r17,-4
    4208:	bd7ff91e 	bne	r23,r21,41f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041f0>
    420c:	00800034 	movhi	r2,0
    4210:	10800004 	addi	r2,r2,0
    4214:	10000926 	beq	r2,zero,423c <__call_exitprocs+0xc4>
    4218:	a0800117 	ldw	r2,4(r20)
    421c:	1000301e 	bne	r2,zero,42e0 <__call_exitprocs+0x168>
    4220:	a0800017 	ldw	r2,0(r20)
    4224:	10003226 	beq	r2,zero,42f0 <__call_exitprocs+0x178>
    4228:	a009883a 	mov	r4,r20
    422c:	98800015 	stw	r2,0(r19)
    4230:	00000000 	call	0 <__reset>
    4234:	9d000017 	ldw	r20,0(r19)
    4238:	a03fe41e 	bne	r20,zero,41cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041cc>
    423c:	dfc00a17 	ldw	ra,40(sp)
    4240:	df000917 	ldw	fp,36(sp)
    4244:	ddc00817 	ldw	r23,32(sp)
    4248:	dd800717 	ldw	r22,28(sp)
    424c:	dd400617 	ldw	r21,24(sp)
    4250:	dd000517 	ldw	r20,20(sp)
    4254:	dcc00417 	ldw	r19,16(sp)
    4258:	dc800317 	ldw	r18,12(sp)
    425c:	dc400217 	ldw	r17,8(sp)
    4260:	dc000117 	ldw	r16,4(sp)
    4264:	dec00b04 	addi	sp,sp,44
    4268:	f800283a 	ret
    426c:	a0800117 	ldw	r2,4(r20)
    4270:	80c00017 	ldw	r3,0(r16)
    4274:	10bfffc4 	addi	r2,r2,-1
    4278:	15c01426 	beq	r2,r23,42cc <__call_exitprocs+0x154>
    427c:	80000015 	stw	zero,0(r16)
    4280:	183fde26 	beq	r3,zero,41fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041fc>
    4284:	95c8983a 	sll	r4,r18,r23
    4288:	a0806217 	ldw	r2,392(r20)
    428c:	a5800117 	ldw	r22,4(r20)
    4290:	2084703a 	and	r2,r4,r2
    4294:	10000b26 	beq	r2,zero,42c4 <__call_exitprocs+0x14c>
    4298:	a0806317 	ldw	r2,396(r20)
    429c:	2088703a 	and	r4,r4,r2
    42a0:	20000c1e 	bne	r4,zero,42d4 <__call_exitprocs+0x15c>
    42a4:	89400017 	ldw	r5,0(r17)
    42a8:	d9000017 	ldw	r4,0(sp)
    42ac:	183ee83a 	callr	r3
    42b0:	a0800117 	ldw	r2,4(r20)
    42b4:	15bfbf1e 	bne	r2,r22,41b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041b4>
    42b8:	98800017 	ldw	r2,0(r19)
    42bc:	153fcf26 	beq	r2,r20,41fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041fc>
    42c0:	003fbc06 	br	41b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041b4>
    42c4:	183ee83a 	callr	r3
    42c8:	003ff906 	br	42b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042b0>
    42cc:	a5c00115 	stw	r23,4(r20)
    42d0:	003feb06 	br	4280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004280>
    42d4:	89000017 	ldw	r4,0(r17)
    42d8:	183ee83a 	callr	r3
    42dc:	003ff406 	br	42b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042b0>
    42e0:	a0800017 	ldw	r2,0(r20)
    42e4:	a027883a 	mov	r19,r20
    42e8:	1029883a 	mov	r20,r2
    42ec:	003fb606 	br	41c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041c8>
    42f0:	0005883a 	mov	r2,zero
    42f4:	003ffb06 	br	42e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042e4>

000042f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    42f8:	defffd04 	addi	sp,sp,-12
    42fc:	df000215 	stw	fp,8(sp)
    4300:	df000204 	addi	fp,sp,8
    4304:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    4308:	0001883a 	nop
    430c:	e0bfff17 	ldw	r2,-4(fp)
    4310:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    4314:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4318:	10000226 	beq	r2,zero,4324 <_exit+0x2c>
    ALT_SIM_FAIL();
    431c:	002af070 	cmpltui	zero,zero,43969
    4320:	00000106 	br	4328 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    4324:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4328:	003fff06 	br	4328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004328>
